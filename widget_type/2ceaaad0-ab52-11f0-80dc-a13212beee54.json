{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "control_widget",
    "name" : "Control widget",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/3734972c6f929fe71f920339231a353a.jpg",
    "description" : null,
    "descriptor" : {
      "type" : "rpc",
      "sizeX" : 4,
      "sizeY" : 2,
      "resources" : [ ],
      "templateHtml" : "<fieldset class=\"gpio-panel\" style=\"height: 100%;\">\n  <section class=\"gpio-row flex flex-row\" *ngFor=\"let row of rows\"\n           [style.height.px]=\"prefferedRowHeight\">\n    <section class=\"flex flex-1 flex-row\" *ngFor=\"let cell of row; let $index = index\">\n      <section class=\"flex flex-1 flex-row items-center\" [class.justify-end]=\"$index===0\" [class.justify-start]=\"$index!==0\" *ngIf=\"cell\">\n        <span class=\"gpio-left-label\" [class.!hidden]=\"$index!==0\">{{ cell.label }}</span>\n        <section class=\"switch-panel flex flex-row items-center justify-start\" [class.col-0]=\"$index===0\" [class.col-1]=\"$index!==0\"\n                 [style.height.px]=\"prefferedRowHeight\"\n                 [style.background-color]=\"switchPanelBackgroundColor\">\n          <span class=\"pin\" [class.!hidden]=\"$index!==0\">{{cell.pin}}</span>\n          <span class=\"flex-1\" [class.!hidden]=\"$index!==1\"></span>\n          <mat-slide-toggle\n              [disabled]=\"!rpcEnabled || executingRpcRequest\"\n              [checked]=\"cell.enabled\"\n              (change)=\"gpioToggleChange($event, cell)\"\n              (click)=\"gpioClick($event, cell)\">\n          </mat-slide-toggle>\n          <span class=\"flex-1\" [class.!hidden]=\"$index!==0\"></span>\n          <span class=\"pin\" [class.!hidden]=\"$index!==1\">{{cell.pin}}</span>\n        </section>\n        <span class=\"gpio-right-label\" [class.!hidden]=\"$index!==1\">{{ cell.label }}</span>\n      </section>\n      <section class=\"flex flex-1 flex-row\" *ngIf=\"!cell\">\n        <span class=\"flex-1\" [class.!hidden]=\"$index!==0\"></span>\n        <span class=\"switch-panel\"\n              [style.height.px]=\"prefferedRowHeight\"\n              [style.background-color]=\"switchPanelBackgroundColor\"></span>\n        <span class=\"flex-1\" [class.!hidden]=\"$index!==1\"></span>\n      </section>\n    </section>\n  </section>\n  <span class=\"error\" style=\"position: absolute; bottom: 5px;\" [class.!hidden]=\"!rpcErrorText\">{{rpcErrorText}}</span>\n  <mat-progress-bar [class.!hidden]=\"!executingRpcRequest\" style=\"position: absolute; bottom: 0;\" mode=\"indeterminate\"></mat-progress-bar>\n</fieldset>",
      "templateCss" : ".error {\n    font-size: 14px !important;\n    color: maroon;/*rgb(250,250,250);*/\n    background-color: transparent;\n    padding: 6px;\n}\n\n.error span {\n    margin: auto;\n}\n\n.gpio-panel {\n    padding-top: 10px;\n    white-space: nowrap;\n}\n\n.gpio-panel section.flex-1 {\n    min-width: 0px;\n}\n\n\n.switch-panel {\n    margin: 0;\n    height: 32px;\n    width: 66px;\n    min-width: 66px;\n}\n\n.switch-panel mat-slide-toggle {\n    margin: 0;\n    width: 36px;\n    min-width: 36px;\n}\n\n.switch-panel.col-0 mat-slide-toggle {\n    margin-left: 8px;\n    margin-right: 4px;\n}\n\n.switch-panel.col-1 mat-slide-toggle {\n    margin-left: 4px;\n    margin-right: 8px;\n}\n\n.gpio-row {\n    height: 32px;\n}\n\n.pin {\n    margin-top: auto;\n    margin-bottom: auto;\n    color: white;\n    font-size: 12px;\n    width: 16px;\n    min-width: 16px;\n}\n\n.switch-panel.col-0 .pin {\n    margin-left: auto;\n    padding-left: 2px;\n    text-align: right;\n}\n\n.switch-panel.col-1 .pin {\n    margin-right: auto;\n\n    text-align: left;\n}\n\n.gpio-left-label {\n    margin-right: 8px;\n}\n\n.gpio-right-label {\n    margin-left: 8px;\n}",
      "controllerScript" : {
        "body" : "console.log(a.text);\nconsole.log(b.message);\n\n\nvar namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n    var utils = self.ctx.$injector.get(self.ctx.servicesMap.get('utils'));\n    namespace = 'gpio-control-' + utils.guid();\n    cssParser.testMode = false;\n    cssParser.cssPreviewNamespace = namespace;\n    self.ctx.$container.addClass(namespace);\n    self.ctx.ngZone.run(function() {\n       init(); \n    });\n}\n\nfunction init() {\n        \n    var i, gpio;\n    var scope = self.ctx.$scope;\n    var settings = self.ctx.settings;\n    scope.gpioList = [];\n    for (var g = 0; g < settings.gpioList.length; g++) {\n        gpio = settings.gpioList[g];\n        scope.gpioList.push(\n            {\n                row: gpio.row,\n                col: gpio.col,\n                pin: gpio.pin,\n                label: gpio.label,\n                enabled: false\n            }\n        );\n    }\n\n    scope.requestTimeout = settings.requestTimeout || 1000;\n\n    scope.switchPanelBackgroundColor = settings.switchPanelBackgroundColor || tinycolor('green').lighten(2).toRgbString();\n\n    scope.gpioStatusRequest = {\n        method: \"getGpioStatus\",\n        paramsBody: \"{}\"\n    };\n    \n    if (settings.gpioStatusRequest) {\n        scope.gpioStatusRequest.method = settings.gpioStatusRequest.method || scope.gpioStatusRequest.method;\n        scope.gpioStatusRequest.paramsBody = settings.gpioStatusRequest.paramsBody || scope.gpioStatusRequest.paramsBody;\n    }\n    \n    scope.gpioStatusChangeRequest = {\n        method: \"setGpioStatus\",\n        paramsBody: \"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"\n    };\n    \n    if (settings.gpioStatusChangeRequest) {\n        scope.gpioStatusChangeRequest.method = settings.gpioStatusChangeRequest.method || scope.gpioStatusChangeRequest.method;\n        scope.gpioStatusChangeRequest.paramsBody = settings.gpioStatusChangeRequest.paramsBody || scope.gpioStatusChangeRequest.paramsBody;\n    }\n    \n    scope.parseGpioStatusFunction = \"return body[pin] === true;\";\n    \n    if (settings.parseGpioStatusFunction && settings.parseGpioStatusFunction.length > 0) {\n        scope.parseGpioStatusFunction = settings.parseGpioStatusFunction;\n    }\n    \n    scope.parseGpioStatusFunction = new Function(\"body, pin\", scope.parseGpioStatusFunction);\n    \n    function requestGpioStatus() {\n        self.ctx.controlApi.sendTwoWayCommand(scope.gpioStatusRequest.method, \n                            scope.gpioStatusRequest.paramsBody, \n                            scope.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                    for (var g = 0; g < scope.gpioList.length; g++) {\n                        var gpio = scope.gpioList[g];\n                        var enabled = scope.parseGpioStatusFunction.apply(this, [responseBody, gpio.pin]);\n                        gpio.enabled = enabled;   \n                        self.ctx.detectChanges();\n                    }\n                }\n            );\n    }\n    \n    function changeGpioStatus(gpio) {\n        var pin = gpio.pin + '';\n        var enabled = !gpio.enabled;\n        enabled = enabled === true ? 'true' : 'false';\n        var paramsBody = scope.gpioStatusChangeRequest.paramsBody;\n        var requestBody = JSON.parse(paramsBody.replace(\"\\\"{$pin}\\\"\", pin).replace(\"\\\"{$enabled}\\\"\", enabled));\n        self.ctx.controlApi.sendTwoWayCommand(scope.gpioStatusChangeRequest.method, \n                                    requestBody, scope.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            var enabled = scope.parseGpioStatusFunction.apply(this, [responseBody, gpio.pin]);\n                            gpio.enabled = enabled;\n                            self.ctx.detectChanges();\n                        }\n                    );\n    }\n    \n    scope.gpioCells = {};\n    var rowCount = 0;\n    for (i = 0; i < scope.gpioList.length; i++) {\n        gpio = scope.gpioList[i];\n        scope.gpioCells[gpio.row+'_'+gpio.col] = gpio;\n        rowCount = Math.max(rowCount, gpio.row+1);\n    }\n    \n    scope.prefferedRowHeight = 32;\n    scope.rows = [];\n    for (i = 0; i < rowCount; i++) {\n        var row = [];\n        for (var c =0; c<2;c++) {\n            if (scope.gpioCells[i+'_'+c]) {\n                row[c] = scope.gpioCells[i+'_'+c];\n            } else {\n                row[c] = null;\n            }\n        }\n        scope.rows.push(row);\n    }\n\n    scope.gpioClick = function($event, gpio) {\n        if (scope.rpcEnabled && !scope.executingRpcRequest) {\n            changeGpioStatus(gpio);\n        }\n    };\n    \n    scope.gpioToggleChange = function($event, gpio) {\n        gpio.enabled = !$event.checked;\n        $event.source.toggle();\n        self.ctx.detectChanges();\n    }\n    \n    if (scope.rpcEnabled) {\n        requestGpioStatus();   \n    }\n    \n    self.onResize();\n}\n\nself.onResize = function() {\n    var scope = self.ctx.$scope;\n    var rowCount = scope.rows.length;\n    var prefferedRowHeight = (self.ctx.height - 35)/rowCount;\n    prefferedRowHeight = Math.min(32, prefferedRowHeight);\n    prefferedRowHeight = Math.max(12, prefferedRowHeight);\n    scope.prefferedRowHeight = prefferedRowHeight;\n    var ratio = prefferedRowHeight/32;\n    \n    var css = '.mat-slide-toggle .mat-slide-toggle-bar {\\n' +\n        '   height: ' + 14*ratio+'px;\\n'+\n        '   width: ' + 36*ratio+'px;\\n'+\n    '}\\n';\n    css += '.mat-slide-toggle .mat-slide-toggle-thumb-container {\\n' +\n        '   height: ' + 20*ratio+'px;\\n'+\n        '   width: ' + 20*ratio+'px;\\n'+\n    '}\\n';\n    css += '.mat-slide-toggle .mat-slide-toggle-thumb {\\n' +\n        '   height: ' + 20*ratio+'px;\\n'+\n        '   width: ' + 20*ratio+'px;\\n'+\n    '}\\n';\n    css += '.mat-slide-toggle .mat-slide-toggle-ripple {\\n' +\n        '   height: ' + 40*ratio+'px;\\n'+\n        '   width: ' + 40*ratio+'px;\\n'+\n        '   top: calc(50% - '+20*ratio+'px);\\n'+\n        '   left: calc(50% - '+20*ratio+'px);\\n'+\n    '}\\n';\n    css += '.gpio-left-label, .gpio-right-label {\\n' +\n        '   font-size: ' + 16*ratio+'px;\\n'+\n    '}\\n';\n    var pinsFontSize = Math.max(9, 12*ratio);\n    css += '.pin {\\n' +\n        '   font-size: ' + pinsFontSize+'px;\\n'+\n    '}\\n';\n\n    cssParser.createStyleElement(namespace, css);\n    \n    self.ctx.detectChanges();\n}\n\nself.onDestroy = function() {\n}\n",
        "modules" : {
          "a" : "tb-resource;/api/resource/js_module/tenant/buiik.js",
          "b" : "tb-resource;/api/resource/js_module/tenant/module_smoke_(1).js"
        }
      },
      "settingsForm" : [ {
        "id" : "sryh",
        "name" : "xyt5",
        "hint" : "tf5ry",
        "group" : "hvtfr5yh",
        "type" : "json",
        "default" : "{\n  \"link\": \"/api/images/system/2071669.png\",\n  \"title\": \"Head and gears.png\",\n  \"type\": \"IMAGE\",\n  \"subType\": \"IMAGE\",\n  \"resourceKey\": \"2071669.png\",\n  \"fileName\": \"images (1).png\",\n  \"publicResourceKey\": \"opiaxHunihiwljM8OKtwDJh5E9MWF3BJ\",\n  \"mediaType\": \"image/png\",\n  \"data\": \"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\",\n  \"public\": true\n}"
      }, {
        "id" : "igtt",
        "name" : "diyr",
        "hint" : "friy",
        "group" : "riu",
        "type" : "image",
        "default" : "tb-image;/api/images/tenant/code-coding-script-svgrepo-com.svg"
      }, {
        "id" : "uuuu",
        "name" : "jucyt",
        "hint" : "yj",
        "group" : "jgy",
        "type" : "number",
        "default" : 4,
        "subLabel" : "4wef",
        "fieldSuffix" : "a4wt",
        "rowClass" : "align-start no-border",
        "fieldClass" : "flex medium-width",
        "min" : 0,
        "max" : 100,
        "step" : 2
      } ],
      "dataKeySettingsForm" : [ {
        "id" : "erdgv",
        "name" : "rgsv",
        "hint" : "grfzg",
        "group" : "rzdg",
        "type" : "text",
        "default" : "rzegrg"
      }, {
        "id" : "mg",
        "name" : "xdhbn",
        "hint" : "gxbers",
        "group" : "zdevbr",
        "type" : "image",
        "default" : "tb-image;/api/images/tenant/tenant-image.jpg"
      } ],
      "settingsDirective" : "tb-gpio-control-widget-settings",
      "defaultConfig" : "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Basic GPIO Control\"}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "2ceaaad0-ab52-11f0-80dc-a13212beee54"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}