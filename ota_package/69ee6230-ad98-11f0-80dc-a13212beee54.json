{
  "entityType" : "OTA_PACKAGE",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "checksum" : "500d6518bc1e454589ca30948f4ddebe517ca07c18fff2c1e9beeb04b84c820c",
    "checksumAlgorithm" : "SHA256",
    "contentType" : "text/javascript",
    "data" : "System.register(["@angular/core","@shared/public-api","@ngrx/store","@angular/forms","@angular/common","@angular/material/input","@angular/material/form-field","@angular/material/slide-toggle","@angular/flex-layout/flex","@ngx-translate/core","@angular/material/button","@angular/material/icon","@angular/material/select","@angular/material/core","@angular/material/tooltip","@angular/material/expansion","rxjs","@shared/components/hint-tooltip-icon.component","@shared/components/help-popup.component","@shared/pipe/safe.pipe","@core/public-api","@shared/components/js-func.component","@shared/components/script-lang.component","@angular/cdk/keycodes","@angular/material/checkbox","@angular/material/chips","@shared/components/entity/entity-type-select.component","@shared/components/relation/relation-type-autocomplete.component","rxjs/operators","@shared/components/entity/entity-select.component","@shared/components/group/owner-autocomplete.component","@shared/components/group/entity-group-select.component","@shared/components/toggle-header.component","@shared/components/toggle-select.component","@angular/cdk/coercion","@shared/components/tb-error.component","@angular/flex-layout/extended","@angular/material/list","@angular/cdk/drag-drop","@angular/material/autocomplete","@shared/pipe/highlight.pipe","@home/components/scheduler/config/report-config.component","@shared/components/entity/entity-autocomplete.component","@home/components/public-api","tslib","@shared/components/entity/entity-subtype-list.component","@home/components/relation/relation-filters.component","@shared/components/file-input.component","@shared/components/button/toggle-password.component","@shared/components/string-items-list.component","@shared/components/entity/entity-list.component","@shared/components/notification/template-autocomplete.component","@shared/components/tb-checkbox.component","@angular/material/radio","@shared/components/slack-conversation-autocomplete.component","@shared/components/entity/entity-type-list.component","@angular/cdk/platform","@shared/components/time/timezone-select.component","@angular/material/dialog","@angular/router","@angular/material/progress-bar","@angular/material/toolbar","@shared/components/time/timeinterval.component"],(function(e){"use strict";var t,n,o,r,a,i,l,s,m,p,d,u,c,g,f,y,x,b,h,v,C,F,k,T,L,I,N,S,A,q,w,M,E,G,D,V,P,R,O,U,B,_,H,K,z,j,Q,$,Y,J,W,Z,X,ee,te,ne,oe,re,ae,ie,le,se,me,pe,de,ue,ce,ge,fe,ye,xe,be,he,ve,Ce,Fe,ke,Te,Le,Ie,Ne,Se,Ae,qe,we,Me,Ee,Ge,De,Ve,Pe,Re,Oe,Ue,Be,_e,He,Ke,ze,je,Qe,$e,Ye,Je,We,Ze,Xe,et,tt,nt,ot,rt,at,it,lt,st,mt,pt,dt,ut,ct,gt,ft,yt,xt,bt,ht,vt,Ct,Ft,kt,Tt,Lt,It;return{setters:[function(e){t=e,n=e.Component,o=e.InjectionToken,r=e.Injectable,a=e.Inject,i=e.Optional,l=e.EventEmitter,s=e.Directive,m=e.Input,p=e.Output,d=e.NgModule,u=e.ViewChild,c=e.forwardRef},function(e){g=e.RuleNodeConfigurationComponent,f=e.AttributeScope,y=e.telemetryTypeTranslations,x=e.ScriptLanguage,b=e.AlarmSeverity,h=e.alarmSeverityTranslations,v=e.EntitySearchDirection,C=e.EntityType,F=e.entityFields,k=e.CONTAINS_TYPE,T=e.PageComponent,L=e.messageTypeNames,I=e.MessageType,N=e.coerceBoolean,S=e.entitySearchDirectionTranslations,A=e,q=e.AlarmStatus,w=e.alarmStatusTranslations,M=e.SharedModule,E=e.AggregationType,G=e.aggregationTranslations,D=e.NotificationType,V=e.SlackChanelType,P=e.SlackChanelTypesTranslateMap,R=e.entityGroupTypes,O=e.DialogComponent,U=e.LatestTelemetry,B=e.DAY},function(e){_=e},function(e){H=e,K=e.Validators,z=e.NgControl,j=e.NG_VALUE_ACCESSOR,Q=e.NG_VALIDATORS,$=e.FormArray,Y=e.FormGroup,J=e.UntypedFormControl},function(e){W=e,Z=e.DOCUMENT,X=e.CommonModule},function(e){ee=e},function(e){te=e},function(e){ne=e},function(e){oe=e},function(e){re=e},function(e){ae=e},function(e){ie=e},function(e){le=e},function(e){se=e},function(e){me=e},function(e){pe=e},function(e){de=e.Subject,ue=e.takeUntil,ce=e.of,ge=e.EMPTY,fe=e.fromEvent},function(e){ye=e},function(e){xe=e},function(e){be=e},function(e){he=e.getCurrentAuthState,ve=e,Ce=e.isDefinedAndNotNull,Fe=e.isEqual,ke=e.deepTrim,Te=e.isObject,Le=e.isNotEmptyStr,Ie=e.deepClone},function(e){Ne=e},function(e){Se=e},function(e){Ae=e.ENTER,qe=e.COMMA,we=e.SEMICOLON},function(e){Me=e},function(e){Ee=e},function(e){Ge=e},function(e){De=e},function(e){Ve=e.takeUntil,Pe=e.tap,Re=e.map,Oe=e.startWith,Ue=e.mergeMap,Be=e.share,_e=e.auditTime},function(e){He=e},function(e){Ke=e},function(e){ze=e},function(e){je=e},function(e){Qe=e},function(e){$e=e.coerceBooleanProperty,Ye=e.coerceElement,Je=e.coerceNumberProperty},function(e){We=e},function(e){Ze=e},function(e){Xe=e},function(e){et=e},function(e){tt=e},function(e){nt=e},function(e){ot=e},function(e){rt=e},function(e){at=e.HomeComponentsModule},function(e){it=e.__decorate},function(e){lt=e},function(e){st=e},function(e){mt=e},function(e){pt=e},function(e){dt=e},function(e){ut=e},function(e){ct=e},function(e){gt=e},function(e){ft=e},function(e){yt=e},function(e){xt=e},function(e){bt=e.normalizePassiveListenerOptions,ht=e},function(e){vt=e},function(e){Ct=e.MAT_DIALOG_DATA,Ft=e},function(e){kt=e},function(e){Tt=e},function(e){Lt=e},function(e){It=e}],execute:function(){class Nt extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.emptyConfigForm}onConfigurationSet(e){this.emptyConfigForm=this.fb.group({})}}e("EmptyConfigComponent",Nt),Nt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Nt,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Nt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Nt,selector:"tb-node-empty-config",usesInheritance:!0,ngImport:t,template:"<div></div>",isInline:!0}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Nt,decorators:[{type:n,args:[{selector:"tb-node-empty-config",template:"<div></div>"}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class St extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.assignCustomerConfigForm}onConfigurationSet(e){this.assignCustomerConfigForm=this.fb.group({customerNamePattern:[e?e.customerNamePattern:null,[K.required,K.pattern(/.*\S.*/)]],createCustomerIfNotExists:[!!e&&e.createCustomerIfNotExists,[]]})}prepareOutputConfig(e){return e.customerNamePattern=e.customerNamePattern.trim(),e}}e("AssignCustomerConfigComponent",St),St.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:St,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),St.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:St,selector:"tb-action-node-assign-to-customer-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="assignCustomerConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n      <input required matInput formControlName="customerNamePattern">\n      <mat-error *ngIf="assignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\') ||\n                        assignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'pattern\')">\n        {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.customer-name-pattern-hint</mat-hint>\n    </mat-form-field>\n    <div class="tb-form-row">\n      <mat-slide-toggle class="mat-slide" formControlName="createCustomerIfNotExists">\n        {{ \'tb.rulenode.create-customer-if-not-exists\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:St,decorators:[{type:n,args:[{selector:"tb-action-node-assign-to-customer-config",template:'<section [formGroup]="assignCustomerConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n      <input required matInput formControlName="customerNamePattern">\n      <mat-error *ngIf="assignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\') ||\n                        assignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'pattern\')">\n        {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.customer-name-pattern-hint</mat-hint>\n    </mat-form-field>\n    <div class="tb-form-row">\n      <mat-slide-toggle class="mat-slide" formControlName="createCustomerIfNotExists">\n        {{ \'tb.rulenode.create-customer-if-not-exists\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});const At=new o("WindowToken","undefined"!=typeof window&&window.document?{providedIn:"root",factory:()=>window}:{providedIn:"root",factory:()=>{}});class qt{constructor(e,t,n){this.ngZone=e,this.document=t,this.window=n,this.copySubject=new de,this.copyResponse$=this.copySubject.asObservable(),this.config={}}configure(e){this.config=e}copy(e){if(!this.isSupported||!e)return this.pushCopyResponse({isSuccess:!1,content:e});const t=this.copyFromContent(e);return t?this.pushCopyResponse({content:e,isSuccess:t}):this.pushCopyResponse({isSuccess:!1,content:e})}get isSupported(){return!!this.document.queryCommandSupported&&!!this.document.queryCommandSupported("copy")&&!!this.window}isTargetValid(e){if(e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement){if(e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');return!0}throw new Error("Target should be input or textarea")}copyFromInputElement(e,t=!0){try{this.selectTarget(e);const n=this.copyText();return this.clearSelection(t?e:void 0,this.window),n&&this.isCopySuccessInIE11()}catch(e){return!1}}isCopySuccessInIE11(){const e=this.window.clipboardData;return!(e&&e.getData&&!e.getData("Text"))}copyFromContent(e,t=this.document.body){if(this.tempTextArea&&!t.contains(this.tempTextArea)&&this.destroy(this.tempTextArea.parentElement||void 0),!this.tempTextArea){this.tempTextArea=this.createTempTextArea(this.document,this.window);try{t.appendChild(this.tempTextArea)}catch(e){throw new Error("Container should be a Dom element")}}this.tempTextArea.value=e;const n=this.copyFromInputElement(this.tempTextArea,!1);return this.config.cleanUpAfterCopy&&this.destroy(this.tempTextArea.parentElement||void 0),n}destroy(e=this.document.body){this.tempTextArea&&(e.removeChild(this.tempTextArea),this.tempTextArea=void 0)}selectTarget(e){return e.select(),e.setSelectionRange(0,e.value.length),e.value.length}copyText(){return this.document.execCommand("copy")}clearSelection(e,t){e&&e.focus(),t.getSelection()?.removeAllRanges()}createTempTextArea(e,t){const n="rtl"===e.documentElement.getAttribute("dir");let o;o=e.createElement("textarea"),o.style.fontSize="12pt",o.style.border="0",o.style.padding="0",o.style.margin="0",o.style.position="absolute",o.style[n?"right":"left"]="-9999px";const r=t.pageYOffset||e.documentElement.scrollTop;return o.style.top=r+"px",o.setAttribute("readonly",""),o}pushCopyResponse(e){this.copySubject.observers.length>0&&this.ngZone.run((()=>{this.copySubject.next(e)}))}pushCopyReponse(e){this.pushCopyResponse(e)}}qt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:qt,deps:[{token:t.NgZone},{token:Z},{token:At,optional:!0}],target:t.ɵɵFactoryTarget.Injectable}),qt.ɵprov=t.ɵɵngDeclareInjectable({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:qt,providedIn:"root"}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:qt,decorators:[{type:r,args:[{providedIn:"root"}]}],ctorParameters:function(){return[{type:t.NgZone},{type:void 0,decorators:[{type:a,args:[Z]}]},{type:void 0,decorators:[{type:i},{type:a,args:[At]}]}]}});class wt{constructor(e,t,n,o){this.ngZone=e,this.host=t,this.renderer=n,this.clipboardSrv=o,this.cbOnSuccess=new l,this.cbOnError=new l,this.onClick=e=>{this.clipboardSrv.isSupported?this.targetElm&&this.clipboardSrv.isTargetValid(this.targetElm)?this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm),this.targetElm.value,e):this.cbContent&&this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent,this.container),this.cbContent,e):this.handleResult(!1,void 0,e)}}ngOnInit(){this.ngZone.runOutsideAngular((()=>{this.clickListener=this.renderer.listen(this.host.nativeElement,"click",this.onClick)}))}ngOnDestroy(){this.clickListener&&this.clickListener(),this.clipboardSrv.destroy(this.container)}handleResult(e,t,n){let o={isSuccess:e,content:t,successMessage:this.cbSuccessMsg,event:n};e?this.cbOnSuccess.observed&&this.ngZone.run((()=>{this.cbOnSuccess.emit(o)})):this.cbOnError.observed&&this.ngZone.run((()=>{this.cbOnError.emit(o)})),this.clipboardSrv.pushCopyResponse(o)}}wt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:wt,deps:[{token:t.NgZone},{token:t.ElementRef},{token:t.Renderer2},{token:qt}],target:t.ɵɵFactoryTarget.Directive}),wt.ɵdir=t.ɵɵngDeclareDirective({minVersion:"12.0.0",version:"13.0.1",type:wt,selector:"[ngxClipboard]",inputs:{targetElm:["ngxClipboard","targetElm"],container:"container",cbContent:"cbContent",cbSuccessMsg:"cbSuccessMsg"},outputs:{cbOnSuccess:"cbOnSuccess",cbOnError:"cbOnError"},ngImport:t}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:wt,decorators:[{type:s,args:[{selector:"[ngxClipboard]"}]}],ctorParameters:function(){return[{type:t.NgZone},{type:t.ElementRef},{type:t.Renderer2},{type:qt}]},propDecorators:{targetElm:[{type:m,args:["ngxClipboard"]}],container:[{type:m}],cbContent:[{type:m}],cbSuccessMsg:[{type:m}],cbOnSuccess:[{type:p}],cbOnError:[{type:p}]}});class Mt{constructor(e,t,n){this._clipboardService=e,this._viewContainerRef=t,this._templateRef=n}ngOnInit(){this._clipboardService.isSupported&&this._viewContainerRef.createEmbeddedView(this._templateRef)}}Mt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Mt,deps:[{token:qt},{token:t.ViewContainerRef},{token:t.TemplateRef}],target:t.ɵɵFactoryTarget.Directive}),Mt.ɵdir=t.ɵɵngDeclareDirective({minVersion:"12.0.0",version:"13.0.1",type:Mt,selector:"[ngxClipboardIfSupported]",ngImport:t}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Mt,decorators:[{type:s,args:[{selector:"[ngxClipboardIfSupported]"}]}],ctorParameters:function(){return[{type:qt},{type:t.ViewContainerRef},{type:t.TemplateRef}]}});class Et{}Et.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Et,deps:[],target:t.ɵɵFactoryTarget.NgModule}),Et.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Et,declarations:[wt,Mt],imports:[X],exports:[wt,Mt]}),Et.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Et,imports:[[X]]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"13.0.1",ngImport:t,type:Et,decorators:[{type:d,args:[{imports:[X],declarations:[wt,Mt],exports:[wt,Mt]}]}]});class Gt{constructor(){this.textAlign="left"}}e("ExampleHintComponent",Gt),Gt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Gt,deps:[],target:t.ɵɵFactoryTarget.Component}),Gt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Gt,selector:"tb-example-hint",inputs:{hintText:"hintText",popupHelpLink:"popupHelpLink",textAlign:"textAlign"},ngImport:t,template:'<div [hidden]="!hintText" class="tb-form-hint tb-primary-fill space-between">\n  <div [innerHTML]=" hintText | translate | safe: \'html\'"\n       [style.text-align]="textAlign"\n       class="hint-text"></div>\n  <div *ngIf="popupHelpLink" class="see-example" tb-help-popup="{{ popupHelpLink }}"\n       hintMode\n       tb-help-popup-placement="right"\n       trigger-style="letter-spacing:0.25px; font-size:12px"\n       [tb-help-popup-style]="{maxWidth: \'820px\'}"\n       trigger-text="{{ \'tb.key-val.see-examples\' | translate }}">\n  </div>\n</div>\n',styles:[":host .space-between{display:flex;justify-content:space-between;gap:20px}:host .space-between .see-example{display:flex;flex-shrink:0}:host .hint-text{width:100%}\n"],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:xe.HelpPopupComponent,selector:"[tb-help-popup], [tb-help-popup-content]",inputs:["tb-help-popup","tb-help-popup-content","trigger-text","trigger-style","tb-help-popup-placement","tb-help-popup-style","hintMode"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Gt,decorators:[{type:n,args:[{selector:"tb-example-hint",template:'<div [hidden]="!hintText" class="tb-form-hint tb-primary-fill space-between">\n  <div [innerHTML]=" hintText | translate | safe: \'html\'"\n       [style.text-align]="textAlign"\n       class="hint-text"></div>\n  <div *ngIf="popupHelpLink" class="see-example" tb-help-popup="{{ popupHelpLink }}"\n       hintMode\n       tb-help-popup-placement="right"\n       trigger-style="letter-spacing:0.25px; font-size:12px"\n       [tb-help-popup-style]="{maxWidth: \'820px\'}"\n       trigger-text="{{ \'tb.key-val.see-examples\' | translate }}">\n  </div>\n</div>\n',styles:[":host .space-between{display:flex;justify-content:space-between;gap:20px}:host .space-between .see-example{display:flex;flex-shrink:0}:host .hint-text{width:100%}\n"]}]}],propDecorators:{hintText:[{type:m}],popupHelpLink:[{type:m}],textAlign:[{type:m}]}});class Dt extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.attributeScopeMap=f,this.attributeScopes=Object.keys(f),this.telemetryTypeTranslationsMap=y}configForm(){return this.attributesConfigForm}onConfigurationSet(e){this.attributesConfigForm=this.fb.group({scope:[e?e.scope:null,[K.required]],notifyDevice:[!e||e.notifyDevice,[]],sendAttributesUpdatedNotification:[!!e&&e.sendAttributesUpdatedNotification,[]],updateAttributesOnlyOnValueChange:[!!e&&e.updateAttributesOnlyOnValueChange,[]]}),this.attributesConfigForm.get("scope").valueChanges.subscribe((e=>{e!==f.SHARED_SCOPE&&this.attributesConfigForm.get("notifyDevice").patchValue(!1,{emitEvent:!1}),e===f.CLIENT_SCOPE&&this.attributesConfigForm.get("sendAttributesUpdatedNotification").patchValue(!1,{emitEvent:!1}),this.attributesConfigForm.get("updateAttributesOnlyOnValueChange").patchValue(!1,{emitEvent:!1})}))}}e("AttributesConfigComponent",Dt),Dt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Dt,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Dt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Dt,selector:"tb-action-node-attributes-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="attributesConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="attributesConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="attributesConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <section class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div tb-hint-tooltip-icon="{{ (attributesConfigForm.get(\'updateAttributesOnlyOnValueChange\').value\n                                     ? \'tb.rulenode.update-attributes-only-on-value-change-hint-enabled\'\n                                     : \'tb.rulenode.update-attributes-only-on-value-change-hint\') | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="updateAttributesOnlyOnValueChange">\n          {{ \'tb.rulenode.update-attributes-only-on-value-change\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.send-attributes-updated-notification-hint\' | translate }}"\n           *ngIf="attributesConfigForm.get(\'scope\').value !== attributeScopeMap.CLIENT_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="sendAttributesUpdatedNotification">\n          {{ \'tb.rulenode.send-attributes-updated-notification\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.notify-device-on-update-hint\' | translate }}"\n           *ngIf="attributesConfigForm.get(\'scope\').value === attributeScopeMap.SHARED_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="notifyDevice">\n          {{ \'tb.rulenode.notify-device\' | translate }}\n        </mat-slide-toggle>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:wt,selector:"[ngxClipboard]",inputs:["ngxClipboard","container","cbContent","cbSuccessMsg"],outputs:["cbOnSuccess","cbOnError"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Dt,decorators:[{type:n,args:[{selector:"tb-action-node-attributes-config",template:'<section [formGroup]="attributesConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="attributesConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="attributesConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <section class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div tb-hint-tooltip-icon="{{ (attributesConfigForm.get(\'updateAttributesOnlyOnValueChange\').value\n                                     ? \'tb.rulenode.update-attributes-only-on-value-change-hint-enabled\'\n                                     : \'tb.rulenode.update-attributes-only-on-value-change-hint\') | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="updateAttributesOnlyOnValueChange">\n          {{ \'tb.rulenode.update-attributes-only-on-value-change\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.send-attributes-updated-notification-hint\' | translate }}"\n           *ngIf="attributesConfigForm.get(\'scope\').value !== attributeScopeMap.CLIENT_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="sendAttributesUpdatedNotification">\n          {{ \'tb.rulenode.send-attributes-updated-notification\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.notify-device-on-update-hint\' | translate }}"\n           *ngIf="attributesConfigForm.get(\'scope\').value === attributeScopeMap.SHARED_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="notifyDevice">\n          {{ \'tb.rulenode.notify-device\' | translate }}\n        </mat-slide-toggle>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Vt extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-details-function"}configForm(){return this.clearAlarmConfigForm}onConfigurationSet(e){this.clearAlarmConfigForm=this.fb.group({scriptLang:[e?e.scriptLang:x.JS,[K.required]],alarmDetailsBuildJs:[e?e.alarmDetailsBuildJs:null,[]],alarmDetailsBuildTbel:[e?e.alarmDetailsBuildTbel:null,[]],alarmType:[e?e.alarmType:null,[K.required]]})}validatorTriggers(){return["scriptLang"]}updateValidators(e){let t=this.clearAlarmConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.clearAlarmConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.clearAlarmConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.clearAlarmConfigForm.get("alarmDetailsBuildJs").setValidators(t===x.JS?[K.required]:[]),this.clearAlarmConfigForm.get("alarmDetailsBuildJs").updateValueAndValidity({emitEvent:e}),this.clearAlarmConfigForm.get("alarmDetailsBuildTbel").setValidators(t===x.TBEL?[K.required]:[]),this.clearAlarmConfigForm.get("alarmDetailsBuildTbel").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),e}testScript(e){const t=this.clearAlarmConfigForm.get("scriptLang").value,n=t===x.JS?"alarmDetailsBuildJs":"alarmDetailsBuildTbel",o=t===x.JS?"rulenode/clear_alarm_node_script_fn":"rulenode/tbel/clear_alarm_node_script_fn",r=this.clearAlarmConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"json",this.translate.instant("tb.rulenode.details"),"Details",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.clearAlarmConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.clearAlarmConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("ClearAlarmConfigComponent",Vt),Vt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vt,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Vt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Vt,selector:"tb-action-node-clear-alarm-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="clearAlarmConfigForm" fxLayout="column">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="clearAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="alarmDetailsBuildJs"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/clear_alarm_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="clearAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="alarmDetailsBuildTbel"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/clear_alarm_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.alarm-type</mat-label>\n    <input required matInput formControlName="alarmType">\n    <mat-error *ngIf="clearAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n      {{ \'tb.rulenode.alarm-type-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vt,decorators:[{type:n,args:[{selector:"tb-action-node-clear-alarm-config",template:'<section [formGroup]="clearAlarmConfigForm" fxLayout="column">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="clearAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="alarmDetailsBuildJs"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/clear_alarm_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="clearAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="alarmDetailsBuildTbel"\n              functionName="Details"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/clear_alarm_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.alarm-type</mat-label>\n    <input required matInput formControlName="alarmType">\n    <mat-error *ngIf="clearAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n      {{ \'tb.rulenode.alarm-type-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class Pt extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.alarmSeverities=Object.keys(b),this.alarmSeverityTranslationMap=h,this.separatorKeysCodes=[Ae,qe,we],this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-details-function"}configForm(){return this.createAlarmConfigForm}onConfigurationSet(e){this.createAlarmConfigForm=this.fb.group({scriptLang:[e?e.scriptLang:x.JS,[K.required]],alarmDetailsBuildJs:[e?e.alarmDetailsBuildJs:null,[]],alarmDetailsBuildTbel:[e?e.alarmDetailsBuildTbel:null,[]],useMessageAlarmData:[!!e&&e.useMessageAlarmData,[]],overwriteAlarmDetails:[!!e&&e.overwriteAlarmDetails,[]],alarmType:[e?e.alarmType:null,[]],severity:[e?e.severity:null,[]],propagate:[!!e&&e.propagate,[]],relationTypes:[e?e.relationTypes:null,[]],propagateToOwner:[!!e&&e.propagateToOwner,[]],propagateToOwnerHierarchy:[!!e&&e.propagateToOwnerHierarchy,[]],propagateToTenant:[!!e&&e.propagateToTenant,[]],dynamicSeverity:!1}),this.createAlarmConfigForm.get("dynamicSeverity").valueChanges.subscribe((e=>{e?this.createAlarmConfigForm.get("severity").patchValue("",{emitEvent:!1}):this.createAlarmConfigForm.get("severity").patchValue(this.alarmSeverities[0],{emitEvent:!1})}))}validatorTriggers(){return["useMessageAlarmData","overwriteAlarmDetails","scriptLang"]}updateValidators(e){const t=this.createAlarmConfigForm.get("useMessageAlarmData").value,n=this.createAlarmConfigForm.get("overwriteAlarmDetails").value;t?(this.createAlarmConfigForm.get("alarmType").setValidators([]),this.createAlarmConfigForm.get("severity").setValidators([])):(this.createAlarmConfigForm.get("alarmType").setValidators([K.required]),this.createAlarmConfigForm.get("severity").setValidators([K.required])),this.createAlarmConfigForm.get("alarmType").updateValueAndValidity({emitEvent:e}),this.createAlarmConfigForm.get("severity").updateValueAndValidity({emitEvent:e});let o=this.createAlarmConfigForm.get("scriptLang").value;o!==x.TBEL||this.tbelEnabled||(o=x.JS,this.createAlarmConfigForm.get("scriptLang").patchValue(o,{emitEvent:!1}),setTimeout((()=>{this.createAlarmConfigForm.updateValueAndValidity({emitEvent:!0})})));const r=!1===t||!0===n;this.createAlarmConfigForm.get("alarmDetailsBuildJs").setValidators(r&&o===x.JS?[K.required]:[]),this.createAlarmConfigForm.get("alarmDetailsBuildTbel").setValidators(r&&o===x.TBEL?[K.required]:[]),this.createAlarmConfigForm.get("alarmDetailsBuildJs").updateValueAndValidity({emitEvent:e}),this.createAlarmConfigForm.get("alarmDetailsBuildTbel").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),e}testScript(e){const t=this.createAlarmConfigForm.get("scriptLang").value,n=t===x.JS?"alarmDetailsBuildJs":"alarmDetailsBuildTbel",o=t===x.JS?"rulenode/create_alarm_node_script_fn":"rulenode/tbel/create_alarm_node_script_fn",r=this.createAlarmConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"json",this.translate.instant("tb.rulenode.details"),"Details",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.createAlarmConfigForm.get(n).setValue(e),this.changeScript.emit())}))}removeKey(e,t){const n=this.createAlarmConfigForm.get(t).value,o=n.indexOf(e);o>=0&&(n.splice(o,1),this.createAlarmConfigForm.get(t).setValue(n,{emitEvent:!0}))}addKey(e,t){const n=e.input;let o=e.value;if((o||"").trim()){o=o.trim();let e=this.createAlarmConfigForm.get(t).value;e&&-1!==e.indexOf(o)||(e||(e=[]),e.push(o),this.createAlarmConfigForm.get(t).setValue(e,{emitEvent:!0}))}n&&(n.value="")}onValidate(){const e=this.createAlarmConfigForm.get("useMessageAlarmData").value,t=this.createAlarmConfigForm.get("overwriteAlarmDetails").value;if(!e||t){this.createAlarmConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}}e("CreateAlarmConfigComponent",Pt),Pt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Pt,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Pt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Pt,selector:"tb-action-node-create-alarm-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="createAlarmConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useMessageAlarmData">\n    {{ \'tb.rulenode.use-message-alarm-data\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="overwriteAlarmDetails" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === true">\n    {{ \'tb.rulenode.overwrite-alarm-details\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === false ||\n                                    createAlarmConfigForm.get(\'overwriteAlarmDetails\').value === true">\n    <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n    <tb-js-func *ngIf="createAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n                #jsFuncComponent\n                formControlName="alarmDetailsBuildJs"\n                functionName="Details"\n                [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n                helpId="rulenode/create_alarm_node_script_fn"\n                noValidate="true">\n      <button toolbarSuffixButton\n              mat-icon-button\n              matTooltip="{{ testScriptLabel | translate }}"\n              matTooltipPosition="above"\n              class="tb-mat-32"\n              (click)="testScript()">\n        <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n      </button>\n    </tb-js-func>\n    <tb-js-func *ngIf="createAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n                #tbelFuncComponent\n                formControlName="alarmDetailsBuildTbel"\n                functionName="Details"\n                [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n                [disableUndefinedCheck]="true"\n                [scriptLanguage]="scriptLanguage.TBEL"\n                helpId="rulenode/tbel/create_alarm_node_script_fn"\n                noValidate="true">\n      <button toolbarSuffixButton\n              mat-icon-button\n              matTooltip="{{ testScriptLabel | translate }}"\n              matTooltipPosition="above"\n              class="tb-mat-32"\n              (click)="testScript()">\n        <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n      </button>\n    </tb-js-func>\n    <div fxLayout="row" style="padding-bottom: 16px;">\n      <button mat-button mat-raised-button color="primary" (click)="testScript()">\n        {{ testScriptLabel | translate }}\n      </button>\n    </div>\n  </section>\n  <section fxLayout="column" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === false">\n    <mat-form-field fxFlex subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.alarm-type</mat-label>\n      <input required matInput formControlName="alarmType">\n      <mat-error *ngIf="createAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-type-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n    <mat-checkbox formControlName="dynamicSeverity">\n      {{ \'tb.rulenode.use-alarm-severity-pattern\' | translate }}\n    </mat-checkbox>\n    <mat-form-field fxFlex *ngIf="!createAlarmConfigForm.get(\'dynamicSeverity\').value">\n      <mat-label translate>tb.rulenode.alarm-severity</mat-label>\n      <mat-select formControlName="severity" required>\n        <mat-option *ngFor="let severity of alarmSeverities" [value]="severity">\n          {{ alarmSeverityTranslationMap.get(severity) | translate }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf="createAlarmConfigForm.get(\'severity\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-severity-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex *ngIf="createAlarmConfigForm.get(\'dynamicSeverity\').value" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.alarm-severity-pattern</mat-label>\n      <input matInput formControlName="severity" required>\n      <mat-error *ngIf="createAlarmConfigForm.get(\'severity\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-severity-required\' | translate }}\n      </mat-error>\n      <mat-hint [innerHTML]="\'tb.rulenode.alarm-severity-pattern-hint\' | translate | safe: \'html\'"></mat-hint>\n    </mat-form-field>\n    <mat-checkbox formControlName="propagate">\n      {{ \'tb.rulenode.propagate\' | translate }}\n    </mat-checkbox>\n    <section *ngIf="createAlarmConfigForm.get(\'propagate\').value === true">\n      <mat-form-field floatLabel="always" class="mat-block" subscriptSizing="dynamic">\n        <mat-label translate>tb.rulenode.relation-types-list</mat-label>\n        <mat-chip-grid #relationTypesChipList>\n          <mat-chip-row\n            *ngFor="let key of createAlarmConfigForm.get(\'relationTypes\').value;"\n            (removed)="removeKey(key, \'relationTypes\')">\n            {{key}}\n            <mat-icon matChipRemove>close</mat-icon>\n          </mat-chip-row>\n          <input matInput type="text" placeholder="{{\'tb.rulenode.relation-types-list\' | translate}}"\n                 [matChipInputFor]="relationTypesChipList"\n                 [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                 (matChipInputTokenEnd)="addKey($event, \'relationTypes\')"\n                 [matChipInputAddOnBlur]="true">\n        </mat-chip-grid>\n        <mat-hint translate>tb.rulenode.relation-types-list-hint</mat-hint>\n      </mat-form-field>\n    </section>\n    <mat-checkbox formControlName="propagateToOwner">\n      {{ \'tb.rulenode.propagate-to-owner\' | translate }}\n    </mat-checkbox>\n    <mat-checkbox formControlName="propagateToOwnerHierarchy">\n      {{ \'tb.rulenode.propagate-to-owner-hierarchy\' | translate }}\n    </mat-checkbox>\n    <mat-checkbox formControlName="propagateToTenant">\n      {{ \'tb.rulenode.propagate-to-tenant\' | translate }}\n    </mat-checkbox>\n  </section>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:Ee.MatChipGrid,selector:"mat-chip-grid",inputs:["tabIndex","disabled","placeholder","required","value","errorStateMatcher"],outputs:["change","valueChange"]},{kind:"directive",type:Ee.MatChipInput,selector:"input[matChipInputFor]",inputs:["matChipInputFor","matChipInputAddOnBlur","matChipInputSeparatorKeyCodes","placeholder","id","disabled"],outputs:["matChipInputTokenEnd"],exportAs:["matChipInput","matChipInputFor"]},{kind:"directive",type:Ee.MatChipRemove,selector:"[matChipRemove]"},{kind:"component",type:Ee.MatChipRow,selector:"mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]",inputs:["color","disabled","disableRipple","tabIndex","editable"],outputs:["edited"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Pt,decorators:[{type:n,args:[{selector:"tb-action-node-create-alarm-config",template:'<section [formGroup]="createAlarmConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useMessageAlarmData">\n    {{ \'tb.rulenode.use-message-alarm-data\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="overwriteAlarmDetails" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === true">\n    {{ \'tb.rulenode.overwrite-alarm-details\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === false ||\n                                    createAlarmConfigForm.get(\'overwriteAlarmDetails\').value === true">\n    <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n    <tb-js-func *ngIf="createAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n                #jsFuncComponent\n                formControlName="alarmDetailsBuildJs"\n                functionName="Details"\n                [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n                helpId="rulenode/create_alarm_node_script_fn"\n                noValidate="true">\n      <button toolbarSuffixButton\n              mat-icon-button\n              matTooltip="{{ testScriptLabel | translate }}"\n              matTooltipPosition="above"\n              class="tb-mat-32"\n              (click)="testScript()">\n        <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n      </button>\n    </tb-js-func>\n    <tb-js-func *ngIf="createAlarmConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n                #tbelFuncComponent\n                formControlName="alarmDetailsBuildTbel"\n                functionName="Details"\n                [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n                [disableUndefinedCheck]="true"\n                [scriptLanguage]="scriptLanguage.TBEL"\n                helpId="rulenode/tbel/create_alarm_node_script_fn"\n                noValidate="true">\n      <button toolbarSuffixButton\n              mat-icon-button\n              matTooltip="{{ testScriptLabel | translate }}"\n              matTooltipPosition="above"\n              class="tb-mat-32"\n              (click)="testScript()">\n        <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n      </button>\n    </tb-js-func>\n    <div fxLayout="row" style="padding-bottom: 16px;">\n      <button mat-button mat-raised-button color="primary" (click)="testScript()">\n        {{ testScriptLabel | translate }}\n      </button>\n    </div>\n  </section>\n  <section fxLayout="column" *ngIf="createAlarmConfigForm.get(\'useMessageAlarmData\').value === false">\n    <mat-form-field fxFlex subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.alarm-type</mat-label>\n      <input required matInput formControlName="alarmType">\n      <mat-error *ngIf="createAlarmConfigForm.get(\'alarmType\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-type-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n    <mat-checkbox formControlName="dynamicSeverity">\n      {{ \'tb.rulenode.use-alarm-severity-pattern\' | translate }}\n    </mat-checkbox>\n    <mat-form-field fxFlex *ngIf="!createAlarmConfigForm.get(\'dynamicSeverity\').value">\n      <mat-label translate>tb.rulenode.alarm-severity</mat-label>\n      <mat-select formControlName="severity" required>\n        <mat-option *ngFor="let severity of alarmSeverities" [value]="severity">\n          {{ alarmSeverityTranslationMap.get(severity) | translate }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf="createAlarmConfigForm.get(\'severity\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-severity-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex *ngIf="createAlarmConfigForm.get(\'dynamicSeverity\').value" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.alarm-severity-pattern</mat-label>\n      <input matInput formControlName="severity" required>\n      <mat-error *ngIf="createAlarmConfigForm.get(\'severity\').hasError(\'required\')">\n        {{ \'tb.rulenode.alarm-severity-required\' | translate }}\n      </mat-error>\n      <mat-hint [innerHTML]="\'tb.rulenode.alarm-severity-pattern-hint\' | translate | safe: \'html\'"></mat-hint>\n    </mat-form-field>\n    <mat-checkbox formControlName="propagate">\n      {{ \'tb.rulenode.propagate\' | translate }}\n    </mat-checkbox>\n    <section *ngIf="createAlarmConfigForm.get(\'propagate\').value === true">\n      <mat-form-field floatLabel="always" class="mat-block" subscriptSizing="dynamic">\n        <mat-label translate>tb.rulenode.relation-types-list</mat-label>\n        <mat-chip-grid #relationTypesChipList>\n          <mat-chip-row\n            *ngFor="let key of createAlarmConfigForm.get(\'relationTypes\').value;"\n            (removed)="removeKey(key, \'relationTypes\')">\n            {{key}}\n            <mat-icon matChipRemove>close</mat-icon>\n          </mat-chip-row>\n          <input matInput type="text" placeholder="{{\'tb.rulenode.relation-types-list\' | translate}}"\n                 [matChipInputFor]="relationTypesChipList"\n                 [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                 (matChipInputTokenEnd)="addKey($event, \'relationTypes\')"\n                 [matChipInputAddOnBlur]="true">\n        </mat-chip-grid>\n        <mat-hint translate>tb.rulenode.relation-types-list-hint</mat-hint>\n      </mat-form-field>\n    </section>\n    <mat-checkbox formControlName="propagateToOwner">\n      {{ \'tb.rulenode.propagate-to-owner\' | translate }}\n    </mat-checkbox>\n    <mat-checkbox formControlName="propagateToOwnerHierarchy">\n      {{ \'tb.rulenode.propagate-to-owner-hierarchy\' | translate }}\n    </mat-checkbox>\n    <mat-checkbox formControlName="propagateToTenant">\n      {{ \'tb.rulenode.propagate-to-tenant\' | translate }}\n    </mat-checkbox>\n  </section>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class Rt extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.keys(v),this.directionTypeTranslations=new Map([[v.FROM,"tb.rulenode.search-direction-from"],[v.TO,"tb.rulenode.search-direction-to"]]),this.entityType=C,this.entityTypeNamePatternTranslation=new Map([[C.DEVICE,"tb.rulenode.device-name-pattern"],[C.ASSET,"tb.rulenode.asset-name-pattern"],[C.ENTITY_VIEW,"tb.rulenode.entity-view-name-pattern"],[C.CUSTOMER,"tb.rulenode.customer-title-pattern"],[C.USER,"tb.rulenode.user-name-pattern"],[C.DASHBOARD,"tb.rulenode.dashboard-name-pattern"],[C.EDGE,"tb.rulenode.edge-name-pattern"]]),this.allowedEntityTypes=[C.DEVICE,C.ASSET,C.ENTITY_VIEW,C.TENANT,C.CUSTOMER,C.USER,C.DASHBOARD,C.EDGE]}configForm(){return this.createRelationConfigForm}onConfigurationSet(e){this.createRelationConfigForm=this.fb.group({direction:[e?e.direction:null,[K.required]],entityType:[e?e.entityType:null,[K.required]],entityNamePattern:[e?e.entityNamePattern:null,[]],entityTypePattern:[e?e.entityTypePattern:null,[]],relationType:[e?e.relationType:null,[K.required]],createEntityIfNotExists:[!!e&&e.createEntityIfNotExists,[]],removeCurrentRelations:[!!e&&e.removeCurrentRelations,[]],changeOriginatorToRelatedEntity:[!!e&&e.changeOriginatorToRelatedEntity,[]]})}validatorTriggers(){return["entityType","createEntityIfNotExists"]}updateValidators(e){const t=this.createRelationConfigForm.get("entityType").value;if(t?this.createRelationConfigForm.get("entityNamePattern").setValidators([K.required,K.pattern(/.*\S.*/)]):this.createRelationConfigForm.get("entityNamePattern").setValidators([]),!t||t!==C.DEVICE&&t!==C.ASSET)this.createRelationConfigForm.get("entityTypePattern").setValidators([]);else{const e=[K.pattern(/.*\S.*/)];this.createRelationConfigForm.get("createEntityIfNotExists").value&&e.push(K.required),this.createRelationConfigForm.get("entityTypePattern").setValidators(e)}this.createRelationConfigForm.get("entityNamePattern").updateValueAndValidity({emitEvent:e}),this.createRelationConfigForm.get("entityTypePattern").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.entityNamePattern=e.entityNamePattern?e.entityNamePattern.trim():null,e.entityTypePattern=e.entityTypePattern?e.entityTypePattern.trim():null,e}}e("CreateRelationConfigComponent",Rt),Rt.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Rt,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Rt.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Rt,selector:"tb-action-node-create-relation-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="createRelationConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.relation-parameters</div>\n    <div fxLayout="column">\n      <mat-form-field class="mat-block" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required matInput formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-relation-type-autocomplete\n        required\n        formControlName="relationType">\n      </tb-relation-type-autocomplete>\n    </div>\n  </div>\n\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.target-entity</div>\n    <div fxLayout="row" fxLayoutGap="16px">\n      <tb-entity-type-select\n        fxFlex\n        showLabel\n        required\n        [allowedEntityTypes]="allowedEntityTypes"\n        formControlName="entityType">\n      </tb-entity-type-select>\n\n      <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value &&\n                      createRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                      fxFlex class="mat-block">\n        <mat-label>{{ entityTypeNamePatternTranslation.get(createRelationConfigForm.get(\'entityType\').value) | translate }}</mat-label>\n        <input required matInput formControlName="entityNamePattern">\n      </mat-form-field>\n\n      <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                           createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"\n                      fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.profile-name</mat-label>\n        <input matInput formControlName="entityTypePattern">\n      </mat-form-field>\n    </div>\n\n    <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n                     *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.CUSTOMER ||\n                     createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                     createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"></tb-example-hint>\n\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.create-entity-if-not-exists-hint\' | translate }}"\n         *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.CUSTOMER ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"\n         style="margin-bottom: 18px"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="createEntityIfNotExists">\n        {{ \'tb.rulenode.create-entity-if-not-exists\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n  <section class="tb-form-panel stroked no-padding">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header style="padding: 16px">\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-form-panel no-border no-padding-top">\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.remove-current-relations-hint\' | translate }}"\n             class="tb-form-row no-border no-padding">\n          <mat-slide-toggle class="mat-slide" formControlName="removeCurrentRelations">\n            {{ \'tb.rulenode.remove-current-relations\' | translate }}\n          </mat-slide-toggle>\n        </div>\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.change-originator-to-related-entity-hint\' | translate }}"\n             class="tb-form-row no-border no-padding">\n          <mat-slide-toggle class="mat-slide" formControlName="changeOriginatorToRelatedEntity">\n            {{ \'tb.rulenode.change-originator-to-related-entity\' | translate }}\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ge.EntityTypeSelectComponent,selector:"tb-entity-type-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","filterAllowedEntityTypes","overrideEntityTypeTranslations","showLabel","required","disabled"]},{kind:"component",type:De.RelationTypeAutocompleteComponent,selector:"tb-relation-type-autocomplete",inputs:["showLabel","additionalClasses","appearance","required","disabled","subscriptSizing"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Rt,decorators:[{type:n,args:[{selector:"tb-action-node-create-relation-config",template:'<section [formGroup]="createRelationConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.relation-parameters</div>\n    <div fxLayout="column">\n      <mat-form-field class="mat-block" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required matInput formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-relation-type-autocomplete\n        required\n        formControlName="relationType">\n      </tb-relation-type-autocomplete>\n    </div>\n  </div>\n\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.target-entity</div>\n    <div fxLayout="row" fxLayoutGap="16px">\n      <tb-entity-type-select\n        fxFlex\n        showLabel\n        required\n        [allowedEntityTypes]="allowedEntityTypes"\n        formControlName="entityType">\n      </tb-entity-type-select>\n\n      <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value &&\n                      createRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                      fxFlex class="mat-block">\n        <mat-label>{{ entityTypeNamePatternTranslation.get(createRelationConfigForm.get(\'entityType\').value) | translate }}</mat-label>\n        <input required matInput formControlName="entityNamePattern">\n      </mat-form-field>\n\n      <mat-form-field *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                           createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"\n                      fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.profile-name</mat-label>\n        <input matInput formControlName="entityTypePattern">\n      </mat-form-field>\n    </div>\n\n    <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n                     *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.CUSTOMER ||\n                     createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                     createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"></tb-example-hint>\n\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.create-entity-if-not-exists-hint\' | translate }}"\n         *ngIf="createRelationConfigForm.get(\'entityType\').value === entityType.CUSTOMER ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.DEVICE ||\n                  createRelationConfigForm.get(\'entityType\').value === entityType.ASSET"\n         style="margin-bottom: 18px"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="createEntityIfNotExists">\n        {{ \'tb.rulenode.create-entity-if-not-exists\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n  <section class="tb-form-panel stroked no-padding">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header style="padding: 16px">\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-form-panel no-border no-padding-top">\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.remove-current-relations-hint\' | translate }}"\n             class="tb-form-row no-border no-padding">\n          <mat-slide-toggle class="mat-slide" formControlName="removeCurrentRelations">\n            {{ \'tb.rulenode.remove-current-relations\' | translate }}\n          </mat-slide-toggle>\n        </div>\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.change-originator-to-related-entity-hint\' | translate }}"\n             class="tb-form-row no-border no-padding">\n          <mat-slide-toggle class="mat-slide" formControlName="changeOriginatorToRelatedEntity">\n            {{ \'tb.rulenode.change-originator-to-related-entity\' | translate }}\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Ot extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.keys(v),this.directionTypeTranslations=new Map([[v.FROM,"tb.rulenode.del-relation-direction-from"],[v.TO,"tb.rulenode.del-relation-direction-to"]]),this.entityTypeNamePatternTranslation=new Map([[C.DEVICE,"tb.rulenode.device-name-pattern"],[C.ASSET,"tb.rulenode.asset-name-pattern"],[C.ENTITY_VIEW,"tb.rulenode.entity-view-name-pattern"],[C.CUSTOMER,"tb.rulenode.customer-title-pattern"],[C.USER,"tb.rulenode.user-name-pattern"],[C.DASHBOARD,"tb.rulenode.dashboard-name-pattern"],[C.EDGE,"tb.rulenode.edge-name-pattern"]]),this.entityType=C,this.allowedEntityTypes=[C.DEVICE,C.ASSET,C.ENTITY_VIEW,C.TENANT,C.CUSTOMER,C.USER,C.DASHBOARD,C.EDGE]}configForm(){return this.deleteRelationConfigForm}onConfigurationSet(e){this.deleteRelationConfigForm=this.fb.group({deleteForSingleEntity:[!!e&&e.deleteForSingleEntity,[]],direction:[e?e.direction:null,[K.required]],entityType:[e?e.entityType:null,[]],entityNamePattern:[e?e.entityNamePattern:null,[]],relationType:[e?e.relationType:null,[K.required]]})}validatorTriggers(){return["deleteForSingleEntity","entityType"]}updateValidators(e){const t=this.deleteRelationConfigForm.get("deleteForSingleEntity").value,n=this.deleteRelationConfigForm.get("entityType").value;t?this.deleteRelationConfigForm.get("entityType").setValidators([K.required]):this.deleteRelationConfigForm.get("entityType").setValidators([]),t&&n&&n!==C.TENANT?this.deleteRelationConfigForm.get("entityNamePattern").setValidators([K.required,K.pattern(/.*\S.*/)]):this.deleteRelationConfigForm.get("entityNamePattern").setValidators([]),this.deleteRelationConfigForm.get("entityType").updateValueAndValidity({emitEvent:!1}),this.deleteRelationConfigForm.get("entityNamePattern").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.entityNamePattern=e.entityNamePattern?e.entityNamePattern.trim():null,e}}e("DeleteRelationConfigComponent",Ot),Ot.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ot,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Ot.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ot,selector:"tb-action-node-delete-relation-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deleteRelationConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.relation-parameters</div>\n    <div fxLayout="column">\n      <mat-form-field class="mat-block" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required matInput formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-relation-type-autocomplete\n        required\n        formControlName="relationType">\n      </tb-relation-type-autocomplete>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.delete-relation-with-specific-entity-hint\' | translate }}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="deleteForSingleEntity">\n        {{ \'tb.rulenode.delete-relation-with-specific-entity\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div *ngIf="deleteRelationConfigForm.get(\'deleteForSingleEntity\').value">\n      <div fxLayout="row" fxLayoutGap="10px">\n        <tb-entity-type-select\n          fxFlex\n          showLabel\n          required\n          [allowedEntityTypes]="allowedEntityTypes"\n          formControlName="entityType">\n        </tb-entity-type-select>\n        <mat-form-field *ngIf="deleteRelationConfigForm.get(\'entityType\').value && deleteRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                        fxFlex class="mat-block">\n          <mat-label>{{ entityTypeNamePatternTranslation.get(deleteRelationConfigForm.get(\'entityType\').value) | translate }}</mat-label>\n          <input required matInput formControlName="entityNamePattern">\n        </mat-form-field>\n      </div>\n      <tb-example-hint *ngIf="deleteRelationConfigForm.get(\'entityType\').value && deleteRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                       [hintText]="\'tb.rulenode.kv-map-single-pattern-hint\'"></tb-example-hint>\n    </div>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ge.EntityTypeSelectComponent,selector:"tb-entity-type-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","filterAllowedEntityTypes","overrideEntityTypeTranslations","showLabel","required","disabled"]},{kind:"component",type:De.RelationTypeAutocompleteComponent,selector:"tb-relation-type-autocomplete",inputs:["showLabel","additionalClasses","appearance","required","disabled","subscriptSizing"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ot,decorators:[{type:n,args:[{selector:"tb-action-node-delete-relation-config",template:'<section [formGroup]="deleteRelationConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.relation-parameters</div>\n    <div fxLayout="column">\n      <mat-form-field class="mat-block" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required matInput formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-relation-type-autocomplete\n        required\n        formControlName="relationType">\n      </tb-relation-type-autocomplete>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.delete-relation-with-specific-entity-hint\' | translate }}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="deleteForSingleEntity">\n        {{ \'tb.rulenode.delete-relation-with-specific-entity\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div *ngIf="deleteRelationConfigForm.get(\'deleteForSingleEntity\').value">\n      <div fxLayout="row" fxLayoutGap="10px">\n        <tb-entity-type-select\n          fxFlex\n          showLabel\n          required\n          [allowedEntityTypes]="allowedEntityTypes"\n          formControlName="entityType">\n        </tb-entity-type-select>\n        <mat-form-field *ngIf="deleteRelationConfigForm.get(\'entityType\').value && deleteRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                        fxFlex class="mat-block">\n          <mat-label>{{ entityTypeNamePatternTranslation.get(deleteRelationConfigForm.get(\'entityType\').value) | translate }}</mat-label>\n          <input required matInput formControlName="entityNamePattern">\n        </mat-form-field>\n      </div>\n      <tb-example-hint *ngIf="deleteRelationConfigForm.get(\'entityType\').value && deleteRelationConfigForm.get(\'entityType\').value !== entityType.TENANT"\n                       [hintText]="\'tb.rulenode.kv-map-single-pattern-hint\'"></tb-example-hint>\n    </div>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Ut extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.deviceProfile}onConfigurationSet(e){this.deviceProfile=this.fb.group({persistAlarmRulesState:[!!e&&e.persistAlarmRulesState],fetchAlarmRulesStateOnStart:[!!e&&e.fetchAlarmRulesStateOnStart]})}validatorTriggers(){return["persistAlarmRulesState"]}updateValidators(e){this.deviceProfile.get("persistAlarmRulesState").value?this.deviceProfile.get("fetchAlarmRulesStateOnStart").enable({emitEvent:!1}):(this.deviceProfile.get("fetchAlarmRulesStateOnStart").setValue(!1,{emitEvent:!1}),this.deviceProfile.get("fetchAlarmRulesStateOnStart").disable({emitEvent:!1})),this.deviceProfile.get("fetchAlarmRulesStateOnStart").updateValueAndValidity({emitEvent:e})}}var Bt;e("DeviceProfileConfigComponent",Ut),Ut.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ut,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Ut.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ut,selector:"tb-device-profile-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deviceProfile" class="tb-form-panel stroked">\n  <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.device-profile-node-hint</div>\n  <div tb-hint-tooltip-icon="{{\'tb.rulenode.persist-alarm-rules-hint\' | translate }}"\n       class="tb-form-row no-border no-padding slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="persistAlarmRulesState">\n      {{ \'tb.rulenode.persist-alarm-rules\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div tb-hint-tooltip-icon="{{\'tb.rulenode.fetch-alarm-rules-hint\' | translate }}"\n       class="tb-form-row no-border no-padding slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="fetchAlarmRulesStateOnStart">\n      {{ \'tb.rulenode.fetch-alarm-rules\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',dependencies:[{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ut,decorators:[{type:n,args:[{selector:"tb-device-profile-config",template:'<section [formGroup]="deviceProfile" class="tb-form-panel stroked">\n  <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.device-profile-node-hint</div>\n  <div tb-hint-tooltip-icon="{{\'tb.rulenode.persist-alarm-rules-hint\' | translate }}"\n       class="tb-form-row no-border no-padding slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="persistAlarmRulesState">\n      {{ \'tb.rulenode.persist-alarm-rules\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div tb-hint-tooltip-icon="{{\'tb.rulenode.fetch-alarm-rules-hint\' | translate }}"\n       class="tb-form-row no-border no-padding slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="fetchAlarmRulesStateOnStart">\n      {{ \'tb.rulenode.fetch-alarm-rules\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}}),function(e){e.CUSTOMER="CUSTOMER",e.TENANT="TENANT",e.RELATED="RELATED",e.ALARM_ORIGINATOR="ALARM_ORIGINATOR",e.ENTITY="ENTITY"}(Bt||(Bt={}));const _t=new Map([[Bt.CUSTOMER,"tb.rulenode.originator-customer"],[Bt.TENANT,"tb.rulenode.originator-tenant"],[Bt.RELATED,"tb.rulenode.originator-related"],[Bt.ALARM_ORIGINATOR,"tb.rulenode.originator-alarm-originator"],[Bt.ENTITY,"tb.rulenode.originator-entity"]]),Ht=new Map([[Bt.CUSTOMER,"tb.rulenode.originator-customer-desc"],[Bt.TENANT,"tb.rulenode.originator-tenant-desc"],[Bt.RELATED,"tb.rulenode.originator-related-entity-desc"],[Bt.ALARM_ORIGINATOR,"tb.rulenode.originator-alarm-originator-desc"],[Bt.ENTITY,"tb.rulenode.originator-entity-by-name-pattern-desc"]]),Kt=[F.createdTime,F.name,{value:"type",name:"tb.rulenode.profile-name",keyName:"originatorProfileName"},F.firstName,F.lastName,F.email,F.title,F.country,F.state,F.city,F.address,F.address2,F.zip,F.phone,F.label,{value:"id",name:"tb.rulenode.id",keyName:"id"},{value:"additionalInfo",name:"tb.rulenode.additional-info",keyName:"additionalInfo"}],zt=new Map([["type","profileName"],["createdTime","createdTime"],["name","name"],["firstName","firstName"],["lastName","lastName"],["email","email"],["title","title"],["country","country"],["state","state"],["city","city"],["address","address"],["address2","address2"],["zip","zip"],["phone","phone"],["label","label"],["id","id"],["additionalInfo","additionalInfo"]]);var jt;!function(e){e.CIRCLE="CIRCLE",e.POLYGON="POLYGON"}(jt||(jt={}));const Qt=new Map([[jt.CIRCLE,"tb.rulenode.perimeter-circle"],[jt.POLYGON,"tb.rulenode.perimeter-polygon"]]);var $t;!function(e){e.MILLISECONDS="MILLISECONDS",e.SECONDS="SECONDS",e.MINUTES="MINUTES",e.HOURS="HOURS",e.DAYS="DAYS"}($t||($t={}));const Yt=new Map([[$t.MILLISECONDS,"tb.rulenode.time-unit-milliseconds"],[$t.SECONDS,"tb.rulenode.time-unit-seconds"],[$t.MINUTES,"tb.rulenode.time-unit-minutes"],[$t.HOURS,"tb.rulenode.time-unit-hours"],[$t.DAYS,"tb.rulenode.time-unit-days"]]);var Jt;!function(e){e.METER="METER",e.KILOMETER="KILOMETER",e.FOOT="FOOT",e.MILE="MILE",e.NAUTICAL_MILE="NAUTICAL_MILE"}(Jt||(Jt={}));const Wt=new Map([[Jt.METER,"tb.rulenode.range-unit-meter"],[Jt.KILOMETER,"tb.rulenode.range-unit-kilometer"],[Jt.FOOT,"tb.rulenode.range-unit-foot"],[Jt.MILE,"tb.rulenode.range-unit-mile"],[Jt.NAUTICAL_MILE,"tb.rulenode.range-unit-nautical-mile"]]);var Zt;!function(e){e.ID="ID",e.TITLE="TITLE",e.COUNTRY="COUNTRY",e.STATE="STATE",e.CITY="CITY",e.ZIP="ZIP",e.ADDRESS="ADDRESS",e.ADDRESS2="ADDRESS2",e.PHONE="PHONE",e.EMAIL="EMAIL",e.ADDITIONAL_INFO="ADDITIONAL_INFO"}(Zt||(Zt={}));const Xt=new Map([[Zt.ID,"tb.rulenode.entity-details-id"],[Zt.TITLE,"tb.rulenode.entity-details-title"],[Zt.COUNTRY,"tb.rulenode.entity-details-country"],[Zt.STATE,"tb.rulenode.entity-details-state"],[Zt.CITY,"tb.rulenode.entity-details-city"],[Zt.ZIP,"tb.rulenode.entity-details-zip"],[Zt.ADDRESS,"tb.rulenode.entity-details-address"],[Zt.ADDRESS2,"tb.rulenode.entity-details-address2"],[Zt.PHONE,"tb.rulenode.entity-details-phone"],[Zt.EMAIL,"tb.rulenode.entity-details-email"],[Zt.ADDITIONAL_INFO,"tb.rulenode.entity-details-additional_info"]]);var en;!function(e){e.FIRST="FIRST",e.LAST="LAST",e.ALL="ALL"}(en||(en={}));const tn=new Map([[en.FIRST,"tb.rulenode.first"],[en.LAST,"tb.rulenode.last"],[en.ALL,"tb.rulenode.all"]]),nn=new Map([[en.FIRST,"tb.rulenode.first-mode-hint"],[en.LAST,"tb.rulenode.last-mode-hint"],[en.ALL,"tb.rulenode.all-mode-hint"]]);var on,rn;!function(e){e.ASC="ASC",e.DESC="DESC"}(on||(on={})),function(e){e.ATTRIBUTES="ATTRIBUTES",e.LATEST_TELEMETRY="LATEST_TELEMETRY",e.FIELDS="FIELDS"}(rn||(rn={}));const an=new Map([[rn.ATTRIBUTES,"tb.rulenode.attributes"],[rn.LATEST_TELEMETRY,"tb.rulenode.latest-telemetry"],[rn.FIELDS,"tb.rulenode.fields"]]),ln=new Map([[rn.ATTRIBUTES,"tb.rulenode.add-mapped-attribute-to"],[rn.LATEST_TELEMETRY,"tb.rulenode.add-mapped-latest-telemetry-to"],[rn.FIELDS,"tb.rulenode.add-mapped-fields-to"]]),sn=new Map([[on.ASC,"tb.rulenode.ascending"],[on.DESC,"tb.rulenode.descending"]]);var mn;!function(e){e.STANDARD="STANDARD",e.FIFO="FIFO"}(mn||(mn={}));const pn=new Map([[mn.STANDARD,"tb.rulenode.sqs-queue-standard"],[mn.FIFO,"tb.rulenode.sqs-queue-fifo"]]),dn=["anonymous","basic","cert.PEM"],un=new Map([["anonymous","tb.rulenode.credentials-anonymous"],["basic","tb.rulenode.credentials-basic"],["cert.PEM","tb.rulenode.credentials-pem"]]),cn=["sas","cert.PEM"],gn=new Map([["sas","tb.rulenode.credentials-sas"],["cert.PEM","tb.rulenode.credentials-pem"]]);var fn,yn;!function(e){e.GET="GET",e.POST="POST",e.PUT="PUT",e.DELETE="DELETE"}(fn||(fn={})),function(e){e.TENANT="TENANT",e.CUSTOMER="CUSTOMER"}(yn||(yn={}));const xn=new Map([[yn.TENANT,"tb.rulenode.originator-tenant"],[yn.CUSTOMER,"tb.rulenode.originator-customer"]]);var bn;!function(e){e.MIN="MIN",e.MAX="MAX",e.SUM="SUM",e.AVG="AVG",e.COUNT="COUNT",e.COUNT_UNIQUE="COUNT_UNIQUE"}(bn||(bn={}));const hn=new Map([[bn.MIN,"tb.rulenode.func-min"],[bn.MAX,"tb.rulenode.func-max"],[bn.SUM,"tb.rulenode.func-sum"],[bn.AVG,"tb.rulenode.func-avg"],[bn.COUNT,"tb.rulenode.func-count"],[bn.COUNT_UNIQUE,"tb.rulenode.func-count-unique"]]),vn=[C.ASSET,C.DEVICE,C.EDGE,C.ENTITY_VIEW,C.CUSTOMER,C.USER];var Cn;!function(e){e.HOUR="HOUR",e.DAY="DAY",e.WEEK="WEEK",e.WEEK_SUN_SAT="WEEK_SUN_SAT",e.MONTH="MONTH",e.YEAR="YEAR",e.CUSTOM="CUSTOM"}(Cn||(Cn={}));const Fn=new Map([[Cn.HOUR,"tb.rulenode.aggregate-period-hour"],[Cn.DAY,"tb.rulenode.aggregate-period-day"],[Cn.WEEK,"tb.rulenode.aggregate-period-week"],[Cn.WEEK_SUN_SAT,"tb.rulenode.aggregate-period-week-sun-sat"],[Cn.MONTH,"tb.rulenode.aggregate-period-month"],[Cn.YEAR,"tb.rulenode.aggregate-period-year"],[Cn.CUSTOM,"tb.rulenode.aggregate-period-custom"]]);var kn;!function(e){e.ON_EACH_CHECK="ON_EACH_CHECK",e.ON_EACH_CHECK_AFTER_INTERVAL_END="ON_EACH_CHECK_AFTER_INTERVAL_END",e.ON_EACH_MESSAGE="ON_EACH_MESSAGE"}(kn||(kn={}));const Tn=new Map([[kn.ON_EACH_CHECK,"tb.rulenode.interval-persist-policy-on-each-check"],[kn.ON_EACH_CHECK_AFTER_INTERVAL_END,"tb.rulenode.interval-persist-policy-on-each-check-after-interval-end"],[kn.ON_EACH_MESSAGE,"tb.rulenode.interval-persist-policy-on-each-message"]]);var Ln;!function(e){e.ON_EACH_CHANGE="ON_EACH_CHANGE",e.PERIODICALLY="PERIODICALLY"}(Ln||(Ln={}));const In=new Map([[Ln.ON_EACH_CHANGE,"tb.rulenode.state-persist-policy-on-each-change"],[Ln.PERIODICALLY,"tb.rulenode.state-persist-policy-periodically"]]),Nn=["US-ASCII","ISO-8859-1","UTF-8","UTF-16BE","UTF-16LE","UTF-16"],Sn=new Map([["US-ASCII","tb.rulenode.charset-us-ascii"],["ISO-8859-1","tb.rulenode.charset-iso-8859-1"],["UTF-8","tb.rulenode.charset-utf-8"],["UTF-16BE","tb.rulenode.charset-utf-16be"],["UTF-16LE","tb.rulenode.charset-utf-16le"],["UTF-16","tb.rulenode.charset-utf-16"]]),An={fetchLastLevelOnly:!1,direction:v.FROM,maxLevel:1,filters:[{relationType:k,entityTypes:[]}]};function qn(e){if(e&&e.type){const t=e.type,n={type:t};switch(t){case"single":n.entityId=e.entityId,e.childRelationsQuery&&(n.childRelationsQuery=e.childRelationsQuery);break;case"group":n.entityGroupId=e.entityGroupId;break;case"relationsQuery":n.rootEntityId=e.rootEntityId,n.relationsQuery=e.relationsQuery,n.includeRootEntity=e.includeRootEntity,e.childRelationsQuery&&(n.childRelationsQuery=e.childRelationsQuery)}return n}return e}var wn;!function(e){e.CUSTOM="CUSTOM",e.ADD="ADD",e.SUB="SUB",e.MULT="MULT",e.DIV="DIV",e.SIN="SIN",e.SINH="SINH",e.COS="COS",e.COSH="COSH",e.TAN="TAN",e.TANH="TANH",e.ACOS="ACOS",e.ASIN="ASIN",e.ATAN="ATAN",e.ATAN2="ATAN2",e.EXP="EXP",e.EXPM1="EXPM1",e.SQRT="SQRT",e.CBRT="CBRT",e.GET_EXP="GET_EXP",e.HYPOT="HYPOT",e.LOG="LOG",e.LOG10="LOG10",e.LOG1P="LOG1P",e.CEIL="CEIL",e.FLOOR="FLOOR",e.FLOOR_DIV="FLOOR_DIV",e.FLOOR_MOD="FLOOR_MOD",e.ABS="ABS",e.MIN="MIN",e.MAX="MAX",e.POW="POW",e.SIGNUM="SIGNUM",e.RAD="RAD",e.DEG="DEG"}(wn||(wn={}));const Mn=new Map([[wn.CUSTOM,{value:wn.CUSTOM,name:"Custom Function",description:"Use this function to specify complex mathematical expression.",minArgs:1,maxArgs:16}],[wn.ADD,{value:wn.ADD,name:"Addition",description:"x + y",minArgs:2,maxArgs:2}],[wn.SUB,{value:wn.SUB,name:"Subtraction",description:"x - y",minArgs:2,maxArgs:2}],[wn.MULT,{value:wn.MULT,name:"Multiplication",description:"x * y",minArgs:2,maxArgs:2}],[wn.DIV,{value:wn.DIV,name:"Division",description:"x / y",minArgs:2,maxArgs:2}],[wn.SIN,{value:wn.SIN,name:"Sine",description:"Returns the trigonometric sine of an angle in radians.",minArgs:1,maxArgs:1}],[wn.SINH,{value:wn.SINH,name:"Hyperbolic sine",description:"Returns the hyperbolic sine of an argument.",minArgs:1,maxArgs:1}],[wn.COS,{value:wn.COS,name:"Cosine",description:"Returns the trigonometric cosine of an angle in radians.",minArgs:1,maxArgs:1}],[wn.COSH,{value:wn.COSH,name:"Hyperbolic cosine",description:"Returns the hyperbolic cosine of an argument.",minArgs:1,maxArgs:1}],[wn.TAN,{value:wn.TAN,name:"Tangent",description:"Returns the trigonometric tangent of an angle in radians",minArgs:1,maxArgs:1}],[wn.TANH,{value:wn.TANH,name:"Hyperbolic tangent",description:"Returns the hyperbolic tangent of an argument",minArgs:1,maxArgs:1}],[wn.ACOS,{value:wn.ACOS,name:"Arc cosine",description:"Returns the arc cosine of an argument",minArgs:1,maxArgs:1}],[wn.ASIN,{value:wn.ASIN,name:"Arc sine",description:"Returns the arc sine of an argument",minArgs:1,maxArgs:1}],[wn.ATAN,{value:wn.ATAN,name:"Arc tangent",description:"Returns the arc tangent of an argument",minArgs:1,maxArgs:1}],[wn.ATAN2,{value:wn.ATAN2,name:"2-argument arc tangent",description:"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)",minArgs:2,maxArgs:2}],[wn.EXP,{value:wn.EXP,name:"Exponential",description:"Returns Euler's number e raised to the power of an argument",minArgs:1,maxArgs:1}],[wn.EXPM1,{value:wn.EXPM1,name:"Exponential minus one",description:"Returns Euler's number e raised to the power of an argument minus one",minArgs:1,maxArgs:1}],[wn.SQRT,{value:wn.SQRT,name:"Square",description:"Returns the correctly rounded positive square root of an argument",minArgs:1,maxArgs:1}],[wn.CBRT,{value:wn.CBRT,name:"Cube root",description:"Returns the cube root of an argument",minArgs:1,maxArgs:1}],[wn.GET_EXP,{value:wn.GET_EXP,name:"Get exponent",description:"Returns the unbiased exponent used in the representation of an argument",minArgs:1,maxArgs:1}],[wn.HYPOT,{value:wn.HYPOT,name:"Square root",description:"Returns the square root of the squares of the arguments",minArgs:2,maxArgs:2}],[wn.LOG,{value:wn.LOG,name:"Logarithm",description:"Returns the natural logarithm of an argument",minArgs:1,maxArgs:1}],[wn.LOG10,{value:wn.LOG10,name:"Base 10 logarithm",description:"Returns the base 10 logarithm of an argument",minArgs:1,maxArgs:1}],[wn.LOG1P,{value:wn.LOG1P,name:"Logarithm of the sum",description:"Returns the natural logarithm of the sum of an argument",minArgs:1,maxArgs:1}],[wn.CEIL,{value:wn.CEIL,name:"Ceiling",description:"Returns the smallest (closest to negative infinity) of an argument",minArgs:1,maxArgs:1}],[wn.FLOOR,{value:wn.FLOOR,name:"Floor",description:"Returns the largest (closest to positive infinity) of an argument",minArgs:1,maxArgs:1}],[wn.FLOOR_DIV,{value:wn.FLOOR_DIV,name:"Floor division",description:"Returns the largest (closest to positive infinity) of the arguments",minArgs:2,maxArgs:2}],[wn.FLOOR_MOD,{value:wn.FLOOR_MOD,name:"Floor modulus",description:"Returns the floor modulus of the arguments",minArgs:2,maxArgs:2}],[wn.ABS,{value:wn.ABS,name:"Absolute",description:"Returns the absolute value of an argument",minArgs:1,maxArgs:1}],[wn.MIN,{value:wn.MIN,name:"Min",description:"Returns the smaller of the arguments",minArgs:2,maxArgs:2}],[wn.MAX,{value:wn.MAX,name:"Max",description:"Returns the greater of the arguments",minArgs:2,maxArgs:2}],[wn.POW,{value:wn.POW,name:"Raise to a power",description:"Returns the value of the first argument raised to the power of the second argument",minArgs:2,maxArgs:2}],[wn.SIGNUM,{value:wn.SIGNUM,name:"Sign of a real number",description:"Returns the signum function of the argument",minArgs:1,maxArgs:1}],[wn.RAD,{value:wn.RAD,name:"Radian",description:"Converts an angle measured in degrees to an approximately equivalent angle measured in radians",minArgs:1,maxArgs:1}],[wn.DEG,{value:wn.DEG,name:"Degrees",description:"Converts an angle measured in radians to an approximately equivalent angle measured in degrees.",minArgs:1,maxArgs:1}]]);var En,Gn,Dn;!function(e){e.MESSAGE_BODY="MESSAGE_BODY",e.MESSAGE_METADATA="MESSAGE_METADATA",e.ATTRIBUTE="ATTRIBUTE",e.TIME_SERIES="TIME_SERIES",e.CONSTANT="CONSTANT"}(En||(En={})),function(e){e.MESSAGE_BODY="MESSAGE_BODY",e.MESSAGE_METADATA="MESSAGE_METADATA",e.ATTRIBUTE="ATTRIBUTE",e.TIME_SERIES="TIME_SERIES"}(Gn||(Gn={})),function(e){e.DATA="DATA",e.METADATA="METADATA"}(Dn||(Dn={}));const Vn=new Map([[Dn.DATA,"tb.rulenode.message-to-metadata"],[Dn.METADATA,"tb.rulenode.metadata-to-message"]]),Pn=(new Map([[Dn.DATA,"tb.rulenode.from-message"],[Dn.METADATA,"tb.rulenode.from-metadata"]]),new Map([[Dn.DATA,"tb.rulenode.message"],[Dn.METADATA,"tb.rulenode.metadata"]])),Rn=new Map([[Dn.DATA,"tb.rulenode.message"],[Dn.METADATA,"tb.rulenode.message-metadata"]]),On=new Map([[En.MESSAGE_BODY,{name:"tb.rulenode.message-body-type",description:"Fetch argument value from incoming message"}],[En.MESSAGE_METADATA,{name:"tb.rulenode.message-metadata-type",description:"Fetch argument value from incoming message metadata"}],[En.ATTRIBUTE,{name:"tb.rulenode.attribute-type",description:"Fetch attribute value from database"}],[En.TIME_SERIES,{name:"tb.rulenode.time-series-type",description:"Fetch latest time-series value from database"}],[En.CONSTANT,{name:"tb.rulenode.constant-type",description:"Define constant value"}]]),Un=new Map([[Gn.MESSAGE_BODY,{name:"tb.rulenode.message-body-type",description:"Add result to the outgoing message"}],[Gn.MESSAGE_METADATA,{name:"tb.rulenode.message-metadata-type",description:"Add result to the outgoing message metadata"}],[Gn.ATTRIBUTE,{name:"tb.rulenode.attribute-type",description:"Store result as an entity attribute in the database"}],[Gn.TIME_SERIES,{name:"tb.rulenode.time-series-type",description:"Store result as an entity time-series in the database"}]]),Bn=["x","y","z","a","b","c","d","k","l","m","n","o","p","r","s","t"];var _n,Hn;!function(e){e.SHARED_SCOPE="SHARED_SCOPE",e.SERVER_SCOPE="SERVER_SCOPE",e.CLIENT_SCOPE="CLIENT_SCOPE"}(_n||(_n={})),function(e){e.SHARED_SCOPE="SHARED_SCOPE",e.SERVER_SCOPE="SERVER_SCOPE"}(Hn||(Hn={}));const Kn=new Map([[_n.SHARED_SCOPE,"tb.rulenode.shared-scope"],[_n.SERVER_SCOPE,"tb.rulenode.server-scope"],[_n.CLIENT_SCOPE,"tb.rulenode.client-scope"]]);var zn;!function(e){e.ON_FIRST_MESSAGE="ON_FIRST_MESSAGE",e.ON_EACH_MESSAGE="ON_EACH_MESSAGE"}(zn||(zn={}));const jn=new Map([[zn.ON_EACH_MESSAGE,{value:!0,name:"tb.rulenode.presence-monitoring-strategy-on-each-message"}],[zn.ON_FIRST_MESSAGE,{value:!1,name:"tb.rulenode.presence-monitoring-strategy-on-first-message"}]]);class Qn extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.entityGroupTypes=vn,this.destroy$=new de,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-generator-function"}configForm(){return this.generatorConfigForm}onConfigurationSet(e){this.generatorConfigForm=this.fb.group({isEntityGroup:[!!e&&e.isEntityGroup,[]],msgCount:[e?e.msgCount:null,[K.required,K.min(0)]],periodInSeconds:[e?e.periodInSeconds:null,[K.required,K.min(60)]],scriptLang:[e?e.scriptLang:x.JS,[K.required]],jsScript:[e?e.jsScript:null,[]],tbelScript:[e?e.tbelScript:null,[]],originator:[e?e.originator:null,[]],groupOwnerId:[e?e.groupOwnerId:null,[K.required]]}),this.generatorConfigForm.get("groupOwnerId").valueChanges.pipe(Ve(this.destroy$)).subscribe((()=>{this.generatorConfigForm.get("originator").patchValue(null,{emitEvent:!1})})),this.generatorConfigForm.get("isEntityGroup").valueChanges.pipe(Ve(this.destroy$)).subscribe((e=>{this.cleanKeys(e)}))}setGroupType(e){this.groupType=e}updateKeysValidator(e){e?(this.generatorConfigForm.get("originator").setValidators(K.required),this.generatorConfigForm.get("groupOwnerId").enable({emitEvent:!1})):(this.generatorConfigForm.get("originator").clearValidators(),this.generatorConfigForm.get("groupOwnerId").disable({emitEvent:!1})),this.generatorConfigForm.get("originator").updateValueAndValidity({emitEvent:!1})}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}cleanKeys(e){this.generatorConfigForm.get("originator").patchValue(null,{emitEvent:!1}),e||(this.generatorConfigForm.get("groupOwnerId").patchValue(null,{emitEvent:!1}),this.groupType=null)}validatorTriggers(){return["scriptLang","isEntityGroup"]}updateValidators(e){this.updateKeysValidator(this.generatorConfigForm.get("isEntityGroup").value);let t=this.generatorConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.generatorConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.generatorConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.generatorConfigForm.get("jsScript").setValidators(t===x.JS?[K.required]:[]),this.generatorConfigForm.get("jsScript").updateValueAndValidity({emitEvent:e}),this.generatorConfigForm.get("tbelScript").setValidators(t===x.TBEL?[K.required]:[]),this.generatorConfigForm.get("tbelScript").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS),e.originatorId&&e.originatorType&&(e.originator={id:e.originatorId,entityType:e.originatorType}),e.isEntityGroup=!!e.groupOwnerId),e}prepareOutputConfig(e){return Ce(e.originator)?(e.originatorId=e.originator.id,e.originatorType=e.originator.entityType):(e.originatorId=null,e.originatorType=null),Ce(this.groupType)&&(e.groupType=this.groupType),delete e.originator,delete e.isEntityGroup,e}testScript(e){const t=this.generatorConfigForm.get("scriptLang").value,n=t===x.JS?"jsScript":"tbelScript",o=t===x.JS?"rulenode/generator_node_script_fn":"rulenode/tbel/generator_node_script_fn",r=this.generatorConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"generate",this.translate.instant("tb.rulenode.generator"),"Generate",["prevMsg","prevMetadata","prevMsgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.generatorConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.generatorConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("GeneratorConfigComponent",Qn),Qn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qn,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Qn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Qn,selector:"tb-action-node-generator-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="generatorConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-count</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="msgCount">\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-count-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-message-count-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="60" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class="tb-root-state-entity-switch" fxLayout="row" fxLayoutAlign="start center" style="padding-left: 0px; margin-bottom: 10px">\n    <mat-slide-toggle class="root-state-entity-switch"\n                      formControlName="isEntityGroup">\n    </mat-slide-toggle>\n    <label style="margin-left: 5px;" class="tb-small root-state-entity-label">{{ \'tb.rulenode.entity-group\' | translate }}</label>\n  </div>\n  <div fxLayout="column">\n    <label class="tb-small">{{ \'tb.rulenode.originator\' | translate }}</label>\n    <tb-entity-select\n      *ngIf="!generatorConfigForm.get(\'isEntityGroup\').value"\n      required="false"\n      formControlName="originator">\n    </tb-entity-select>\n    <div fxFlex *ngIf="generatorConfigForm.get(\'isEntityGroup\').value">\n      <div fxLayout="row">\n        <tb-owner-autocomplete\n          formControlName="groupOwnerId"\n          placeholderText="tb.rulenode.owner"\n          requiredText="tb.rulenode.owner-required"\n          required\n          notFoundText="tb.rulenode.no-owners-matching"\n          style="padding-right: 8px">\n        </tb-owner-autocomplete>\n        <tb-entity-group-select\n          *ngIf="generatorConfigForm.get(\'groupOwnerId\').value"\n          fxFlex\n          formControlName="originator"\n          [ownerId]="generatorConfigForm.get(\'groupOwnerId\').value"\n          [allowedGroupTypes]="entityGroupTypes"\n          (currentGroupType)="setGroupType($event)"\n          required\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n      </div>\n    </div>\n  </div>\n\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="generatorConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Generate"\n              [functionArgs]="[\'prevMsg\', \'prevMetadata\', \'prevMsgType\']"\n              helpId="rulenode/generator_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="generatorConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Generate"\n              [functionArgs]="[\'prevMsg\', \'prevMetadata\', \'prevMsgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/generator_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:He.EntitySelectComponent,selector:"tb-entity-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","required","disabled"]},{kind:"component",type:Ke.OwnerAutocompleteComponent,selector:"tb-owner-autocomplete",inputs:["excludeOwnerIds","placeholderText","notFoundText","requiredText","required","useOwnerInfoValue","defaultOwnerId","disabled"]},{kind:"component",type:ze.EntityGroupSelectComponent,selector:"tb-entity-group-select",inputs:["allowedGroupTypes","excludeGroupTypes","defaultGroupType","excludeGroupIds","excludeGroupAll","placeholderText","notFoundText","requiredText","ownerId","originator","required","disabled"],outputs:["currentGroupType","currentGroupInfo"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qn,decorators:[{type:n,args:[{selector:"tb-action-node-generator-config",template:'<section [formGroup]="generatorConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-count</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="msgCount">\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-count-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'msgCount\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-message-count-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="60" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="generatorConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class="tb-root-state-entity-switch" fxLayout="row" fxLayoutAlign="start center" style="padding-left: 0px; margin-bottom: 10px">\n    <mat-slide-toggle class="root-state-entity-switch"\n                      formControlName="isEntityGroup">\n    </mat-slide-toggle>\n    <label style="margin-left: 5px;" class="tb-small root-state-entity-label">{{ \'tb.rulenode.entity-group\' | translate }}</label>\n  </div>\n  <div fxLayout="column">\n    <label class="tb-small">{{ \'tb.rulenode.originator\' | translate }}</label>\n    <tb-entity-select\n      *ngIf="!generatorConfigForm.get(\'isEntityGroup\').value"\n      required="false"\n      formControlName="originator">\n    </tb-entity-select>\n    <div fxFlex *ngIf="generatorConfigForm.get(\'isEntityGroup\').value">\n      <div fxLayout="row">\n        <tb-owner-autocomplete\n          formControlName="groupOwnerId"\n          placeholderText="tb.rulenode.owner"\n          requiredText="tb.rulenode.owner-required"\n          required\n          notFoundText="tb.rulenode.no-owners-matching"\n          style="padding-right: 8px">\n        </tb-owner-autocomplete>\n        <tb-entity-group-select\n          *ngIf="generatorConfigForm.get(\'groupOwnerId\').value"\n          fxFlex\n          formControlName="originator"\n          [ownerId]="generatorConfigForm.get(\'groupOwnerId\').value"\n          [allowedGroupTypes]="entityGroupTypes"\n          (currentGroupType)="setGroupType($event)"\n          required\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n      </div>\n    </div>\n  </div>\n\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="generatorConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Generate"\n              [functionArgs]="[\'prevMsg\', \'prevMetadata\', \'prevMsgType\']"\n              helpId="rulenode/generator_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="generatorConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Generate"\n              [functionArgs]="[\'prevMsg\', \'prevMetadata\', \'prevMsgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/generator_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row" style="padding-bottom: 16px;">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class $n extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.perimeterType=jt,this.perimeterTypes=Object.keys(jt),this.perimeterTypeTranslationMap=Qt,this.rangeUnits=Object.keys(Jt),this.rangeUnitTranslationMap=Wt,this.presenceMonitoringStrategies=jn,this.presenceMonitoringStrategyKeys=Array.from(this.presenceMonitoringStrategies.keys()),this.timeUnits=Object.keys($t),this.timeUnitsTranslationMap=Yt,this.defaultPaddingEnable=!0}configForm(){return this.geoActionConfigForm}onConfigurationSet(e){this.geoActionConfigForm=this.fb.group({reportPresenceStatusOnEachMessage:[!e||e.reportPresenceStatusOnEachMessage,[K.required]],latitudeKeyName:[e?e.latitudeKeyName:null,[K.required]],longitudeKeyName:[e?e.longitudeKeyName:null,[K.required]],perimeterType:[e?e.perimeterType:null,[K.required]],fetchPerimeterInfoFromMessageMetadata:[!!e&&e.fetchPerimeterInfoFromMessageMetadata,[]],perimeterKeyName:[e?e.perimeterKeyName:null,[]],centerLatitude:[e?e.centerLatitude:null,[]],centerLongitude:[e?e.centerLatitude:null,[]],range:[e?e.range:null,[]],rangeUnit:[e?e.rangeUnit:null,[]],polygonsDefinition:[e?e.polygonsDefinition:null,[]],minInsideDuration:[e?e.minInsideDuration:null,[K.required,K.min(1),K.max(2147483647)]],minInsideDurationTimeUnit:[e?e.minInsideDurationTimeUnit:null,[K.required]],minOutsideDuration:[e?e.minOutsideDuration:null,[K.required,K.min(1),K.max(2147483647)]],minOutsideDurationTimeUnit:[e?e.minOutsideDurationTimeUnit:null,[K.required]]})}validatorTriggers(){return["fetchPerimeterInfoFromMessageMetadata","perimeterType"]}updateValidators(e){const t=this.geoActionConfigForm.get("fetchPerimeterInfoFromMessageMetadata").value,n=this.geoActionConfigForm.get("perimeterType").value;t?this.geoActionConfigForm.get("perimeterKeyName").setValidators([K.required]):this.geoActionConfigForm.get("perimeterKeyName").setValidators([]),t||n!==jt.CIRCLE?(this.geoActionConfigForm.get("centerLatitude").setValidators([]),this.geoActionConfigForm.get("centerLongitude").setValidators([]),this.geoActionConfigForm.get("range").setValidators([]),this.geoActionConfigForm.get("rangeUnit").setValidators([]),this.defaultPaddingEnable=!0):(this.geoActionConfigForm.get("centerLatitude").setValidators([K.required,K.min(-90),K.max(90)]),this.geoActionConfigForm.get("centerLongitude").setValidators([K.required,K.min(-180),K.max(180)]),this.geoActionConfigForm.get("range").setValidators([K.required,K.min(0)]),this.geoActionConfigForm.get("rangeUnit").setValidators([K.required]),this.defaultPaddingEnable=!1),t||n!==jt.POLYGON?this.geoActionConfigForm.get("polygonsDefinition").setValidators([]):this.geoActionConfigForm.get("polygonsDefinition").setValidators([K.required]),this.geoActionConfigForm.get("perimeterKeyName").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("centerLatitude").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("centerLongitude").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("range").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("rangeUnit").updateValueAndValidity({emitEvent:e}),this.geoActionConfigForm.get("polygonsDefinition").updateValueAndValidity({emitEvent:e})}}e("GpsGeoActionConfigComponent",$n),$n.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:$n,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),$n.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:$n,selector:"tb-action-node-gps-geofencing-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="geoActionConfigForm" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.coordinate-field-names</div>\n    <section>\n      <div fxLayout="row" fxLayoutGap="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.latitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="latitudeKeyName" required>\n          <mat-error *ngIf="geoActionConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.latitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.longitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="longitudeKeyName" required>\n          <mat-error *ngIf="geoActionConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.longitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.coordinate-field-hint</div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked" [class.no-padding-bottom]="!defaultPaddingEnable">\n    <div class="tb-form-panel-title" translate>tb.rulenode.geofence-configuration</div>\n    <section fxLayout="column">\n      <mat-form-field fxFlex class="mat-block" hideRequiredMarker>\n        <mat-label>{{ \'tb.rulenode.perimeter-type\' | translate }}</mat-label>\n        <mat-select formControlName="perimeterType">\n          <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n            {{ perimeterTypeTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div tb-hint-tooltip-icon="{{ geoActionConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE\n        ? (\'tb.rulenode.fetch-circle-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoActionConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoActionConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'})\n        : (\'tb.rulenode.fetch-poligon-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoActionConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoActionConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'}) }}"\n           class="tb-form-row no-border no-padding slide-toggle">\n        <mat-slide-toggle class="mat-slide" formControlName="fetchPerimeterInfoFromMessageMetadata">\n          {{ \'tb.rulenode.fetch-perimeter-info-from-metadata\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field *ngIf="geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value" class="mat-block">\n        <mat-label>{{ \'tb.rulenode.perimeter-key-name\' | translate }}</mat-label>\n        <input matInput formControlName="perimeterKeyName" required>\n        <mat-error *ngIf="geoActionConfigForm.get(\'perimeterKeyName\').hasError(\'required\')">\n          {{ \'tb.rulenode.perimeter-key-name-required\' | translate }}\n        </mat-error>\n        <mat-hint>{{ \'tb.rulenode.perimeter-key-name-hint\' | translate }}</mat-hint>\n      </mat-form-field>\n      <div fxLayout="column"\n           *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n              !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-latitude\' | translate }}</mat-label>\n            <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-longitude\' | translate }}</mat-label>\n            <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range\' | translate }}</mat-label>\n            <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'range\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range-units\' | translate }}</mat-label>\n            <mat-select formControlName="rangeUnit" required>\n              <mat-option *ngFor="let type of rangeUnits" [value]="type">\n                {{ rangeUnitTranslationMap.get(type) | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf="geoActionConfigForm.get(\'rangeUnit\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-units-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div fxLayout="column" *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                                 !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <mat-form-field class="mat-block" subscriptSizing="dynamic">\n          <mat-label translate>tb.rulenode.polygon-definition</mat-label>\n          <input matInput formControlName="polygonsDefinition" required>\n          <mat-icon matSuffix class="margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                    color="primary"\n                    matTooltip="{{ \'tb.rulenode.polygon-definition-hint\' | translate }}">\n            help\n          </mat-icon>\n          <mat-error *ngIf="geoActionConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n            {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked no-padding-bottom">\n    <div fxLayout="column" fxLayout.gt-sm="row"  fxLayoutGap.lt-md="16px" fxLayoutAlign="space-between">\n      <div class="tb-form-panel-title">{{ \'tb.rulenode.presence-monitoring-strategy\' | translate }}</div>\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="reportPresenceStatusOnEachMessage" appearance="fill" >\n        <tb-toggle-option *ngFor="let strategy of presenceMonitoringStrategyKeys" [value]="presenceMonitoringStrategies.get(strategy).value">\n          {{ presenceMonitoringStrategies.get(strategy).name | translate }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n    <div class="tb-form-hint tb-primary-fill"> {{ geoActionConfigForm.get(\'reportPresenceStatusOnEachMessage\').value === false ?\n        (\'tb.rulenode.presence-monitoring-strategy-on-first-message-hint\' | translate) :\n        (\'tb.rulenode.presence-monitoring-strategy-on-each-message-hint\' | translate) }}\n    </div>\n    <section fxLayout="column">\n      <div *ngIf="geoActionConfigForm.get(\'reportPresenceStatusOnEachMessage\').value === false">\n        <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-inside-duration</mat-label>\n            <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minInsideDuration" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'required\')">\n              {{ \'tb.rulenode.min-inside-duration-value-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'min\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'max\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-inside-duration-time-unit</mat-label>\n            <mat-select formControlName="minInsideDurationTimeUnit" required>\n              <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n                {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-outside-duration</mat-label>\n            <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minOutsideDuration" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'required\')">\n              {{ \'tb.rulenode.min-outside-duration-value-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'min\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'max\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-outside-duration-time-unit</mat-label>\n            <mat-select formControlName="minOutsideDurationTimeUnit" required>\n              <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n                {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </section>\n  </section>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:$n,decorators:[{type:n,args:[{selector:"tb-action-node-gps-geofencing-config",template:'<section [formGroup]="geoActionConfigForm" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.coordinate-field-names</div>\n    <section>\n      <div fxLayout="row" fxLayoutGap="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.latitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="latitudeKeyName" required>\n          <mat-error *ngIf="geoActionConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.latitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.longitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="longitudeKeyName" required>\n          <mat-error *ngIf="geoActionConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.longitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.coordinate-field-hint</div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked" [class.no-padding-bottom]="!defaultPaddingEnable">\n    <div class="tb-form-panel-title" translate>tb.rulenode.geofence-configuration</div>\n    <section fxLayout="column">\n      <mat-form-field fxFlex class="mat-block" hideRequiredMarker>\n        <mat-label>{{ \'tb.rulenode.perimeter-type\' | translate }}</mat-label>\n        <mat-select formControlName="perimeterType">\n          <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n            {{ perimeterTypeTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div tb-hint-tooltip-icon="{{ geoActionConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE\n        ? (\'tb.rulenode.fetch-circle-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoActionConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoActionConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'})\n        : (\'tb.rulenode.fetch-poligon-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoActionConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoActionConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'}) }}"\n           class="tb-form-row no-border no-padding slide-toggle">\n        <mat-slide-toggle class="mat-slide" formControlName="fetchPerimeterInfoFromMessageMetadata">\n          {{ \'tb.rulenode.fetch-perimeter-info-from-metadata\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field *ngIf="geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value" class="mat-block">\n        <mat-label>{{ \'tb.rulenode.perimeter-key-name\' | translate }}</mat-label>\n        <input matInput formControlName="perimeterKeyName" required>\n        <mat-error *ngIf="geoActionConfigForm.get(\'perimeterKeyName\').hasError(\'required\')">\n          {{ \'tb.rulenode.perimeter-key-name-required\' | translate }}\n        </mat-error>\n        <mat-hint>{{ \'tb.rulenode.perimeter-key-name-hint\' | translate }}</mat-hint>\n      </mat-form-field>\n      <div fxLayout="column"\n           *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n              !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-latitude\' | translate }}</mat-label>\n            <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-longitude\' | translate }}</mat-label>\n            <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range\' | translate }}</mat-label>\n            <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'range\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range-units\' | translate }}</mat-label>\n            <mat-select formControlName="rangeUnit" required>\n              <mat-option *ngFor="let type of rangeUnits" [value]="type">\n                {{ rangeUnitTranslationMap.get(type) | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf="geoActionConfigForm.get(\'rangeUnit\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-units-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div fxLayout="column" *ngIf="geoActionConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                                 !geoActionConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <mat-form-field class="mat-block" subscriptSizing="dynamic">\n          <mat-label translate>tb.rulenode.polygon-definition</mat-label>\n          <input matInput formControlName="polygonsDefinition" required>\n          <mat-icon matSuffix class="margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                    color="primary"\n                    matTooltip="{{ \'tb.rulenode.polygon-definition-hint\' | translate }}">\n            help\n          </mat-icon>\n          <mat-error *ngIf="geoActionConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n            {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked no-padding-bottom">\n    <div fxLayout="column" fxLayout.gt-sm="row"  fxLayoutGap.lt-md="16px" fxLayoutAlign="space-between">\n      <div class="tb-form-panel-title">{{ \'tb.rulenode.presence-monitoring-strategy\' | translate }}</div>\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="reportPresenceStatusOnEachMessage" appearance="fill" >\n        <tb-toggle-option *ngFor="let strategy of presenceMonitoringStrategyKeys" [value]="presenceMonitoringStrategies.get(strategy).value">\n          {{ presenceMonitoringStrategies.get(strategy).name | translate }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n    <div class="tb-form-hint tb-primary-fill"> {{ geoActionConfigForm.get(\'reportPresenceStatusOnEachMessage\').value === false ?\n        (\'tb.rulenode.presence-monitoring-strategy-on-first-message-hint\' | translate) :\n        (\'tb.rulenode.presence-monitoring-strategy-on-each-message-hint\' | translate) }}\n    </div>\n    <section fxLayout="column">\n      <div *ngIf="geoActionConfigForm.get(\'reportPresenceStatusOnEachMessage\').value === false">\n        <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-inside-duration</mat-label>\n            <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minInsideDuration" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'required\')">\n              {{ \'tb.rulenode.min-inside-duration-value-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'min\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minInsideDuration\').hasError(\'max\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-inside-duration-time-unit</mat-label>\n            <mat-select formControlName="minInsideDurationTimeUnit" required>\n              <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n                {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-outside-duration</mat-label>\n            <input type="number" step="1" min="1" max="2147483647" matInput formControlName="minOutsideDuration" required>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'required\')">\n              {{ \'tb.rulenode.min-outside-duration-value-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'min\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="geoActionConfigForm.get(\'minOutsideDuration\').hasError(\'max\')">\n              {{ \'tb.rulenode.time-value-range\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex class="mat-block">\n            <mat-label translate>tb.rulenode.min-outside-duration-time-unit</mat-label>\n            <mat-select formControlName="minOutsideDurationTimeUnit" required>\n              <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n                {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </section>\n  </section>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Yn extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-to-string-function"}configForm(){return this.logConfigForm}onConfigurationSet(e){this.logConfigForm=this.fb.group({scriptLang:[e?e.scriptLang:x.JS,[K.required]],jsScript:[e?e.jsScript:null,[]],tbelScript:[e?e.tbelScript:null,[]]})}validatorTriggers(){return["scriptLang"]}updateValidators(e){let t=this.logConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.logConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.logConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.logConfigForm.get("jsScript").setValidators(t===x.JS?[K.required]:[]),this.logConfigForm.get("jsScript").updateValueAndValidity({emitEvent:e}),this.logConfigForm.get("tbelScript").setValidators(t===x.TBEL?[K.required]:[]),this.logConfigForm.get("tbelScript").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),e}testScript(e){const t=this.logConfigForm.get("scriptLang").value,n=t===x.JS?"jsScript":"tbelScript",o=t===x.JS?"rulenode/log_node_script_fn":"rulenode/tbel/log_node_script_fn",r=this.logConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"string",this.translate.instant("tb.rulenode.to-string"),"ToString",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.logConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.logConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("LogConfigComponent",Yn),Yn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Yn,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Yn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Yn,selector:"tb-action-node-log-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="logConfigForm" fxLayout="column">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="logConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="ToString"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/log_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="logConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="ToString"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/log_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Yn,decorators:[{type:n,args:[{selector:"tb-action-node-log-config",template:'<section [formGroup]="logConfigForm" fxLayout="column">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="logConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="ToString"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/log_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="logConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="ToString"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/log_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div fxLayout="row">\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class Jn extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.msgCountConfigForm}onConfigurationSet(e){this.msgCountConfigForm=this.fb.group({interval:[e?e.interval:null,[K.required,K.min(1)]],telemetryPrefix:[e?e.telemetryPrefix:null,[K.required]]})}}e("MsgCountConfigComponent",Jn),Jn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Jn,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Jn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Jn,selector:"tb-action-node-msg-count-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="msgCountConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.interval-seconds</mat-label>\n    <input required type="number" min="1" step="1" matInput formControlName="interval">\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'required\')">\n      {{ \'tb.rulenode.interval-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-interval-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.output-timeseries-key-prefix</mat-label>\n    <input required matInput formControlName="telemetryPrefix">\n    <mat-error *ngIf="msgCountConfigForm.get(\'telemetryPrefix\').hasError(\'required\')">\n      {{ \'tb.rulenode.output-timeseries-key-prefix-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Jn,decorators:[{type:n,args:[{selector:"tb-action-node-msg-count-config",template:'<section [formGroup]="msgCountConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.interval-seconds</mat-label>\n    <input required type="number" min="1" step="1" matInput formControlName="interval">\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'required\')">\n      {{ \'tb.rulenode.interval-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgCountConfigForm.get(\'interval\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-interval-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.output-timeseries-key-prefix</mat-label>\n    <input required matInput formControlName="telemetryPrefix">\n    <mat-error *ngIf="msgCountConfigForm.get(\'telemetryPrefix\').hasError(\'required\')">\n      {{ \'tb.rulenode.output-timeseries-key-prefix-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Wn extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.msgDelayConfigForm}onConfigurationSet(e){this.msgDelayConfigForm=this.fb.group({useMetadataPeriodInSecondsPatterns:[!!e&&e.useMetadataPeriodInSecondsPatterns,[]],periodInSeconds:[e?e.periodInSeconds:null,[]],periodInSecondsPattern:[e?e.periodInSecondsPattern:null,[]],maxPendingMsgs:[e?e.maxPendingMsgs:null,[K.required,K.min(1),K.max(1e5)]]})}validatorTriggers(){return["useMetadataPeriodInSecondsPatterns"]}updateValidators(e){this.msgDelayConfigForm.get("useMetadataPeriodInSecondsPatterns").value?(this.msgDelayConfigForm.get("periodInSecondsPattern").setValidators([K.required]),this.msgDelayConfigForm.get("periodInSeconds").setValidators([])):(this.msgDelayConfigForm.get("periodInSecondsPattern").setValidators([]),this.msgDelayConfigForm.get("periodInSeconds").setValidators([K.required,K.min(0)])),this.msgDelayConfigForm.get("periodInSecondsPattern").updateValueAndValidity({emitEvent:e}),this.msgDelayConfigForm.get("periodInSeconds").updateValueAndValidity({emitEvent:e})}}e("MsgDelayConfigComponent",Wn),Wn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Wn,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Wn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Wn,selector:"tb-action-node-msg-delay-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="msgDelayConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useMetadataPeriodInSecondsPatterns">\n    {{ \'tb.rulenode.use-metadata-period-in-seconds-patterns\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.use-metadata-period-in-seconds-patterns-hint</div>\n  <mat-form-field *ngIf="msgDelayConfigForm.get(\'useMetadataPeriodInSecondsPatterns\').value !== true; else periodInSecondsPattern"\n                  class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-0-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <ng-template #periodInSecondsPattern>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.period-in-seconds-pattern</mat-label>\n      <input required matInput formControlName="periodInSecondsPattern">\n      <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSecondsPattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.period-in-seconds-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n  </ng-template>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.max-pending-messages</mat-label>\n    <input required type="number" min="1" max="100000" step="1" matInput formControlName="maxPendingMsgs">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'required\')">\n      {{ \'tb.rulenode.max-pending-messages-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'min\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Wn,decorators:[{type:n,args:[{selector:"tb-action-node-msg-delay-config",template:'<section [formGroup]="msgDelayConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useMetadataPeriodInSecondsPatterns">\n    {{ \'tb.rulenode.use-metadata-period-in-seconds-patterns\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.use-metadata-period-in-seconds-patterns-hint</div>\n  <mat-form-field *ngIf="msgDelayConfigForm.get(\'useMetadataPeriodInSecondsPatterns\').value !== true; else periodInSecondsPattern"\n                  class="mat-block">\n    <mat-label translate>tb.rulenode.period-seconds</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="periodInSeconds">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.period-seconds-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-period-0-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <ng-template #periodInSecondsPattern>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.period-in-seconds-pattern</mat-label>\n      <input required matInput formControlName="periodInSecondsPattern">\n      <mat-error *ngIf="msgDelayConfigForm.get(\'periodInSecondsPattern\').hasError(\'required\')">\n        {{ \'tb.rulenode.period-in-seconds-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n  </ng-template>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.max-pending-messages</mat-label>\n    <input required type="number" min="1" max="100000" step="1" matInput formControlName="maxPendingMsgs">\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'required\')">\n      {{ \'tb.rulenode.max-pending-messages-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'min\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="msgDelayConfigForm.get(\'maxPendingMsgs\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-pending-messages-range\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Zn extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.attributeScopes=Object.keys(f),this.telemetryTypeTranslationsMap=y}configForm(){return this.pushToCloudConfigForm}onConfigurationSet(e){this.pushToCloudConfigForm=this.fb.group({scope:[e?e.scope:null,[K.required]]})}}e("PushToCloudConfigComponent",Zn),Zn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Zn,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Zn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Zn,selector:"tb-action-node-push-to-cloud-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="pushToCloudConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="pushToCloudConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="pushToCloudConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:wt,selector:"[ngxClipboard]",inputs:["ngxClipboard","container","cbContent","cbSuccessMsg"],outputs:["cbOnSuccess","cbOnError"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Zn,decorators:[{type:n,args:[{selector:"tb-action-node-push-to-cloud-config",template:'<section [formGroup]="pushToCloudConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="pushToCloudConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="pushToCloudConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Xn extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.attributeScopes=Object.keys(f),this.telemetryTypeTranslationsMap=y}configForm(){return this.pushToEdgeConfigForm}onConfigurationSet(e){this.pushToEdgeConfigForm=this.fb.group({scope:[e?e.scope:null,[K.required]]})}}e("PushToEdgeConfigComponent",Xn),Xn.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Xn,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Xn.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Xn,selector:"tb-action-node-push-to-edge-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="pushToEdgeConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="pushToEdgeConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="pushToEdgeConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:wt,selector:"[ngxClipboard]",inputs:["ngxClipboard","container","cbContent","cbSuccessMsg"],outputs:["cbOnSuccess","cbOnError"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Xn,decorators:[{type:n,args:[{selector:"tb-action-node-push-to-edge-config",template:'<section [formGroup]="pushToEdgeConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="pushToEdgeConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="pushToEdgeConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class eo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.rpcReplyConfigForm}onConfigurationSet(e){this.rpcReplyConfigForm=this.fb.group({serviceIdMetaDataAttribute:[e?e.serviceIdMetaDataAttribute:null,[]],sessionIdMetaDataAttribute:[e?e.sessionIdMetaDataAttribute:null,[]],requestIdMetaDataAttribute:[e?e.requestIdMetaDataAttribute:null,[]]})}}e("RpcReplyConfigComponent",eo),eo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:eo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),eo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:eo,selector:"tb-action-node-rpc-reply-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="rpcReplyConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.reply-routing-configuration</div>\n  <tb-example-hint [hintText]="\'tb.rulenode.reply-routing-configuration-hint\'">\n  </tb-example-hint>\n  <div class="tb-form-row no-border no-padding tb-standard-fields column-xs">\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.service-id-metadata-attribute</mat-label>\n      <input matInput formControlName="serviceIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.session-id-metadata-attribute</mat-label>\n      <input matInput formControlName="sessionIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n      <input matInput formControlName="requestIdMetaDataAttribute">\n    </mat-form-field>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:eo,decorators:[{type:n,args:[{selector:"tb-action-node-rpc-reply-config",template:'<section [formGroup]="rpcReplyConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.reply-routing-configuration</div>\n  <tb-example-hint [hintText]="\'tb.rulenode.reply-routing-configuration-hint\'">\n  </tb-example-hint>\n  <div class="tb-form-row no-border no-padding tb-standard-fields column-xs">\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.service-id-metadata-attribute</mat-label>\n      <input matInput formControlName="serviceIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.session-id-metadata-attribute</mat-label>\n      <input matInput formControlName="sessionIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n      <input matInput formControlName="requestIdMetaDataAttribute">\n    </mat-form-field>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class to extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.rpcRequestConfigForm}onConfigurationSet(e){this.rpcRequestConfigForm=this.fb.group({timeoutInSeconds:[e?e.timeoutInSeconds:null,[K.required,K.min(0)]]})}}e("RpcRequestConfigComponent",to),to.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:to,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),to.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:to,selector:"tb-action-node-rpc-request-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="rpcRequestConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.timeout-sec</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="timeoutInSeconds" required>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.timeout-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-timeout-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:to,decorators:[{type:n,args:[{selector:"tb-action-node-rpc-request-config",template:'<section [formGroup]="rpcRequestConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.timeout-sec</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="timeoutInSeconds" required>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'required\')">\n      {{ \'tb.rulenode.timeout-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="rpcRequestConfigForm.get(\'timeoutInSeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-timeout-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class no extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t,n,o){super(e),this.store=e,this.translate=t,this.injector=n,this.fb=o,this.propagateChange=null,this.valueChangeSubscription=null}ngOnInit(){this.ngControl=this.injector.get(z),null!=this.ngControl&&(this.ngControl.valueAccessor=this),this.kvListFormGroup=this.fb.group({}),this.kvListFormGroup.addControl("keyVals",this.fb.array([]))}keyValsFormArray(){return this.kvListFormGroup.get("keyVals")}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.kvListFormGroup.disable({emitEvent:!1}):this.kvListFormGroup.enable({emitEvent:!1})}writeValue(e){this.valueChangeSubscription&&this.valueChangeSubscription.unsubscribe();const t=[];if(e)for(const n of Object.keys(e))Object.prototype.hasOwnProperty.call(e,n)&&t.push(this.fb.group({key:[n,[K.required]],value:[e[n],[K.required]]}));this.kvListFormGroup.setControl("keyVals",this.fb.array(t)),this.valueChangeSubscription=this.kvListFormGroup.valueChanges.subscribe((()=>{this.updateModel()}))}removeKeyVal(e){this.kvListFormGroup.get("keyVals").removeAt(e)}addKeyVal(){this.kvListFormGroup.get("keyVals").push(this.fb.group({key:["",[K.required]],value:["",[K.required]]}))}validate(e){const t=this.kvListFormGroup.get("keyVals").value;if(!t.length&&this.required)return{kvMapRequired:!0};if(!this.kvListFormGroup.valid)return{kvFieldsRequired:!0};if(this.uniqueKeyValuePairValidator)for(const e of t)if(e.key===e.value)return{uniqueKeyValuePair:!0};return null}updateModel(){const e=this.kvListFormGroup.get("keyVals").value;if(this.required&&!e.length||!this.kvListFormGroup.valid)this.propagateChange(null);else{const t={};e.forEach((e=>{t[e.key]=e.value})),this.propagateChange(t)}}}e("KvMapConfigOldComponent",no),no.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:no,deps:[{token:_.Store},{token:re.TranslateService},{token:t.Injector},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),no.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:no,selector:"tb-kv-map-config-old",inputs:{disabled:"disabled",uniqueKeyValuePairValidator:"uniqueKeyValuePairValidator",requiredText:"requiredText",keyText:"keyText",keyRequiredText:"keyRequiredText",valText:"valText",valRequiredText:"valRequiredText",hintText:"hintText",required:"required"},providers:[{provide:j,useExisting:c((()=>no)),multi:!0},{provide:Q,useExisting:c((()=>no)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section fxLayout="column" class="tb-kv-map-config" [formGroup]="kvListFormGroup">\n  <div class="header" fxFlex fxLayout="row" fxLayoutGap="8px">\n    <span class="cell tb-required" fxFlex>{{ keyText | translate }}</span>\n    <span class="cell tb-required" fxFlex>{{ valText | translate }}</span>\n    <span [fxShow]="!disabled" style="width: 52px;" innerHTML="&nbsp"></span>\n  </div>\n  <div class="body">\n    <div class="row" fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="8px"\n         formArrayName="keyVals"\n         *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index">\n      <mat-form-field fxFlex class="cell mat-block">\n        <input [formControl]="keyValControl.get(\'key\')" matInput required\n               placeholder="{{ keyText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'key\').hasError(\'required\')">\n          {{ keyRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="cell mat-block">\n        <input [formControl]="keyValControl.get(\'value\')" matInput required\n               placeholder="{{ valText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'value\').hasError(\'required\')">\n          {{ valRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <button mat-icon-button color="primary"\n              [fxShow]="!disabled"\n              type="button"\n              (click)="removeKeyVal($index)"\n              [disabled]="isLoading$ | async"\n              matTooltip="{{ \'tb.key-val.remove-entry\' | translate }}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div *ngIf="hintText" class="tb-hint" [innerHTML]="hintText | translate | safe: \'html\'"></div>\n  </div>\n  <tb-error [error]="ngControl.hasError(\'kvMapRequired\') || ngControl.hasError(\'uniqueKeyValuePair\') ?\n                     (ngControl.hasError(\'kvMapRequired\') ? translate.instant(requiredText) :\n                     translate.instant(\'tb.key-val.unique-key-value-pair-error\', {keyText: translate.instant(keyText),\n                     valText: translate.instant(valText)})) : \'\'"></tb-error>\n  <div style="margin-top: 16px;">\n    <button mat-button mat-raised-button color="primary"\n            [fxShow]="!disabled"\n            [disabled]="isLoading$ | async"\n            (click)="addKeyVal()"\n            type="button"\n            matTooltip="{{ \'tb.key-val.add-entry\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-kv-map-config{margin-bottom:16px}:host .tb-kv-map-config .header{padding-left:5px;padding-right:5px;padding-bottom:5px}:host .tb-kv-map-config .header .cell{padding-left:5px;padding-right:5px;color:#757575;font-size:12px;font-weight:700;white-space:nowrap}:host .tb-kv-map-config .header .tb-required:after{color:#757575;font-size:12px;font-weight:700}:host .tb-kv-map-config .body{padding-left:5px;padding-right:5px;padding-bottom:0;max-height:300px;overflow:auto}:host .tb-kv-map-config .body .cell{padding-left:5px;padding-right:5px}:host .tb-kv-map-config tb-error{display:block;margin-top:-12px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:We.TbErrorComponent,selector:"tb-error",inputs:["noMargin","error"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:Ze.DefaultShowHideDirective,selector:"  [fxShow], [fxShow.print],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide], [fxHide.print],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]",inputs:["fxShow","fxShow.print","fxShow.xs","fxShow.sm","fxShow.md","fxShow.lg","fxShow.xl","fxShow.lt-sm","fxShow.lt-md","fxShow.lt-lg","fxShow.lt-xl","fxShow.gt-xs","fxShow.gt-sm","fxShow.gt-md","fxShow.gt-lg","fxHide","fxHide.print","fxHide.xs","fxHide.sm","fxHide.md","fxHide.lg","fxHide.xl","fxHide.lt-sm","fxHide.lt-md","fxHide.lt-lg","fxHide.lt-xl","fxHide.gt-xs","fxHide.gt-sm","fxHide.gt-md","fxHide.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormControlDirective,selector:"[formControl]",inputs:["formControl","disabled","ngModel"],outputs:["ngModelChange"],exportAs:["ngForm"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormArrayName,selector:"[formArrayName]",inputs:["formArrayName"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:no,decorators:[{type:n,args:[{selector:"tb-kv-map-config-old",providers:[{provide:j,useExisting:c((()=>no)),multi:!0},{provide:Q,useExisting:c((()=>no)),multi:!0}],template:'<section fxLayout="column" class="tb-kv-map-config" [formGroup]="kvListFormGroup">\n  <div class="header" fxFlex fxLayout="row" fxLayoutGap="8px">\n    <span class="cell tb-required" fxFlex>{{ keyText | translate }}</span>\n    <span class="cell tb-required" fxFlex>{{ valText | translate }}</span>\n    <span [fxShow]="!disabled" style="width: 52px;" innerHTML="&nbsp"></span>\n  </div>\n  <div class="body">\n    <div class="row" fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="8px"\n         formArrayName="keyVals"\n         *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index">\n      <mat-form-field fxFlex class="cell mat-block">\n        <input [formControl]="keyValControl.get(\'key\')" matInput required\n               placeholder="{{ keyText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'key\').hasError(\'required\')">\n          {{ keyRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="cell mat-block">\n        <input [formControl]="keyValControl.get(\'value\')" matInput required\n               placeholder="{{ valText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'value\').hasError(\'required\')">\n          {{ valRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <button mat-icon-button color="primary"\n              [fxShow]="!disabled"\n              type="button"\n              (click)="removeKeyVal($index)"\n              [disabled]="isLoading$ | async"\n              matTooltip="{{ \'tb.key-val.remove-entry\' | translate }}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div *ngIf="hintText" class="tb-hint" [innerHTML]="hintText | translate | safe: \'html\'"></div>\n  </div>\n  <tb-error [error]="ngControl.hasError(\'kvMapRequired\') || ngControl.hasError(\'uniqueKeyValuePair\') ?\n                     (ngControl.hasError(\'kvMapRequired\') ? translate.instant(requiredText) :\n                     translate.instant(\'tb.key-val.unique-key-value-pair-error\', {keyText: translate.instant(keyText),\n                     valText: translate.instant(valText)})) : \'\'"></tb-error>\n  <div style="margin-top: 16px;">\n    <button mat-button mat-raised-button color="primary"\n            [fxShow]="!disabled"\n            [disabled]="isLoading$ | async"\n            (click)="addKeyVal()"\n            type="button"\n            matTooltip="{{ \'tb.key-val.add-entry\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-kv-map-config{margin-bottom:16px}:host .tb-kv-map-config .header{padding-left:5px;padding-right:5px;padding-bottom:5px}:host .tb-kv-map-config .header .cell{padding-left:5px;padding-right:5px;color:#757575;font-size:12px;font-weight:700;white-space:nowrap}:host .tb-kv-map-config .header .tb-required:after{color:#757575;font-size:12px;font-weight:700}:host .tb-kv-map-config .body{padding-left:5px;padding-right:5px;padding-bottom:0;max-height:300px;overflow:auto}:host .tb-kv-map-config .body .cell{padding-left:5px;padding-right:5px}:host .tb-kv-map-config tb-error{display:block;margin-top:-12px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:t.Injector},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],uniqueKeyValuePairValidator:[{type:m}],requiredText:[{type:m}],keyText:[{type:m}],keyRequiredText:[{type:m}],valText:[{type:m}],valRequiredText:[{type:m}],hintText:[{type:m}],required:[{type:m}]}});class oo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.saveToCustomTableConfigForm}onConfigurationSet(e){this.saveToCustomTableConfigForm=this.fb.group({tableName:[e?e.tableName:null,[K.required,K.pattern(/.*\S.*/)]],fieldsMapping:[e?e.fieldsMapping:null,[K.required]]})}prepareOutputConfig(e){return e.tableName=e.tableName.trim(),e}}e("SaveToCustomTableConfigComponent",oo),oo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:oo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),oo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:oo,selector:"tb-action-node-custom-table-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="saveToCustomTableConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.custom-table-name</mat-label>\n    <input required matInput formControlName="tableName">\n    <mat-error *ngIf="saveToCustomTableConfigForm.get(\'tableName\').hasError(\'required\') ||\n                      saveToCustomTableConfigForm.get(\'tableName\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.custom-table-name-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.custom-table-hint</mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title tb-required">tb.rulenode.fields-mapping</label>\n  <tb-kv-map-config-old\n    required\n    formControlName="fieldsMapping"\n    requiredText="tb.rulenode.fields-mapping-required"\n    keyText="tb.rulenode.message-field"\n    keyRequiredText="tb.rulenode.message-field-required"\n    valText="tb.rulenode.table-col"\n    valRequiredText="tb.rulenode.table-col-required">\n  </tb-kv-map-config-old>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:oo,decorators:[{type:n,args:[{selector:"tb-action-node-custom-table-config",template:'<section [formGroup]="saveToCustomTableConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.custom-table-name</mat-label>\n    <input required matInput formControlName="tableName">\n    <mat-error *ngIf="saveToCustomTableConfigForm.get(\'tableName\').hasError(\'required\') ||\n                      saveToCustomTableConfigForm.get(\'tableName\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.custom-table-name-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.custom-table-hint</mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title tb-required">tb.rulenode.fields-mapping</label>\n  <tb-kv-map-config-old\n    required\n    formControlName="fieldsMapping"\n    requiredText="tb.rulenode.fields-mapping-required"\n    keyText="tb.rulenode.message-field"\n    keyRequiredText="tb.rulenode.message-field-required"\n    valText="tb.rulenode.table-col"\n    valRequiredText="tb.rulenode.table-col-required">\n  </tb-kv-map-config-old>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class ro extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.timeseriesConfigForm}onConfigurationSet(e){this.timeseriesConfigForm=this.fb.group({defaultTTL:[e?e.defaultTTL:null,[K.required,K.min(0)]],skipLatestPersistence:[!!e&&e.skipLatestPersistence,[]],useServerTs:[!!e&&e.useServerTs,[]]})}}e("TimeseriesConfigComponent",ro),ro.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ro,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),ro.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ro,selector:"tb-action-node-timeseries-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="timeseriesConfigForm" class="tb-form-panel no-border no-padding">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.default-ttl</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="defaultTTL" required>\n    <mat-icon class="help-icon margin-8 cursor-pointer"\n              aria-hidden="false"\n              aria-label="help-icon"\n              matSuffix\n              matTooltip="{{ \'tb.rulenode.default-ttl-hint\' | translate }}">\n      help\n    </mat-icon>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'required\')">\n      {{ \'tb.rulenode.default-ttl-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-default-ttl-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class="tb-form-panel stroked">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.use-server-ts-hint\' | translate}}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="useServerTs">\n        {{ \'tb.rulenode.use-server-ts\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.skip-latest-persistence-hint\' | translate}}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="skipLatestPersistence">\n        {{ \'tb.rulenode.skip-latest-persistence\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ro,decorators:[{type:n,args:[{selector:"tb-action-node-timeseries-config",template:'<section [formGroup]="timeseriesConfigForm" class="tb-form-panel no-border no-padding">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.default-ttl</mat-label>\n    <input type="number" min="0" step="1" matInput formControlName="defaultTTL" required>\n    <mat-icon class="help-icon margin-8 cursor-pointer"\n              aria-hidden="false"\n              aria-label="help-icon"\n              matSuffix\n              matTooltip="{{ \'tb.rulenode.default-ttl-hint\' | translate }}">\n      help\n    </mat-icon>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'required\')">\n      {{ \'tb.rulenode.default-ttl-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="timeseriesConfigForm.get(\'defaultTTL\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-default-ttl-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class="tb-form-panel stroked">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.use-server-ts-hint\' | translate}}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="useServerTs">\n        {{ \'tb.rulenode.use-server-ts\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.skip-latest-persistence-hint\' | translate}}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="skipLatestPersistence">\n        {{ \'tb.rulenode.skip-latest-persistence\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class ao extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.unassignCustomerConfigForm}onConfigurationSet(e){this.unassignCustomerConfigForm=this.fb.group({customerNamePattern:[e?e.customerNamePattern:null,[]],createCustomerIfNotExists:[!!e&&e?.createCustomerIfNotExists,[]]})}validatorTriggers(){return["createCustomerIfNotExists"]}updateValidators(e){this.unassignCustomerConfigForm.get("createCustomerIfNotExists").value?this.unassignCustomerConfigForm.get("customerNamePattern").setValidators([K.required,K.pattern(/.*\S.*/)]):this.unassignCustomerConfigForm.get("customerNamePattern").setValidators([]),this.unassignCustomerConfigForm.get("customerNamePattern").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.customerNamePattern=e.customerNamePattern.trim(),e}}e("UnassignCustomerConfigComponent",ao),ao.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ao,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),ao.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ao,selector:"tb-action-node-un-assign-to-customer-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="unassignCustomerConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n\n    <div class="tb-form-panel stroked" [class.no-padding-bottom]="unassignCustomerConfigForm.get(\'createCustomerIfNotExists\').value">\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.unassign-from-customer-tooltip\' | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="createCustomerIfNotExists">\n          {{ \'tb.rulenode.unassign-from-customer\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field class="mat-block" subscriptSizing="dynamic" *ngIf="unassignCustomerConfigForm.get(\'createCustomerIfNotExists\').value">\n        <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n        <input required matInput formControlName="customerNamePattern">\n        <mat-error *ngIf="unassignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\') ||\n                        unassignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'pattern\')">\n          {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n        </mat-error>\n        <mat-hint translate>tb.rulenode.customer-name-pattern-hint</mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ao,decorators:[{type:n,args:[{selector:"tb-action-node-un-assign-to-customer-config",template:'<section [formGroup]="unassignCustomerConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n\n    <div class="tb-form-panel stroked" [class.no-padding-bottom]="unassignCustomerConfigForm.get(\'createCustomerIfNotExists\').value">\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.unassign-from-customer-tooltip\' | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="createCustomerIfNotExists">\n          {{ \'tb.rulenode.unassign-from-customer\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field class="mat-block" subscriptSizing="dynamic" *ngIf="unassignCustomerConfigForm.get(\'createCustomerIfNotExists\').value">\n        <mat-label translate>tb.rulenode.customer-name-pattern</mat-label>\n        <input required matInput formControlName="customerNamePattern">\n        <mat-error *ngIf="unassignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'required\') ||\n                        unassignCustomerConfigForm.get(\'customerNamePattern\').hasError(\'pattern\')">\n          {{ \'tb.rulenode.customer-name-pattern-required\' | translate }}\n        </mat-error>\n        <mat-hint translate>tb.rulenode.customer-name-pattern-hint</mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class io extends T{get function(){return this.functionValue}set function(e){e&&this.functionValue!==e&&(this.functionValue=e,this.setupArgumentsFormGroup(!0))}constructor(e,t){super(e),this.store=e,this.fb=t,this.maxArgs=16,this.minArgs=1,this.displayArgumentName=!1,this.mathFunctionMap=Mn,this.ArgumentType=En,this.attributeScopeMap=Kn,this.argumentTypeMap=On,this.arguments=Object.values(En),this.attributeScope=Object.values(_n),this.propagateChange=null,this.valueChangeSubscription=[]}ngOnInit(){this.argumentsFormGroup=this.fb.group({arguments:this.fb.array([])}),this.valueChangeSubscription.push(this.argumentsFormGroup.valueChanges.subscribe((()=>{this.updateModel()}))),this.setupArgumentsFormGroup()}onDrop(e){const t=this.argumentsFormArray,n=t.at(e.previousIndex);t.removeAt(e.previousIndex),t.insert(e.currentIndex,n),this.updateArgumentNames()}get argumentsFormArray(){return this.argumentsFormGroup.get("arguments")}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.argumentsFormGroup.disable({emitEvent:!1}):(this.argumentsFormGroup.enable({emitEvent:!1}),this.argumentsFormArray.controls.forEach((e=>this.updateArgumentControlValidators(e))))}ngOnDestroy(){this.valueChangeSubscription.length&&this.valueChangeSubscription.forEach((e=>e.unsubscribe()))}writeValue(e){const t=[];e&&e.forEach(((e,n)=>{t.push(this.createArgumentControl(e,n))})),this.argumentsFormGroup.setControl("arguments",this.fb.array(t),{emitEvent:!1}),this.setupArgumentsFormGroup()}removeArgument(e){this.argumentsFormArray.removeAt(e),this.updateArgumentNames()}addArgument(e=!0){const t=this.argumentsFormArray,n=this.createArgumentControl(null,t.length);t.push(n,{emitEvent:e})}validate(e){return this.argumentsFormGroup.valid?null:{argumentsRequired:!0}}setupArgumentsFormGroup(e=!1){if(this.function&&(this.maxArgs=this.mathFunctionMap.get(this.function).maxArgs,this.minArgs=this.mathFunctionMap.get(this.function).minArgs,this.displayArgumentName=this.function===wn.CUSTOM),this.argumentsFormGroup){for(this.argumentsFormGroup.get("arguments").setValidators([K.minLength(this.minArgs),K.maxLength(this.maxArgs)]);this.argumentsFormArray.length>this.maxArgs;)this.removeArgument(this.maxArgs-1);for(;this.argumentsFormArray.length<this.minArgs;)this.addArgument(e);this.argumentsFormGroup.get("arguments").updateValueAndValidity({emitEvent:!1})}}createArgumentControl(e,t){const n=this.fb.group({type:[e?.type,[K.required]],key:[e?.key,[K.required]],name:[Bn[t],[K.required]],attributeScope:[e?.attributeScope??_n.SERVER_SCOPE,[K.required]],defaultValue:[e?.defaultValue?e?.defaultValue:null]});return this.updateArgumentControlValidators(n),this.valueChangeSubscription.push(n.get("type").valueChanges.subscribe((()=>{this.updateArgumentControlValidators(n),n.get("attributeScope").updateValueAndValidity({emitEvent:!1}),n.get("defaultValue").updateValueAndValidity({emitEvent:!1})}))),n}updateArgumentControlValidators(e){const t=e.get("type").value;t===En.ATTRIBUTE?e.get("attributeScope").enable({emitEvent:!1}):e.get("attributeScope").disable({emitEvent:!1}),t&&t!==En.CONSTANT?e.get("defaultValue").enable({emitEvent:!1}):e.get("defaultValue").disable({emitEvent:!1})}updateArgumentNames(){this.argumentsFormArray.controls.forEach(((e,t)=>{e.get("name").setValue(Bn[t])}))}updateModel(){const e=this.argumentsFormArray.value;e.length&&this.argumentsFormGroup.valid?this.propagateChange(e):this.propagateChange(null)}}e("ArgumentsMapConfigComponent",io),io.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:io,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),io.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:io,selector:"tb-arguments-map-config",inputs:{disabled:"disabled",function:"function"},providers:[{provide:j,useExisting:c((()=>io)),multi:!0},{provide:Q,useExisting:c((()=>io)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section fxLayout="column">\n\n  <div [ngClass]="{\'tb-readonly\': disabled}"\n       style="max-height: 500px; overflow: auto;">\n    <mat-list class="tb-drop-list arguments-list" cdkDropList cdkDropListOrientation="vertical"\n              [formGroup]="argumentsFormGroup"\n              (cdkDropListDropped)="onDrop($event)"\n              [cdkDropListDisabled]="disabled">\n      <mat-list-item *ngFor="let argumentControl of argumentsFormArray.controls; let $index = index"\n                     formArrayName="arguments"\n                     cdkDrag class="tb-argument tb-draggable"\n                     [cdkDragDisabled]="disabled"\n                     style="height: 100%">\n        <div fxFlex fxLayout="row" fxLayoutAlign="start center">\n          <button *ngIf="!disabled" mat-icon-button color="primary"\n                  cdkDragHandle\n                  class="tb-drag-handle handle"\n                  style="min-width: 40px; margin: 0"\n                  matTooltip="{{ \'action.drag\' | translate }}"\n                  matTooltipPosition="above">\n            <mat-icon>drag_handle</mat-icon>\n          </button>\n          <div fxFlex fxLAyout="row" fxLayoutAlign="start center" fxLayoutGap="16px">\n            <span *ngIf="displayArgumentName"\n                  style="padding: 0 10px; min-width: 20px;">{{argumentControl.get(\'name\').value}}.</span>\n            <div fxFlex fxLayout="column">\n              <mat-form-field class="mat-block">\n                <mat-label translate>tb.rulenode.argument-source-field-input</mat-label>\n                <mat-select [formControl]="argumentControl.get(\'type\')" required>\n                  <mat-select-trigger>\n                    {{ argumentTypeMap.get(argumentControl.get(\'type\').value)?.name | translate }}\n                  </mat-select-trigger>\n                  <mat-option *ngFor="let argument of arguments" [value]="argument"\n                              style="border-bottom: 1px solid #eee;">\n                    {{ argumentTypeMap.get(argument).name | translate }}\n                    <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n                      {{ argumentTypeMap.get(argument).description }}\n                    </small>\n                  </mat-option>\n                </mat-select>\n                <mat-error *ngIf="argumentControl.get(\'type\').hasError(\'required\')" translate>\n                  tb.rulenode.argument-source-field-input-required\n                </mat-error>\n              </mat-form-field>\n              <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n                <mat-form-field fxFlex="50" floatLabel="always" class="mat-block"\n                                *ngIf="argumentControl.get(\'type\').value && argumentControl.get(\'type\').value !== ArgumentType.CONSTANT">\n                  <mat-label translate>tb.rulenode.argument-key-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'key\')" matInput required/>\n                  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n                            color="primary"\n                            matTooltip="{{ \'tb.rulenode.math-templatization-tooltip\' | translate }}">\n                    help\n                  </mat-icon>\n                  <mat-error *ngIf="argumentControl.get(\'key\').hasError(\'required\')" translate>\n                    tb.rulenode.argument-key-field-input-required\n                  </mat-error>\n                </mat-form-field>\n                <mat-form-field fxFlex floatLabel="always" class="mat-block"\n                                *ngIf="argumentControl.get(\'type\').value === ArgumentType.CONSTANT">\n                  <mat-label translate>tb.rulenode.constant-value-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'key\')"\n                         matInput\n                         required\n                         step="1" min="0"\n                         type="number"/>\n                  <mat-error *ngIf="argumentControl.get(\'key\').hasError(\'required\')" translate>\n                    tb.rulenode.constant-value-field-input-required\n                  </mat-error>\n                </mat-form-field>\n                <mat-form-field *ngIf="argumentControl.get(\'type\').value && argumentControl.get(\'type\').value !== ArgumentType.CONSTANT"\n                                fxFlex="50" floatLabel="always" class="mat-block">\n                  <mat-label translate>tb.rulenode.default-value-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'defaultValue\')" matInput step="1" type="number"/>\n                </mat-form-field>\n              </div>\n              <mat-form-field *ngIf="argumentControl.get(\'type\').value === ArgumentType.ATTRIBUTE" class="mat-block">\n                <mat-label translate>tb.rulenode.attribute-scope-field-input</mat-label>\n                <mat-select required [formControl]="argumentControl.get(\'attributeScope\')">\n                  <mat-option *ngFor="let scope of attributeScope" [value]="scope">\n                    {{ attributeScopeMap.get(scope) | translate }}\n                  </mat-option>\n                </mat-select>\n                <mat-error *ngIf="argumentControl.get(\'attributeScope\').hasError(\'required\')" translate>\n                  tb.rulenode.attribute-scope-field-input-required\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <button *ngIf="!disabled" mat-icon-button color="primary" style="min-width: 40px;"\n                    (click)="removeArgument($index)"\n                    matTooltip="{{ \'action.remove\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>close</mat-icon>\n            </button>\n          </div>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div *ngIf="!argumentsFormArray.length">\n      <span translate fxLayoutAlign="center center"\n            class="tb-prompt">tb.rulenode.no-arguments-prompt</span>\n  </div>\n  <button mat-button mat-raised-button color="primary"\n          [disabled]="argumentsFormArray.length >= maxArgs"\n          (click)="addArgument()"\n          type="button"\n          matTooltipPosition="above">\n    <mat-icon>add</mat-icon>\n    {{ \'action.add\' | translate }}\n  </button>\n</section>\n',styles:[":host .mat-mdc-list-item.tb-argument{border:solid rgba(0,0,0,.25) 1px;border-radius:4px;padding:10px 0;margin-bottom:16px}:host .arguments-list{padding:0}\n"],dependencies:[{kind:"directive",type:W.NgClass,selector:"[ngClass]",inputs:["class","ngClass"]},{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"directive",type:le.MatSelectTrigger,selector:"mat-select-trigger"},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:Xe.MatList,selector:"mat-list",exportAs:["matList"]},{kind:"component",type:Xe.MatListItem,selector:"mat-list-item, a[mat-list-item], button[mat-list-item]",inputs:["activated"],exportAs:["matListItem"]},{kind:"directive",type:et.CdkDropList,selector:"[cdkDropList], cdk-drop-list",inputs:["cdkDropListConnectedTo","cdkDropListData","cdkDropListOrientation","id","cdkDropListLockAxis","cdkDropListDisabled","cdkDropListSortingDisabled","cdkDropListEnterPredicate","cdkDropListSortPredicate","cdkDropListAutoScrollDisabled","cdkDropListAutoScrollStep"],outputs:["cdkDropListDropped","cdkDropListEntered","cdkDropListExited","cdkDropListSorted"],exportAs:["cdkDropList"]},{kind:"directive",type:et.CdkDrag,selector:"[cdkDrag]",inputs:["cdkDragData","cdkDragLockAxis","cdkDragRootElement","cdkDragBoundary","cdkDragStartDelay","cdkDragFreeDragPosition","cdkDragDisabled","cdkDragConstrainPosition","cdkDragPreviewClass","cdkDragPreviewContainer"],outputs:["cdkDragStarted","cdkDragReleased","cdkDragEnded","cdkDragEntered","cdkDragExited","cdkDragDropped","cdkDragMoved"],exportAs:["cdkDrag"]},{kind:"directive",type:et.CdkDragHandle,selector:"[cdkDragHandle]",inputs:["cdkDragHandleDisabled"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:Ze.DefaultClassDirective,selector:"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]",inputs:["ngClass","ngClass.xs","ngClass.sm","ngClass.md","ngClass.lg","ngClass.xl","ngClass.lt-sm","ngClass.lt-md","ngClass.lt-lg","ngClass.lt-xl","ngClass.gt-xs","ngClass.gt-sm","ngClass.gt-md","ngClass.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormControlDirective,selector:"[formControl]",inputs:["formControl","disabled","ngModel"],outputs:["ngModelChange"],exportAs:["ngForm"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormArrayName,selector:"[formArrayName]",inputs:["formArrayName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:io,decorators:[{type:n,args:[{selector:"tb-arguments-map-config",providers:[{provide:j,useExisting:c((()=>io)),multi:!0},{provide:Q,useExisting:c((()=>io)),multi:!0}],template:'<section fxLayout="column">\n\n  <div [ngClass]="{\'tb-readonly\': disabled}"\n       style="max-height: 500px; overflow: auto;">\n    <mat-list class="tb-drop-list arguments-list" cdkDropList cdkDropListOrientation="vertical"\n              [formGroup]="argumentsFormGroup"\n              (cdkDropListDropped)="onDrop($event)"\n              [cdkDropListDisabled]="disabled">\n      <mat-list-item *ngFor="let argumentControl of argumentsFormArray.controls; let $index = index"\n                     formArrayName="arguments"\n                     cdkDrag class="tb-argument tb-draggable"\n                     [cdkDragDisabled]="disabled"\n                     style="height: 100%">\n        <div fxFlex fxLayout="row" fxLayoutAlign="start center">\n          <button *ngIf="!disabled" mat-icon-button color="primary"\n                  cdkDragHandle\n                  class="tb-drag-handle handle"\n                  style="min-width: 40px; margin: 0"\n                  matTooltip="{{ \'action.drag\' | translate }}"\n                  matTooltipPosition="above">\n            <mat-icon>drag_handle</mat-icon>\n          </button>\n          <div fxFlex fxLAyout="row" fxLayoutAlign="start center" fxLayoutGap="16px">\n            <span *ngIf="displayArgumentName"\n                  style="padding: 0 10px; min-width: 20px;">{{argumentControl.get(\'name\').value}}.</span>\n            <div fxFlex fxLayout="column">\n              <mat-form-field class="mat-block">\n                <mat-label translate>tb.rulenode.argument-source-field-input</mat-label>\n                <mat-select [formControl]="argumentControl.get(\'type\')" required>\n                  <mat-select-trigger>\n                    {{ argumentTypeMap.get(argumentControl.get(\'type\').value)?.name | translate }}\n                  </mat-select-trigger>\n                  <mat-option *ngFor="let argument of arguments" [value]="argument"\n                              style="border-bottom: 1px solid #eee;">\n                    {{ argumentTypeMap.get(argument).name | translate }}\n                    <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n                      {{ argumentTypeMap.get(argument).description }}\n                    </small>\n                  </mat-option>\n                </mat-select>\n                <mat-error *ngIf="argumentControl.get(\'type\').hasError(\'required\')" translate>\n                  tb.rulenode.argument-source-field-input-required\n                </mat-error>\n              </mat-form-field>\n              <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n                <mat-form-field fxFlex="50" floatLabel="always" class="mat-block"\n                                *ngIf="argumentControl.get(\'type\').value && argumentControl.get(\'type\').value !== ArgumentType.CONSTANT">\n                  <mat-label translate>tb.rulenode.argument-key-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'key\')" matInput required/>\n                  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n                            color="primary"\n                            matTooltip="{{ \'tb.rulenode.math-templatization-tooltip\' | translate }}">\n                    help\n                  </mat-icon>\n                  <mat-error *ngIf="argumentControl.get(\'key\').hasError(\'required\')" translate>\n                    tb.rulenode.argument-key-field-input-required\n                  </mat-error>\n                </mat-form-field>\n                <mat-form-field fxFlex floatLabel="always" class="mat-block"\n                                *ngIf="argumentControl.get(\'type\').value === ArgumentType.CONSTANT">\n                  <mat-label translate>tb.rulenode.constant-value-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'key\')"\n                         matInput\n                         required\n                         step="1" min="0"\n                         type="number"/>\n                  <mat-error *ngIf="argumentControl.get(\'key\').hasError(\'required\')" translate>\n                    tb.rulenode.constant-value-field-input-required\n                  </mat-error>\n                </mat-form-field>\n                <mat-form-field *ngIf="argumentControl.get(\'type\').value && argumentControl.get(\'type\').value !== ArgumentType.CONSTANT"\n                                fxFlex="50" floatLabel="always" class="mat-block">\n                  <mat-label translate>tb.rulenode.default-value-field-input</mat-label>\n                  <input [formControl]="argumentControl.get(\'defaultValue\')" matInput step="1" type="number"/>\n                </mat-form-field>\n              </div>\n              <mat-form-field *ngIf="argumentControl.get(\'type\').value === ArgumentType.ATTRIBUTE" class="mat-block">\n                <mat-label translate>tb.rulenode.attribute-scope-field-input</mat-label>\n                <mat-select required [formControl]="argumentControl.get(\'attributeScope\')">\n                  <mat-option *ngFor="let scope of attributeScope" [value]="scope">\n                    {{ attributeScopeMap.get(scope) | translate }}\n                  </mat-option>\n                </mat-select>\n                <mat-error *ngIf="argumentControl.get(\'attributeScope\').hasError(\'required\')" translate>\n                  tb.rulenode.attribute-scope-field-input-required\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <button *ngIf="!disabled" mat-icon-button color="primary" style="min-width: 40px;"\n                    (click)="removeArgument($index)"\n                    matTooltip="{{ \'action.remove\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>close</mat-icon>\n            </button>\n          </div>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div *ngIf="!argumentsFormArray.length">\n      <span translate fxLayoutAlign="center center"\n            class="tb-prompt">tb.rulenode.no-arguments-prompt</span>\n  </div>\n  <button mat-button mat-raised-button color="primary"\n          [disabled]="argumentsFormArray.length >= maxArgs"\n          (click)="addArgument()"\n          type="button"\n          matTooltipPosition="above">\n    <mat-icon>add</mat-icon>\n    {{ \'action.add\' | translate }}\n  </button>\n</section>\n',styles:[":host .mat-mdc-list-item.tb-argument{border:solid rgba(0,0,0,.25) 1px;border-radius:4px;padding:10px 0;margin-bottom:16px}:host .arguments-list{padding:0}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],function:[{type:m}]}});class lo extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t,n,o){super(e),this.store=e,this.translate=t,this.injector=n,this.fb=o,this.searchText="",this.dirty=!1,this.mathOperation=[...Mn.values()],this.propagateChange=null}ngOnInit(){this.mathFunctionForm=this.fb.group({operation:[""]}),this.filteredOptions=this.mathFunctionForm.get("operation").valueChanges.pipe(Pe((e=>{let t;t="string"==typeof e&&wn[e]?wn[e]:null,this.updateView(t)})),Re((e=>(this.searchText=e||"",e?this._filter(e):this.mathOperation.slice()))))}_filter(e){const t=e.toLowerCase();return this.mathOperation.filter((e=>e.name.toLowerCase().includes(t)||e.value.toLowerCase().includes(t)))}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.mathFunctionForm.disable({emitEvent:!1}):this.mathFunctionForm.enable({emitEvent:!1})}mathFunctionDisplayFn(e){if(e){const t=Mn.get(e);return t.value+" | "+t.name}return""}writeValue(e){this.modelValue=e,this.mathFunctionForm.get("operation").setValue(e,{emitEvent:!1}),this.dirty=!0}updateView(e){this.modelValue!==e&&(this.modelValue=e,this.propagateChange(this.modelValue))}onFocus(){this.dirty&&(this.mathFunctionForm.get("operation").updateValueAndValidity({onlySelf:!0}),this.dirty=!1)}clear(){this.mathFunctionForm.get("operation").patchValue(""),setTimeout((()=>{this.operationInput.nativeElement.blur(),this.operationInput.nativeElement.focus()}),0)}}e("MathFunctionAutocompleteComponent",lo),lo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:lo,deps:[{token:_.Store},{token:re.TranslateService},{token:t.Injector},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),lo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:lo,selector:"tb-math-function-autocomplete",inputs:{required:"required",disabled:"disabled"},providers:[{provide:j,useExisting:c((()=>lo)),multi:!0}],viewQueries:[{propertyName:"operationInput",first:!0,predicate:["operationInput"],descendants:!0,static:!0}],usesInheritance:!0,ngImport:t,template:'<mat-form-field [formGroup]="mathFunctionForm" class="mat-block">\n  <mat-label translate>tb.rulenode.functions-field-input</mat-label>\n  <input [required]="required"\n         (focusin)="onFocus()"\n         type="text"\n         #operationInput matInput\n         formControlName="operation"\n         [matAutocomplete]="auto">\n  <button *ngIf="mathFunctionForm.get(\'operation\').value"\n          type="button"\n          matSuffix mat-icon-button aria-label="Clear"\n          (click)="clear()">\n    <mat-icon class="material-icons">close</mat-icon>\n  </button>\n  <mat-autocomplete #auto="matAutocomplete" class="tb-autocomplete" [displayWith]="mathFunctionDisplayFn">\n    <mat-option *ngFor="let option of filteredOptions | async" [value]="option.value">\n      <span [innerHTML]="option.value + \' | \' + option.name | highlight:searchText"></span>\n      <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n        {{ option.description }}\n      </small>\n    </mat-option>\n    <mat-option *ngIf="!(filteredOptions | async)?.length" [value]="null">\n      <span translate>tb.rulenode.no-option-found</span>\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:tt.MatAutocomplete,selector:"mat-autocomplete",inputs:["disableRipple","hideSingleSelectionIndicator"],exportAs:["matAutocomplete"]},{kind:"directive",type:tt.MatAutocompleteTrigger,selector:"input[matAutocomplete], textarea[matAutocomplete]",exportAs:["matAutocompleteTrigger"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:nt.HighlightPipe,name:"highlight"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:lo,decorators:[{type:n,args:[{selector:"tb-math-function-autocomplete",providers:[{provide:j,useExisting:c((()=>lo)),multi:!0}],template:'<mat-form-field [formGroup]="mathFunctionForm" class="mat-block">\n  <mat-label translate>tb.rulenode.functions-field-input</mat-label>\n  <input [required]="required"\n         (focusin)="onFocus()"\n         type="text"\n         #operationInput matInput\n         formControlName="operation"\n         [matAutocomplete]="auto">\n  <button *ngIf="mathFunctionForm.get(\'operation\').value"\n          type="button"\n          matSuffix mat-icon-button aria-label="Clear"\n          (click)="clear()">\n    <mat-icon class="material-icons">close</mat-icon>\n  </button>\n  <mat-autocomplete #auto="matAutocomplete" class="tb-autocomplete" [displayWith]="mathFunctionDisplayFn">\n    <mat-option *ngFor="let option of filteredOptions | async" [value]="option.value">\n      <span [innerHTML]="option.value + \' | \' + option.name | highlight:searchText"></span>\n      <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n        {{ option.description }}\n      </small>\n    </mat-option>\n    <mat-option *ngIf="!(filteredOptions | async)?.length" [value]="null">\n      <span translate>tb.rulenode.no-option-found</span>\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:t.Injector},{type:H.UntypedFormBuilder}]},propDecorators:{required:[{type:m}],disabled:[{type:m}],operationInput:[{type:u,args:["operationInput",{static:!0}]}]}});class so extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.MathFunction=wn,this.ArgumentTypeResult=Gn,this.argumentTypeResultMap=Un,this.attributeScopeMap=Kn,this.argumentsResult=Object.values(Gn),this.attributeScopeResult=Object.values(Hn)}configForm(){return this.mathFunctionConfigForm}onConfigurationSet(e){this.mathFunctionConfigForm=this.fb.group({operation:[e?e.operation:null,[K.required]],arguments:[e?e.arguments:null,[K.required]],customFunction:[e?e.customFunction:"",[K.required]],result:this.fb.group({type:[e?e.result.type:null,[K.required]],attributeScope:[e?e.result.attributeScope:null,[K.required]],key:[e?e.result.key:"",[K.required]],resultValuePrecision:[e?e.result.resultValuePrecision:0],addToBody:[!!e&&e.result.addToBody],addToMetadata:[!!e&&e.result.addToMetadata]})})}updateValidators(e){const t=this.mathFunctionConfigForm.get("operation").value,n=this.mathFunctionConfigForm.get("result.type").value;t===wn.CUSTOM?(this.mathFunctionConfigForm.get("customFunction").enable({emitEvent:!1}),null===this.mathFunctionConfigForm.get("customFunction").value&&this.mathFunctionConfigForm.get("customFunction").patchValue("(x - 32) / 1.8",{emitEvent:!1})):this.mathFunctionConfigForm.get("customFunction").disable({emitEvent:e}),n===Gn.ATTRIBUTE?this.mathFunctionConfigForm.get("result.attributeScope").enable({emitEvent:!1}):this.mathFunctionConfigForm.get("result.attributeScope").disable({emitEvent:!1}),this.mathFunctionConfigForm.get("customFunction").updateValueAndValidity({emitEvent:e}),this.mathFunctionConfigForm.get("result.attributeScope").updateValueAndValidity({emitEvent:e})}validatorTriggers(){return["operation","result.type"]}}e("MathFunctionConfigComponent",so),so.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:so,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),so.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:so,selector:"tb-action-node-math-function-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="mathFunctionConfigForm" fxLayout="column">\n  <tb-math-function-autocomplete\n    fxFlex="30" fxFlex.md fxFlex.xs\n    required\n    formControlName="operation">\n  </tb-math-function-autocomplete>\n  <fieldset class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title" translate>tb.rulenode.argument-tile</legend>\n    <tb-arguments-map-config formControlName="arguments"\n                             [function]="mathFunctionConfigForm.get(\'operation\').value">\n    </tb-arguments-map-config>\n  </fieldset>\n  <fieldset *ngIf="mathFunctionConfigForm.get(\'operation\').value === MathFunction.CUSTOM"\n            class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title">{{\'tb.rulenode.custom-expression-field-input\' | translate }} *</legend>\n    <mat-form-field fxFlex class="mat-block no-margin-top" subscriptSizing="dynamic">\n      <input matInput formControlName="customFunction" required/>\n      <mat-error *ngIf="mathFunctionConfigForm.get(\'customFunction\').hasError(\'required\')" translate>\n        tb.rulenode.custom-expression-field-input-required\n      </mat-error>\n      <mat-hint translate>tb.rulenode.custom-expression-field-input-hint</mat-hint>\n    </mat-form-field>\n  </fieldset>\n  <fieldset class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title" translate>tb.rulenode.result-title</legend>\n    <div formGroupName="result">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.type-field-input</mat-label>\n        <mat-select formControlName="type" required>\n          <mat-select-trigger>\n            {{ argumentTypeResultMap.get(mathFunctionConfigForm.get(\'result.type\').value)?.name | translate }}\n          </mat-select-trigger>\n          <mat-option *ngFor="let argument of argumentsResult" [value]="argument"\n                      style="border-bottom: 1px solid #eee;">\n            {{ argumentTypeResultMap.get(argument).name | translate }}\n            <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n              {{ argumentTypeResultMap.get(argument).description }}\n            </small>\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="mathFunctionConfigForm.get(\'result.type\').hasError(\'required\')" translate>\n          tb.rulenode.type-field-input-required\n        </mat-error>\n      </mat-form-field>\n      <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n        <mat-form-field fxFlex class="mat-block" *ngIf="mathFunctionConfigForm.get(\'result\').get(\'type\').value === ArgumentTypeResult.ATTRIBUTE">\n          <mat-label translate>tb.rulenode.attribute-scope-field-input</mat-label>\n          <mat-select required formControlName="attributeScope">\n            <mat-option *ngFor="let scope of attributeScopeResult" [value]="scope">\n              {{ attributeScopeMap.get(scope) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex floatLabel="always" class="mat-block">\n          <mat-label translate>tb.rulenode.key-field-input</mat-label>\n          <input matInput formControlName="key" required/>\n          <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n                    color="primary"\n                    matTooltip="{{ \'tb.rulenode.math-templatization-tooltip\' | translate }}">help</mat-icon>\n          <mat-error *ngIf="mathFunctionConfigForm.get(\'result.key\').hasError(\'required\')" translate>\n            tb.rulenode.key-field-input-required\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n        <mat-form-field fxFlex floatLabel="always" class="mat-block" subscriptSizing="dynamic">\n          <mat-label translate>tb.rulenode.number-floating-point-field-input</mat-label>\n          <input formControlName="resultValuePrecision"\n                 matInput\n                 step="1" min="0"\n                 type="number"/>\n          <mat-hint [innerHTML]="\'tb.rulenode.number-floating-point-field-input-hint\' | translate | safe: \'html\'"></mat-hint>\n        </mat-form-field>\n      </div>\n      <div *ngIf="[ArgumentTypeResult.ATTRIBUTE, ArgumentTypeResult.TIME_SERIES].includes(mathFunctionConfigForm.get(\'result\').get(\'type\').value)"\n           fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutAlign="start" fxLayoutGap.gt-xs="16px" style="padding-top: 16px;">\n        <mat-checkbox formControlName="addToBody">\n          {{\'tb.rulenode.add-to-message-field-input\' | translate }}\n        </mat-checkbox>\n        <mat-checkbox formControlName="addToMetadata">\n          {{\'tb.rulenode.add-to-metadata-field-input\' | translate}}\n        </mat-checkbox>\n      </div>\n    </div>\n  </fieldset>\n</section>\n',styles:[":host ::ng-deep .fields-group{padding:0 16px 8px;margin:10px 0;border:1px groove rgba(0,0,0,.25);border-radius:4px}:host ::ng-deep .fields-group .mat-mdc-form-field .mat-mdc-form-field-infix{width:100%}:host ::ng-deep .fields-group legend{color:#000000b3;width:-moz-fit-content;width:fit-content}:host ::ng-deep .fields-group legend+*{display:block}:host ::ng-deep .fields-group legend+*.no-margin-top{margin-top:0}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"directive",type:le.MatSelectTrigger,selector:"mat-select-trigger"},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:io,selector:"tb-arguments-map-config",inputs:["disabled","function"]},{kind:"component",type:lo,selector:"tb-math-function-autocomplete",inputs:["required","disabled"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:so,decorators:[{type:n,args:[{selector:"tb-action-node-math-function-config",template:'<section [formGroup]="mathFunctionConfigForm" fxLayout="column">\n  <tb-math-function-autocomplete\n    fxFlex="30" fxFlex.md fxFlex.xs\n    required\n    formControlName="operation">\n  </tb-math-function-autocomplete>\n  <fieldset class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title" translate>tb.rulenode.argument-tile</legend>\n    <tb-arguments-map-config formControlName="arguments"\n                             [function]="mathFunctionConfigForm.get(\'operation\').value">\n    </tb-arguments-map-config>\n  </fieldset>\n  <fieldset *ngIf="mathFunctionConfigForm.get(\'operation\').value === MathFunction.CUSTOM"\n            class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title">{{\'tb.rulenode.custom-expression-field-input\' | translate }} *</legend>\n    <mat-form-field fxFlex class="mat-block no-margin-top" subscriptSizing="dynamic">\n      <input matInput formControlName="customFunction" required/>\n      <mat-error *ngIf="mathFunctionConfigForm.get(\'customFunction\').hasError(\'required\')" translate>\n        tb.rulenode.custom-expression-field-input-required\n      </mat-error>\n      <mat-hint translate>tb.rulenode.custom-expression-field-input-hint</mat-hint>\n    </mat-form-field>\n  </fieldset>\n  <fieldset class="fields-group" fxLayout="column" fxLayoutGap="8px">\n    <legend class="group-title" translate>tb.rulenode.result-title</legend>\n    <div formGroupName="result">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.type-field-input</mat-label>\n        <mat-select formControlName="type" required>\n          <mat-select-trigger>\n            {{ argumentTypeResultMap.get(mathFunctionConfigForm.get(\'result.type\').value)?.name | translate }}\n          </mat-select-trigger>\n          <mat-option *ngFor="let argument of argumentsResult" [value]="argument"\n                      style="border-bottom: 1px solid #eee;">\n            {{ argumentTypeResultMap.get(argument).name | translate }}\n            <small style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n              {{ argumentTypeResultMap.get(argument).description }}\n            </small>\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="mathFunctionConfigForm.get(\'result.type\').hasError(\'required\')" translate>\n          tb.rulenode.type-field-input-required\n        </mat-error>\n      </mat-form-field>\n      <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n        <mat-form-field fxFlex class="mat-block" *ngIf="mathFunctionConfigForm.get(\'result\').get(\'type\').value === ArgumentTypeResult.ATTRIBUTE">\n          <mat-label translate>tb.rulenode.attribute-scope-field-input</mat-label>\n          <mat-select required formControlName="attributeScope">\n            <mat-option *ngFor="let scope of attributeScopeResult" [value]="scope">\n              {{ attributeScopeMap.get(scope) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex floatLabel="always" class="mat-block">\n          <mat-label translate>tb.rulenode.key-field-input</mat-label>\n          <input matInput formControlName="key" required/>\n          <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n                    color="primary"\n                    matTooltip="{{ \'tb.rulenode.math-templatization-tooltip\' | translate }}">help</mat-icon>\n          <mat-error *ngIf="mathFunctionConfigForm.get(\'result.key\').hasError(\'required\')" translate>\n            tb.rulenode.key-field-input-required\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutGap.gt-xs="16px">\n        <mat-form-field fxFlex floatLabel="always" class="mat-block" subscriptSizing="dynamic">\n          <mat-label translate>tb.rulenode.number-floating-point-field-input</mat-label>\n          <input formControlName="resultValuePrecision"\n                 matInput\n                 step="1" min="0"\n                 type="number"/>\n          <mat-hint [innerHTML]="\'tb.rulenode.number-floating-point-field-input-hint\' | translate | safe: \'html\'"></mat-hint>\n        </mat-form-field>\n      </div>\n      <div *ngIf="[ArgumentTypeResult.ATTRIBUTE, ArgumentTypeResult.TIME_SERIES].includes(mathFunctionConfigForm.get(\'result\').get(\'type\').value)"\n           fxFlex fxLayout="row" fxLayout.xs="column" fxLayoutAlign="start" fxLayoutGap.gt-xs="16px" style="padding-top: 16px;">\n        <mat-checkbox formControlName="addToBody">\n          {{\'tb.rulenode.add-to-message-field-input\' | translate }}\n        </mat-checkbox>\n        <mat-checkbox formControlName="addToMetadata">\n          {{\'tb.rulenode.add-to-metadata-field-input\' | translate}}\n        </mat-checkbox>\n      </div>\n    </div>\n  </fieldset>\n</section>\n',styles:[":host ::ng-deep .fields-group{padding:0 16px 8px;margin:10px 0;border:1px groove rgba(0,0,0,.25);border-radius:4px}:host ::ng-deep .fields-group .mat-mdc-form-field .mat-mdc-form-field-infix{width:100%}:host ::ng-deep .fields-group legend{color:#000000b3;width:-moz-fit-content;width:fit-content}:host ::ng-deep .fields-group legend+*{display:block}:host ::ng-deep .fields-group legend+*.no-margin-top{margin-top:0}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class mo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.addToGroupConfigForm}onConfigurationSet(e){this.addToGroupConfigForm=this.fb.group({groupNamePattern:[e?e.groupNamePattern:null,[K.required,K.pattern(/.*\S.*/)]],createGroupIfNotExists:[!!e&&e.createGroupIfNotExists,[]],removeFromCurrentGroups:[!!e&&e.removeFromCurrentGroups,[]],groupCacheExpiration:[e?e.customerCacheExpiration:null,[K.required,K.min(0)]]})}prepareOutputConfig(e){return e.groupNamePattern=e.groupNamePattern.trim(),e}}e("AddToGroupConfigComponent",mo),mo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:mo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),mo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:mo,selector:"tb-action-node-add-to-group-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="addToGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\') ||\n                      addToGroupConfigForm.get(\'groupNamePattern\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="createGroupIfNotExists">\n    {{ \'tb.rulenode.create-group-if-not-exists\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox fxFlex formControlName="removeFromCurrentGroups">\n    {{ \'tb.rulenode.remove-from-current-groups\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.group-cache-expiration-hint</mat-hint>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:mo,decorators:[{type:n,args:[{selector:"tb-action-node-add-to-group-config",template:'<section [formGroup]="addToGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\') ||\n                      addToGroupConfigForm.get(\'groupNamePattern\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="createGroupIfNotExists">\n    {{ \'tb.rulenode.create-group-if-not-exists\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox fxFlex formControlName="removeFromCurrentGroups">\n    {{ \'tb.rulenode.remove-from-current-groups\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="addToGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.group-cache-expiration-hint</mat-hint>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class po extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.ownerType=yn,this.ownerTypes=Object.keys(yn),this.ownerTypeTranslationsMap=xn}configForm(){return this.changeOwnerConfigForm}onConfigurationSet(e){this.changeOwnerConfigForm=this.fb.group({ownerType:[e?e.ownerType:null,[K.required]],ownerNamePattern:[e?e.ownerNamePattern:null,[]],createOwnerIfNotExists:[!!e&&e.createOwnerIfNotExists,[]],ownerCacheExpiration:[e?e.ownerCacheExpiration:null,[]]})}validatorTriggers(){return["ownerType"]}updateValidators(e){this.changeOwnerConfigForm.get("ownerType").value===yn.CUSTOMER?(this.changeOwnerConfigForm.get("ownerNamePattern").setValidators([K.required,K.pattern(/.*\S.*/)]),this.changeOwnerConfigForm.get("ownerCacheExpiration").setValidators([K.required,K.min(0)])):(this.changeOwnerConfigForm.get("ownerNamePattern").setValidators([]),this.changeOwnerConfigForm.get("ownerCacheExpiration").setValidators([])),this.changeOwnerConfigForm.get("ownerNamePattern").updateValueAndValidity({emitEvent:e}),this.changeOwnerConfigForm.get("ownerCacheExpiration").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.ownerNamePattern=e.ownerNamePattern?e.ownerNamePattern.trim():null,e}}e("ChangeOwnerConfigComponent",po),po.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:po,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),po.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:po,selector:"tb-action-node-change-owner-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="changeOwnerConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.owner-type</mat-label>\n    <mat-select formControlName="ownerType" required>\n      <mat-option *ngFor="let ownerType of ownerTypes" [value]="ownerType">\n        {{ ownerTypeTranslationsMap.get(ownerType) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <section fxLayout="column" *ngIf="changeOwnerConfigForm.get(\'ownerType\').value === ownerType.CUSTOMER">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.owner-name-pattern</mat-label>\n      <input required matInput formControlName="ownerNamePattern">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerNamePattern\').hasError(\'required\') ||\n                        changeOwnerConfigForm.get(\'ownerNamePattern\').hasError(\'pattern\')">\n        {{ \'tb.rulenode.owner-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n    <mat-checkbox fxFlex formControlName="createOwnerIfNotExists">\n      {{ \'tb.rulenode.create-owner-if-not-exists\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.owner-cache-expiration</mat-label>\n      <input required type="number" min="0" step="1" matInput formControlName="ownerCacheExpiration">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'required\')">\n        {{ \'tb.rulenode.owner-cache-expiration-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'min\')">\n        {{ \'tb.rulenode.owner-cache-expiration-range\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.owner-cache-expiration-hint</mat-hint>\n    </mat-form-field>\n  </section>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:po,decorators:[{type:n,args:[{selector:"tb-action-node-change-owner-config",template:'<section [formGroup]="changeOwnerConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.owner-type</mat-label>\n    <mat-select formControlName="ownerType" required>\n      <mat-option *ngFor="let ownerType of ownerTypes" [value]="ownerType">\n        {{ ownerTypeTranslationsMap.get(ownerType) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <section fxLayout="column" *ngIf="changeOwnerConfigForm.get(\'ownerType\').value === ownerType.CUSTOMER">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.owner-name-pattern</mat-label>\n      <input required matInput formControlName="ownerNamePattern">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerNamePattern\').hasError(\'required\') ||\n                        changeOwnerConfigForm.get(\'ownerNamePattern\').hasError(\'pattern\')">\n        {{ \'tb.rulenode.owner-name-pattern-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n    <mat-checkbox fxFlex formControlName="createOwnerIfNotExists">\n      {{ \'tb.rulenode.create-owner-if-not-exists\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n      <mat-label translate>tb.rulenode.owner-cache-expiration</mat-label>\n      <input required type="number" min="0" step="1" matInput formControlName="ownerCacheExpiration">\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'required\')">\n        {{ \'tb.rulenode.owner-cache-expiration-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="changeOwnerConfigForm.get(\'ownerCacheExpiration\').hasError(\'min\')">\n        {{ \'tb.rulenode.owner-cache-expiration-range\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.owner-cache-expiration-hint</mat-hint>\n    </mat-form-field>\n  </section>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class uo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.generateReportConfigForm}onConfigurationSet(e){this.generateReportConfigForm=this.fb.group({useSystemReportsServer:[!!e&&e.useSystemReportsServer,[]],reportsServerEndpointUrl:[e?e.reportsServerEndpointUrl:null,[]],useReportConfigFromMessage:[!!e&&e.useReportConfigFromMessage,[]],reportConfig:[e?e.reportConfig:null,[]]})}validatorTriggers(){return["useSystemReportsServer","useReportConfigFromMessage"]}updateValidators(e){const t=this.generateReportConfigForm.get("useSystemReportsServer").value,n=this.generateReportConfigForm.get("useReportConfigFromMessage").value;if(e){const e=this.generateReportConfigForm.get("reportsServerEndpointUrl").value;t?this.generateReportConfigForm.get("reportsServerEndpointUrl").reset(null,{emitEvent:!1}):e&&e.length||this.generateReportConfigForm.get("reportsServerEndpointUrl").reset("http://localhost:8383",{emitEvent:!1})}t?this.generateReportConfigForm.get("reportsServerEndpointUrl").setValidators([]):this.generateReportConfigForm.get("reportsServerEndpointUrl").setValidators([K.required]),n?this.generateReportConfigForm.get("reportConfig").setValidators([]):this.generateReportConfigForm.get("reportConfig").setValidators([K.required]),this.generateReportConfigForm.get("reportsServerEndpointUrl").updateValueAndValidity({emitEvent:e}),this.generateReportConfigForm.get("reportConfig").updateValueAndValidity({emitEvent:e})}}e("GenerateReportConfigComponent",uo),uo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:uo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),uo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:uo,selector:"tb-action-node-generate-report-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="generateReportConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="useSystemReportsServer">\n    {{ \'tb.rulenode.use-system-reports-server\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" *ngIf="!generateReportConfigForm.get(\'useSystemReportsServer\').value">\n    <mat-label translate>tb.rulenode.reports-server-endpoint-url</mat-label>\n    <input required matInput formControlName="reportsServerEndpointUrl">\n    <mat-error *ngIf="generateReportConfigForm.get(\'reportsServerEndpointUrl\').hasError(\'required\')">\n      {{ \'tb.rulenode.reports-server-endpoint-url-is-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="useReportConfigFromMessage">\n    {{ \'tb.rulenode.use-report-config-from-message\' | translate }}\n  </mat-checkbox>\n  <tb-report-config\n    *ngIf="!generateReportConfigForm.get(\'useReportConfigFromMessage\').value"\n    formControlName="reportConfig"\n    [reportsServerEndpointUrl]="generateReportConfigForm.get(\'reportsServerEndpointUrl\').value">\n  </tb-report-config>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ot.ReportConfigComponent,selector:"tb-report-config",inputs:["reportsServerEndpointUrl","disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:uo,decorators:[{type:n,args:[{selector:"tb-action-node-generate-report-config",template:'<section [formGroup]="generateReportConfigForm" fxLayout="column">\n  <mat-checkbox fxFlex formControlName="useSystemReportsServer">\n    {{ \'tb.rulenode.use-system-reports-server\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block" *ngIf="!generateReportConfigForm.get(\'useSystemReportsServer\').value">\n    <mat-label translate>tb.rulenode.reports-server-endpoint-url</mat-label>\n    <input required matInput formControlName="reportsServerEndpointUrl">\n    <mat-error *ngIf="generateReportConfigForm.get(\'reportsServerEndpointUrl\').hasError(\'required\')">\n      {{ \'tb.rulenode.reports-server-endpoint-url-is-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-checkbox fxFlex formControlName="useReportConfigFromMessage">\n    {{ \'tb.rulenode.use-report-config-from-message\' | translate }}\n  </mat-checkbox>\n  <tb-report-config\n    *ngIf="!generateReportConfigForm.get(\'useReportConfigFromMessage\').value"\n    formControlName="reportConfig"\n    [reportsServerEndpointUrl]="generateReportConfigForm.get(\'reportsServerEndpointUrl\').value">\n  </tb-report-config>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class co extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.entityType=C}configForm(){return this.integrationDownlinkConfigForm}onConfigurationSet(e){this.integrationDownlinkConfigForm=this.fb.group({integrationId:[e?e.integrationId:null,[K.required]]})}}e("IntegrationDownlinkConfigComponent",co),co.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:co,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),co.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:co,selector:"tb-action-node-integration-downlink-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="integrationDownlinkConfigForm" fxLayout="column">\n  <tb-entity-autocomplete\n    required\n    [entityType]="entityType.INTEGRATION"\n    [entitySubtype]="ruleChainType"\n    formControlName="integrationId">\n  </tb-entity-autocomplete>\n</section>\n',dependencies:[{kind:"component",type:rt.EntityAutocompleteComponent,selector:"tb-entity-autocomplete",inputs:["entityType","entitySubtype","excludeEntityIds","labelText","requiredText","useFullEntityId","appearance","required","disabled"],outputs:["entityChanged"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:co,decorators:[{type:n,args:[{selector:"tb-action-node-integration-downlink-config",template:'<section [formGroup]="integrationDownlinkConfigForm" fxLayout="column">\n  <tb-entity-autocomplete\n    required\n    [entityType]="entityType.INTEGRATION"\n    [entitySubtype]="ruleChainType"\n    formControlName="integrationId">\n  </tb-entity-autocomplete>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class go extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.removeFromGroupConfigForm}onConfigurationSet(e){this.removeFromGroupConfigForm=this.fb.group({groupNamePattern:[e?e.groupNamePattern:null,[K.required,K.pattern(/.*\S.*/)]],groupCacheExpiration:[e?e.groupCacheExpiration:null,[K.required,K.min(0)]]})}prepareOutputConfig(e){return e.groupNamePattern=e.groupNamePattern.trim(),e}}e("RemoveFromGroupConfigComponent",go),go.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:go,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),go.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:go,selector:"tb-action-node-remove-from-group-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="removeFromGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\') ||\n                      removeFromGroupConfigForm.get(\'groupNamePattern\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.group-cache-expiration-hint</mat-hint>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:go,decorators:[{type:n,args:[{selector:"tb-action-node-remove-from-group-config",template:'<section [formGroup]="removeFromGroupConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-name-pattern</mat-label>\n    <input required matInput formControlName="groupNamePattern">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupNamePattern\').hasError(\'required\') ||\n                      removeFromGroupConfigForm.get(\'groupNamePattern\').hasError(\'pattern\')">\n      {{ \'tb.rulenode.group-name-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.group-cache-expiration</mat-label>\n    <input required type="number" min="0" step="1" matInput formControlName="groupCacheExpiration">\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'required\')">\n      {{ \'tb.rulenode.group-cache-expiration-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="removeFromGroupConfigForm.get(\'groupCacheExpiration\').hasError(\'min\')">\n      {{ \'tb.rulenode.group-cache-expiration-range\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.group-cache-expiration-hint</mat-hint>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class fo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.sendRestApiCallReplyConfigForm}onConfigurationSet(e){this.sendRestApiCallReplyConfigForm=this.fb.group({requestIdMetaDataAttribute:[e?e.requestIdMetaDataAttribute:null,[]],serviceIdMetaDataAttribute:[e?e.serviceIdMetaDataAttribute:null,[]]})}}e("SendRestApiCallReplyConfigComponent",fo),fo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:fo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),fo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:fo,selector:"tb-action-node-send-rest-api-call-reply-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="sendRestApiCallReplyConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.reply-routing-configuration</div>\n  <tb-example-hint [hintText]="\'tb.rulenode.reply-routing-configuration-hint\'">\n  </tb-example-hint>\n  <div class="tb-form-row no-border no-padding tb-standard-fields column-xs">\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.service-id-metadata-attribute</mat-label>\n      <input matInput formControlName="serviceIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n      <input matInput formControlName="requestIdMetaDataAttribute">\n    </mat-form-field>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:fo,decorators:[{type:n,args:[{selector:"tb-action-node-send-rest-api-call-reply-config",template:'<section [formGroup]="sendRestApiCallReplyConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.reply-routing-configuration</div>\n  <tb-example-hint [hintText]="\'tb.rulenode.reply-routing-configuration-hint\'">\n  </tb-example-hint>\n  <div class="tb-form-row no-border no-padding tb-standard-fields column-xs">\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.service-id-metadata-attribute</mat-label>\n      <input matInput formControlName="serviceIdMetaDataAttribute">\n    </mat-form-field>\n    <mat-form-field class="flex">\n      <mat-label translate>tb.rulenode.request-id-metadata-attribute</mat-label>\n      <input matInput formControlName="requestIdMetaDataAttribute">\n    </mat-form-field>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class yo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.attributeScopeMap=f,this.attributeScopes=Object.keys(f),this.telemetryTypeTranslationsMap=y,this.separatorKeysCodes=[Ae,qe,we]}configForm(){return this.deleteAttributesConfigForm}onConfigurationSet(e){this.deleteAttributesConfigForm=this.fb.group({scope:[e?e.scope:null,[K.required]],keys:[e?e.keys:null,[K.required]],sendAttributesDeletedNotification:[!!e&&e.sendAttributesDeletedNotification,[]],notifyDevice:[!!e&&e.notifyDevice,[]]}),this.deleteAttributesConfigForm.get("scope").valueChanges.subscribe((e=>{e!==f.SHARED_SCOPE&&this.deleteAttributesConfigForm.get("notifyDevice").patchValue(!1,{emitEvent:!1})}))}removeKey(e){const t=this.deleteAttributesConfigForm.get("keys").value,n=t.indexOf(e);n>=0&&(t.splice(n,1),this.deleteAttributesConfigForm.get("keys").patchValue(t,{emitEvent:!0}))}addKey(e){const t=e.input;let n=e.value;if((n||"").trim()){n=n.trim();let e=this.deleteAttributesConfigForm.get("keys").value;e&&-1!==e.indexOf(n)||(e||(e=[]),e.push(n),this.deleteAttributesConfigForm.get("keys").patchValue(e,{emitEvent:!0}))}t&&(t.value="")}}e("DeleteAttributesConfigComponent",yo),yo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:yo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),yo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:yo,selector:"tb-action-node-delete-attributes-config",viewQueries:[{propertyName:"attributeChipList",first:!0,predicate:["attributeChipList"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deleteAttributesConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="deleteAttributesConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="deleteAttributesConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label>{{ \'tb.rulenode.attributes-keys\' | translate }}</mat-label>\n    <mat-chip-grid formControlName="keys" #attributeChipList>\n      <mat-chip-row\n        *ngFor="let key of deleteAttributesConfigForm.get(\'keys\').value;"\n        (removed)="removeKey(key)">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip-row>\n      <input matInput type="text"\n             [matChipInputFor]="attributeChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event)"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-grid>\n    <mat-error *ngIf="deleteAttributesConfigForm.get(\'keys\').hasError(\'required\')">{{ \'tb.rulenode.attributes-keys-required\' | translate }}</mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n\n  <section class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.send-attributes-deleted-notification-hint\' | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="sendAttributesDeletedNotification">\n          {{ \'tb.rulenode.send-attributes-deleted-notification\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.notify-device-on-delete-hint\' | translate }}"\n           *ngIf="deleteAttributesConfigForm.get(\'scope\').value === attributeScopeMap.SHARED_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="notifyDevice">\n          {{ \'tb.rulenode.notify-device\' | translate }}\n        </mat-slide-toggle>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"component",type:Ee.MatChipGrid,selector:"mat-chip-grid",inputs:["tabIndex","disabled","placeholder","required","value","errorStateMatcher"],outputs:["change","valueChange"]},{kind:"directive",type:Ee.MatChipInput,selector:"input[matChipInputFor]",inputs:["matChipInputFor","matChipInputAddOnBlur","matChipInputSeparatorKeyCodes","placeholder","id","disabled"],outputs:["matChipInputTokenEnd"],exportAs:["matChipInput","matChipInputFor"]},{kind:"directive",type:Ee.MatChipRemove,selector:"[matChipRemove]"},{kind:"component",type:Ee.MatChipRow,selector:"mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]",inputs:["color","disabled","disableRipple","tabIndex","editable"],outputs:["edited"]},{kind:"directive",type:wt,selector:"[ngxClipboard]",inputs:["ngxClipboard","container","cbContent","cbSuccessMsg"],outputs:["cbOnSuccess","cbOnError"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:yo,decorators:[{type:n,args:[{selector:"tb-action-node-delete-attributes-config",template:'<section [formGroup]="deleteAttributesConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <tb-example-hint [hintText]="\'tb.rulenode.attributes-scope-hint\'">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope\' | translate }}</mat-label>\n        <mat-select required\n                    class="tb-entity-type-select" matInput formControlName="scope">\n          <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n            {{ telemetryTypeTranslationsMap.get(scope) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label>{{ \'tb.rulenode.attributes-scope-value\' | translate }}</mat-label>\n        <input type="text" matInput readonly disabled [ngModel]="deleteAttributesConfigForm.get(\'scope\').value" [ngModelOptions]="{standalone: true}">\n        <button type="button"\n                matSuffix\n                mat-icon-button\n                aria-label="Copy"\n                ngxClipboard\n                [cbContent]="deleteAttributesConfigForm.get(\'scope\').value"\n                matTooltip="{{ \'tb.rulenode.attributes-scope-value-copy\' | translate }}">\n          <mat-icon aria-hidden="false"\n                    aria-label="help-icon">content_copy\n          </mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label>{{ \'tb.rulenode.attributes-keys\' | translate }}</mat-label>\n    <mat-chip-grid formControlName="keys" #attributeChipList>\n      <mat-chip-row\n        *ngFor="let key of deleteAttributesConfigForm.get(\'keys\').value;"\n        (removed)="removeKey(key)">\n        {{key}}\n        <mat-icon matChipRemove>close</mat-icon>\n      </mat-chip-row>\n      <input matInput type="text"\n             [matChipInputFor]="attributeChipList"\n             [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n             (matChipInputTokenEnd)="addKey($event)"\n             [matChipInputAddOnBlur]="true">\n    </mat-chip-grid>\n    <mat-error *ngIf="deleteAttributesConfigForm.get(\'keys\').hasError(\'required\')">{{ \'tb.rulenode.attributes-keys-required\' | translate }}</mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n\n  <section class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.send-attributes-deleted-notification-hint\' | translate }}"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="sendAttributesDeletedNotification">\n          {{ \'tb.rulenode.send-attributes-deleted-notification\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div tb-hint-tooltip-icon="{{ \'tb.rulenode.notify-device-on-delete-hint\' | translate }}"\n           *ngIf="deleteAttributesConfigForm.get(\'scope\').value === attributeScopeMap.SHARED_SCOPE"\n           class="tb-form-row no-border no-padding">\n        <mat-slide-toggle class="mat-slide" formControlName="notifyDevice">\n          {{ \'tb.rulenode.notify-device\' | translate }}\n        </mat-slide-toggle>\n      </div>\n    </mat-expansion-panel>\n  </section>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]},propDecorators:{attributeChipList:[{type:u,args:["attributeChipList"]}]}});class xo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.messageTypeNames=L,this.eventOptions=[I.CONNECT_EVENT,I.ACTIVITY_EVENT,I.DISCONNECT_EVENT,I.INACTIVITY_EVENT]}configForm(){return this.deviceState}prepareInputConfig(e){return{event:Ce(e?.event)?e.event:I.ACTIVITY_EVENT}}onConfigurationSet(e){this.deviceState=this.fb.group({event:[e.event,[K.required]]})}}e("DeviceStateConfigComponent",xo),xo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:xo,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),xo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:xo,selector:"tb-action-node-device-state-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deviceState">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n        <mat-label>{{ \'tb.rulenode.select-device-connectivity-event\' | translate }}</mat-label>\n        <mat-select formControlName="event">\n            <mat-option *ngFor="let eventOption of eventOptions" [value]="eventOption">\n                {{ messageTypeNames.get(eventOption) }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:xo,decorators:[{type:n,args:[{selector:"tb-action-node-device-state-config",template:'<section [formGroup]="deviceState">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic">\n        <mat-label>{{ \'tb.rulenode.select-device-connectivity-event\' | translate }}</mat-label>\n        <mat-select formControlName="event">\n            <mat-option *ngFor="let eventOption of eventOptions" [value]="eventOption">\n                {{ messageTypeNames.get(eventOption) }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class bo{constructor(e,t){this.injector=e,this.fb=t,this.propagateChange=()=>{},this.destroy$=new de,this.disabled=!1,this.uniqueKeyValuePairValidator=!1,this.required=!1,this.duplicateValuesValidator=e=>e.controls.key.value===e.controls.value.value&&e.controls.key.value&&e.controls.value.value?{uniqueKeyValuePair:!0}:null,this.oneMapRequiredValidator=e=>e.get("keyVals").value.length,this.propagateNestedErrors=e=>{if(this.kvListFormGroup&&this.kvListFormGroup.get("keyVals")&&"VALID"===this.kvListFormGroup.get("keyVals")?.status)return null;const t={};if(this.kvListFormGroup&&this.kvListFormGroup.setErrors(null),e instanceof $||e instanceof Y){if(e.errors)for(const n of Object.keys(e.errors))t[n]=!0;for(const n of Object.keys(e.controls)){const o=this.propagateNestedErrors(e.controls[n]);if(o&&Object.keys(o).length)for(const e of Object.keys(o))t[e]=!0}return t}if(e.errors)for(const n of Object.keys(e.errors))t[n]=!0;return Fe(t,{})?null:t}}ngOnInit(){this.ngControl=this.injector.get(z),null!=this.ngControl&&(this.ngControl.valueAccessor=this),this.kvListFormGroup=this.fb.group({keyVals:this.fb.array([])},{validators:[this.propagateNestedErrors,this.oneMapRequiredValidator]}),this.kvListFormGroup.valueChanges.pipe(ue(this.destroy$)).subscribe((()=>{this.updateModel()}))}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}keyValsFormArray(){return this.kvListFormGroup.get("keyVals")}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.kvListFormGroup.disable({emitEvent:!1}):this.kvListFormGroup.enable({emitEvent:!1})}writeValue(e){const t=Object.keys(e).map((t=>({key:t,value:e[t]})));if(this.keyValsFormArray().length===t.length)this.keyValsFormArray().patchValue(t,{emitEvent:!1});else{const e=[];t.forEach((t=>{e.push(this.fb.group({key:[t.key,[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]],value:[t.value,[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]]},{validators:this.uniqueKeyValuePairValidator?[this.duplicateValuesValidator]:[]}))})),this.kvListFormGroup.setControl("keyVals",this.fb.array(e,this.propagateNestedErrors),{emitEvent:!1})}}removeKeyVal(e){this.keyValsFormArray().removeAt(e)}addKeyVal(){this.keyValsFormArray().push(this.fb.group({key:["",[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]],value:["",[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]]},{validators:this.uniqueKeyValuePairValidator?[this.duplicateValuesValidator]:[]}))}validate(){const e=this.kvListFormGroup.get("keyVals").value;if(!e.length&&this.required)return{kvMapRequired:!0};if(!this.kvListFormGroup.valid)return{kvFieldsRequired:!0};if(this.uniqueKeyValuePairValidator)for(const t of e)if(t.key===t.value)return{uniqueKeyValuePair:!0};return null}updateModel(){const e=this.kvListFormGroup.get("keyVals").value;if(this.required&&!e.length||!this.kvListFormGroup.valid)this.propagateChange(null);else{const t={};e.forEach((e=>{t[e.key]=e.value})),this.propagateChange(t)}}}e("KvMapConfigComponent",bo),bo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:bo,deps:[{token:t.Injector},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),bo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:bo,selector:"tb-kv-map-config",inputs:{disabled:"disabled",uniqueKeyValuePairValidator:"uniqueKeyValuePairValidator",labelText:"labelText",requiredText:"requiredText",keyText:"keyText",keyRequiredText:"keyRequiredText",valText:"valText",valRequiredText:"valRequiredText",hintText:"hintText",popupHelpLink:"popupHelpLink",required:"required"},providers:[{provide:j,useExisting:c((()=>bo)),multi:!0},{provide:Q,useExisting:c((()=>bo)),multi:!0}],ngImport:t,template:'<section [formGroup]="kvListFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title">{{ labelText }}</div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'kvMapRequired\')">\n      {{ requiredText }}\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'required\')">\n      tb.rulenode.map-fields-required\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'uniqueKeyValuePair\')">\n      {{ \'tb.key-val.unique-key-value-pair-error\' | translate:\n            {\n              valText: valText,\n              keyText: keyText\n            } }}\n    </div>\n  </div>\n  <div class="tb-form-panel no-border no-padding">\n    <div class="tb-form-table">\n      <div class="tb-form-table-header">\n        <div class="tb-form-table-header-cell field-space">{{ keyText }}</div>\n        <div class="tb-form-table-header-cell field-space">{{ valText }}</div>\n        <div class="tb-form-table-header-cell actions-header"></div>\n      </div>\n      <div class="tb-form-table-body">\n        <div class="tb-form-table-row"\n             *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index;">\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="keyText+\'*\'" [formControl]="keyValControl.get(\'key\')" matInput/>\n          </mat-form-field>\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="valText+\'*\'" [formControl]="keyValControl.get(\'value\')" matInput/>\n          </mat-form-field>\n          <div class="tb-form-table-row-cell-buttons">\n            <button [class.tb-hidden]="keyValsFormArray().controls.length === 1"\n                    type="button"\n                    mat-icon-button\n                    (click)="removeKeyVal($index)"\n                    [disabled]="disabled"\n                    matTooltip="{{ \'tb.key-val.remove-mapping-entry\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button type="button" mat-stroked-button color="primary" (click)="addKeyVal()">\n      {{ \'tb.key-val.add-mapping-entry\' | translate }}\n    </button>\n  </div>\n  <tb-example-hint [hintText]="hintText" [popupHelpLink]="popupHelpLink" *ngIf="popupHelpLink || hintText"></tb-example-hint>\n</section>\n',styles:[":host .field-space{flex:1 1 50%}:host .actions-header{width:40px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormControlDirective,selector:"[formControl]",inputs:["formControl","disabled","ngModel"],outputs:["ngModelChange"],exportAs:["ngForm"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),it([N()],bo.prototype,"disabled",void 0),it([N()],bo.prototype,"uniqueKeyValuePairValidator",void 0),it([N()],bo.prototype,"required",void 0),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:bo,decorators:[{type:n,args:[{selector:"tb-kv-map-config",providers:[{provide:j,useExisting:c((()=>bo)),multi:!0},{provide:Q,useExisting:c((()=>bo)),multi:!0}],template:'<section [formGroup]="kvListFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title">{{ labelText }}</div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'kvMapRequired\')">\n      {{ requiredText }}\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'required\')">\n      tb.rulenode.map-fields-required\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="kvListFormGroup.hasError(\'uniqueKeyValuePair\')">\n      {{ \'tb.key-val.unique-key-value-pair-error\' | translate:\n            {\n              valText: valText,\n              keyText: keyText\n            } }}\n    </div>\n  </div>\n  <div class="tb-form-panel no-border no-padding">\n    <div class="tb-form-table">\n      <div class="tb-form-table-header">\n        <div class="tb-form-table-header-cell field-space">{{ keyText }}</div>\n        <div class="tb-form-table-header-cell field-space">{{ valText }}</div>\n        <div class="tb-form-table-header-cell actions-header"></div>\n      </div>\n      <div class="tb-form-table-body">\n        <div class="tb-form-table-row"\n             *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index;">\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="keyText+\'*\'" [formControl]="keyValControl.get(\'key\')" matInput/>\n          </mat-form-field>\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="valText+\'*\'" [formControl]="keyValControl.get(\'value\')" matInput/>\n          </mat-form-field>\n          <div class="tb-form-table-row-cell-buttons">\n            <button [class.tb-hidden]="keyValsFormArray().controls.length === 1"\n                    type="button"\n                    mat-icon-button\n                    (click)="removeKeyVal($index)"\n                    [disabled]="disabled"\n                    matTooltip="{{ \'tb.key-val.remove-mapping-entry\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button type="button" mat-stroked-button color="primary" (click)="addKeyVal()">\n      {{ \'tb.key-val.add-mapping-entry\' | translate }}\n    </button>\n  </div>\n  <tb-example-hint [hintText]="hintText" [popupHelpLink]="popupHelpLink" *ngIf="popupHelpLink || hintText"></tb-example-hint>\n</section>\n',styles:[":host .field-space{flex:1 1 50%}:host .actions-header{width:40px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:t.Injector},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],uniqueKeyValuePairValidator:[{type:m}],labelText:[{type:m}],requiredText:[{type:m}],keyText:[{type:m}],keyRequiredText:[{type:m}],valText:[{type:m}],valRequiredText:[{type:m}],hintText:[{type:m}],popupHelpLink:[{type:m}],required:[{type:m}]}});class ho extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.values(v),this.directionTypeTranslations=S,this.entityType=C,this.propagateChange=null}ngOnInit(){this.deviceRelationsQueryFormGroup=this.fb.group({fetchLastLevelOnly:[!1,[]],direction:[null,[K.required]],maxLevel:[null,[K.min(1)]],relationType:[null],deviceTypes:[null,[K.required]]}),this.deviceRelationsQueryFormGroup.valueChanges.subscribe((e=>{this.deviceRelationsQueryFormGroup.valid?this.propagateChange(e):this.propagateChange(null)}))}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.deviceRelationsQueryFormGroup.disable({emitEvent:!1}):this.deviceRelationsQueryFormGroup.enable({emitEvent:!1})}writeValue(e){this.deviceRelationsQueryFormGroup.reset(e,{emitEvent:!1})}}e("DeviceRelationsQueryConfigComponent",ho),ho.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ho,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),ho.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ho,selector:"tb-device-relations-query-config",inputs:{disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>ho)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section fxLayout="column" [formGroup]="deviceRelationsQueryFormGroup">\n  <div fxLayoutGap="22px" fxLayout="row">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic" fxFlex="50" style="min-width: 100px;" hideRequiredMarker>\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex="50" floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n      <mat-error *ngIf="deviceRelationsQueryFormGroup.get(\'maxLevel\').hasError(\'min\')">\n        {{ \'tb.rulenode.max-relation-level-error\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.last-level-device-relation-tooltip\' | translate }}"\n       *ngIf="deviceRelationsQueryFormGroup.get(\'maxLevel\').value > 1"\n       class="tb-form-row no-border no-padding last-level-slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="fetchLastLevelOnly">\n      {{ \'alias.last-level-relation\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <tb-relation-type-autocomplete\n    fxFlex\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n  <tb-entity-subtype-list\n    required\n    [label]="\'tb.rulenode.device-profiles\' | translate"\n    [entityType]="entityType.DEVICE"\n    [emptyInputPlaceholder]="\'tb.rulenode.add-device-profile\' | translate"\n    [filledInputPlaceholder]="\'tb.rulenode.add-device-profile\' | translate"\n    formControlName="deviceTypes">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.device-profile\' | translate } }}">help</mat-icon>\n  </tb-entity-subtype-list>\n</section>\n',styles:[":host .last-level-slide-toggle{margin:8px 0 24px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:lt.EntitySubTypeListComponent,selector:"tb-entity-subtype-list",inputs:["required","floatLabel","label","disabled","entityType","emptyInputPlaceholder","filledInputPlaceholder","appearance","subscriptSizing","additionalClasses"]},{kind:"component",type:De.RelationTypeAutocompleteComponent,selector:"tb-relation-type-autocomplete",inputs:["showLabel","additionalClasses","appearance","required","disabled","subscriptSizing"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ho,decorators:[{type:n,args:[{selector:"tb-device-relations-query-config",providers:[{provide:j,useExisting:c((()=>ho)),multi:!0}],template:'<section fxLayout="column" [formGroup]="deviceRelationsQueryFormGroup">\n  <div fxLayoutGap="22px" fxLayout="row">\n    <mat-form-field class="mat-block" subscriptSizing="dynamic" fxFlex="50" style="min-width: 100px;" hideRequiredMarker>\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex="50" floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n      <mat-error *ngIf="deviceRelationsQueryFormGroup.get(\'maxLevel\').hasError(\'min\')">\n        {{ \'tb.rulenode.max-relation-level-error\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.last-level-device-relation-tooltip\' | translate }}"\n       *ngIf="deviceRelationsQueryFormGroup.get(\'maxLevel\').value > 1"\n       class="tb-form-row no-border no-padding last-level-slide-toggle">\n    <mat-slide-toggle class="mat-slide" formControlName="fetchLastLevelOnly">\n      {{ \'alias.last-level-relation\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <tb-relation-type-autocomplete\n    fxFlex\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n  <tb-entity-subtype-list\n    required\n    [label]="\'tb.rulenode.device-profiles\' | translate"\n    [entityType]="entityType.DEVICE"\n    [emptyInputPlaceholder]="\'tb.rulenode.add-device-profile\' | translate"\n    [filledInputPlaceholder]="\'tb.rulenode.add-device-profile\' | translate"\n    formControlName="deviceTypes">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.device-profile\' | translate } }}">help</mat-icon>\n  </tb-entity-subtype-list>\n</section>\n',styles:[":host .last-level-slide-toggle{margin:8px 0 24px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],required:[{type:m}]}});class vo extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.values(v),this.directionTypeTranslations=S,this.propagateChange=null}ngOnInit(){this.relationsQueryFormGroup=this.fb.group({fetchLastLevelOnly:[!1,[]],direction:[null,[K.required]],maxLevel:[null,[K.min(1)]],filters:[null]}),this.relationsQueryFormGroup.valueChanges.subscribe((e=>{this.relationsQueryFormGroup.valid?this.propagateChange(e):this.propagateChange(null)}))}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.relationsQueryFormGroup.disable({emitEvent:!1}):this.relationsQueryFormGroup.enable({emitEvent:!1})}writeValue(e){this.relationsQueryFormGroup.reset(e||{},{emitEvent:!1})}}e("RelationsQueryConfigComponent",vo),vo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:vo,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),vo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:vo,selector:"tb-relations-query-config",inputs:{disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>vo)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="relationsQueryFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title tb-required" translate>tb.rulenode.relations-query</div>\n  <section>\n    <div fxLayoutGap="16px" fxLayout="row">\n      <mat-form-field fxFlex="50" class="mat-block" style="min-width: 100px;" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field fxFlex="50" floatLabel="always" class="mat-block">\n        <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n        <input matInput\n               type="number"\n               min="1"\n               step="1"\n               placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n               formControlName="maxLevel">\n        <mat-error *ngIf="relationsQueryFormGroup.get(\'maxLevel\').hasError(\'min\')">\n          {{ \'tb.rulenode.max-relation-level-error\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.last-level-relation-tooltip\' | translate }}"\n         *ngIf="relationsQueryFormGroup.get(\'maxLevel\').value > 1"\n         class="tb-form-row no-border no-padding last-level-slide-toggle">\n      <mat-slide-toggle class="mat-slide" formControlName="fetchLastLevelOnly">\n        {{ \'alias.last-level-relation\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </section>\n  <section [formGroup]="relationsQueryFormGroup" class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>relation.relation-filters</div>\n    <tb-relation-filters\n      formControlName="filters">\n    </tb-relation-filters>\n  </section>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:st.RelationFiltersComponent,selector:"tb-relation-filters",inputs:["disabled","allowedEntityTypes","enableNotOption"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:vo,decorators:[{type:n,args:[{selector:"tb-relations-query-config",providers:[{provide:j,useExisting:c((()=>vo)),multi:!0}],template:'<section [formGroup]="relationsQueryFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title tb-required" translate>tb.rulenode.relations-query</div>\n  <section>\n    <div fxLayoutGap="16px" fxLayout="row">\n      <mat-form-field fxFlex="50" class="mat-block" style="min-width: 100px;" hideRequiredMarker>\n        <mat-label translate>relation.direction</mat-label>\n        <mat-select required formControlName="direction">\n          <mat-option *ngFor="let type of directionTypes" [value]="type">\n            {{ directionTypeTranslations.get(type) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field fxFlex="50" floatLabel="always" class="mat-block">\n        <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n        <input matInput\n               type="number"\n               min="1"\n               step="1"\n               placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n               formControlName="maxLevel">\n        <mat-error *ngIf="relationsQueryFormGroup.get(\'maxLevel\').hasError(\'min\')">\n          {{ \'tb.rulenode.max-relation-level-error\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.last-level-relation-tooltip\' | translate }}"\n         *ngIf="relationsQueryFormGroup.get(\'maxLevel\').value > 1"\n         class="tb-form-row no-border no-padding last-level-slide-toggle">\n      <mat-slide-toggle class="mat-slide" formControlName="fetchLastLevelOnly">\n        {{ \'alias.last-level-relation\' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </section>\n  <section [formGroup]="relationsQueryFormGroup" class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>relation.relation-filters</div>\n    <tb-relation-filters\n      formControlName="filters">\n    </tb-relation-filters>\n  </section>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],required:[{type:m}]}});class Co extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t,n,o){super(e),this.store=e,this.translate=t,this.truncate=n,this.fb=o,this.placeholder="tb.rulenode.add-message-type",this.separatorKeysCodes=[Ae,qe,we],this.messageTypes=[],this.messageTypesList=[],this.searchText="",this.propagateChange=e=>{},this.messageTypeConfigForm=this.fb.group({messageType:[null]});for(const e of Object.keys(I))this.messageTypesList.push({name:L.get(I[e]),value:e})}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}ngOnInit(){this.filteredMessageTypes=this.messageTypeConfigForm.get("messageType").valueChanges.pipe(Oe(""),Re((e=>e||"")),Ue((e=>this.fetchMessageTypes(e))),Be())}setDisabledState(e){this.disabled=e,this.disabled?this.messageTypeConfigForm.disable({emitEvent:!1}):this.messageTypeConfigForm.enable({emitEvent:!1})}writeValue(e){this.searchText="",this.messageTypes.length=0,e&&e.forEach((e=>{const t=this.messageTypesList.find((t=>t.value===e));t?this.messageTypes.push({name:t.name,value:t.value}):this.messageTypes.push({name:e,value:e})}))}displayMessageTypeFn(e){return e?e.name:void 0}textIsNotEmpty(e){return e&&e.length>0}createMessageType(e,t){e.preventDefault(),this.transformMessageType(t)}add(e){this.transformMessageType(e.value)}fetchMessageTypes(e){if(this.searchText=e,this.searchText&&this.searchText.length){const e=this.searchText.toUpperCase();return ce(this.messageTypesList.filter((t=>t.name.toUpperCase().includes(e))))}return ce(this.messageTypesList)}transformMessageType(e){if((e||"").trim()){let t;const n=e.trim(),o=this.messageTypesList.find((e=>e.name===n));t=o?{name:o.name,value:o.value}:{name:n,value:n},t&&this.addMessageType(t)}this.clear("")}remove(e){const t=this.messageTypes.indexOf(e);t>=0&&(this.messageTypes.splice(t,1),this.updateModel())}selected(e){this.addMessageType(e.option.value),this.clear("")}addMessageType(e){-1===this.messageTypes.findIndex((t=>t.value===e.value))&&(this.messageTypes.push(e),this.updateModel())}onFocus(){this.messageTypeConfigForm.get("messageType").updateValueAndValidity({onlySelf:!0,emitEvent:!0})}clear(e=""){this.messageTypeInput.nativeElement.value=e,this.messageTypeConfigForm.get("messageType").patchValue(null,{emitEvent:!0}),setTimeout((()=>{this.messageTypeInput.nativeElement.blur(),this.messageTypeInput.nativeElement.focus()}),0)}updateModel(){const e=this.messageTypes.map((e=>e.value));this.required?(this.chipList.errorState=!e.length,this.propagateChange(e.length>0?e:null)):(this.chipList.errorState=!1,this.propagateChange(e))}}e("MessageTypesConfigComponent",Co),Co.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Co,deps:[{token:_.Store},{token:re.TranslateService},{token:A.TruncatePipe},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Co.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Co,selector:"tb-message-types-config",inputs:{required:"required",label:"label",placeholder:"placeholder",disabled:"disabled"},providers:[{provide:j,useExisting:c((()=>Co)),multi:!0}],viewQueries:[{propertyName:"chipList",first:!0,predicate:["chipList"],descendants:!0},{propertyName:"matAutocomplete",first:!0,predicate:["messageTypeAutocomplete"],descendants:!0},{propertyName:"messageTypeInput",first:!0,predicate:["messageTypeInput"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<mat-form-field [formGroup]="messageTypeConfigForm" style="width: 100%;">\n  <mat-label *ngIf="label">{{ label }}</mat-label>\n  <mat-chip-grid #chipList [required]="required">\n    <mat-chip-row\n      *ngFor="let messageType of messageTypes"\n      [removable]="true"\n      (removed)="remove(messageType)">\n      {{messageType.name}}\n      <mat-icon matChipRemove>close</mat-icon>\n    </mat-chip-row>\n    <input matInput type="text" placeholder="{{ placeholder | translate }}"\n           #messageTypeInput\n           (focusin)="onFocus()"\n           formControlName="messageType"\n           matAutocompleteOrigin\n           #origin="matAutocompleteOrigin"\n           [matAutocompleteConnectedTo]="origin"\n           [matAutocomplete]="messageTypeAutocomplete"\n           [matChipInputFor]="chipList"\n           [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n           (matChipInputTokenEnd)="add($event)">\n  </mat-chip-grid>\n  <mat-autocomplete #messageTypeAutocomplete="matAutocomplete"\n                    class="tb-autocomplete"\n                    (optionSelected)="selected($event)"\n                    [displayWith]="displayMessageTypeFn">\n    <mat-option *ngFor="let messageType of filteredMessageTypes | async" [value]="messageType">\n      <span [innerHTML]="messageType.name | highlight:searchText"></span>\n    </mat-option>\n    <mat-option *ngIf="(filteredMessageTypes | async)?.length === 0" [value]="null" class="tb-not-found">\n      <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n        <div *ngIf="!textIsNotEmpty(searchText); else searchNotEmpty">\n          <span translate>tb.rulenode.no-message-types-found</span>\n        </div>\n        <ng-template #searchNotEmpty>\n                <span>\n                  {{ \'tb.rulenode.no-message-type-matching\' | translate :\n                  {messageType: truncate.transform(searchText, true, 6, &apos;...&apos;)}\n                  }}\n                </span>\n        </ng-template>\n        <span>\n          <a translate (click)="createMessageType($event, searchText)">tb.rulenode.create-new-message-type</a>\n        </span>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n            color="primary"\n            matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.message-type\' | translate } }}">help</mat-icon>\n  <mat-error *ngIf="chipList.errorState">\n    {{ \'tb.rulenode.select-message-types-required\' | translate }}\n  </mat-error>\n</mat-form-field>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:tt.MatAutocomplete,selector:"mat-autocomplete",inputs:["disableRipple","hideSingleSelectionIndicator"],exportAs:["matAutocomplete"]},{kind:"directive",type:tt.MatAutocompleteTrigger,selector:"input[matAutocomplete], textarea[matAutocomplete]",exportAs:["matAutocompleteTrigger"]},{kind:"directive",type:tt.MatAutocompleteOrigin,selector:"[matAutocompleteOrigin]",exportAs:["matAutocompleteOrigin"]},{kind:"component",type:Ee.MatChipGrid,selector:"mat-chip-grid",inputs:["tabIndex","disabled","placeholder","required","value","errorStateMatcher"],outputs:["change","valueChange"]},{kind:"directive",type:Ee.MatChipInput,selector:"input[matChipInputFor]",inputs:["matChipInputFor","matChipInputAddOnBlur","matChipInputSeparatorKeyCodes","placeholder","id","disabled"],outputs:["matChipInputTokenEnd"],exportAs:["matChipInput","matChipInputFor"]},{kind:"directive",type:Ee.MatChipRemove,selector:"[matChipRemove]"},{kind:"component",type:Ee.MatChipRow,selector:"mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]",inputs:["color","disabled","disableRipple","tabIndex","editable"],outputs:["edited"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:nt.HighlightPipe,name:"highlight"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Co,decorators:[{type:n,args:[{selector:"tb-message-types-config",providers:[{provide:j,useExisting:c((()=>Co)),multi:!0}],template:'<mat-form-field [formGroup]="messageTypeConfigForm" style="width: 100%;">\n  <mat-label *ngIf="label">{{ label }}</mat-label>\n  <mat-chip-grid #chipList [required]="required">\n    <mat-chip-row\n      *ngFor="let messageType of messageTypes"\n      [removable]="true"\n      (removed)="remove(messageType)">\n      {{messageType.name}}\n      <mat-icon matChipRemove>close</mat-icon>\n    </mat-chip-row>\n    <input matInput type="text" placeholder="{{ placeholder | translate }}"\n           #messageTypeInput\n           (focusin)="onFocus()"\n           formControlName="messageType"\n           matAutocompleteOrigin\n           #origin="matAutocompleteOrigin"\n           [matAutocompleteConnectedTo]="origin"\n           [matAutocomplete]="messageTypeAutocomplete"\n           [matChipInputFor]="chipList"\n           [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n           (matChipInputTokenEnd)="add($event)">\n  </mat-chip-grid>\n  <mat-autocomplete #messageTypeAutocomplete="matAutocomplete"\n                    class="tb-autocomplete"\n                    (optionSelected)="selected($event)"\n                    [displayWith]="displayMessageTypeFn">\n    <mat-option *ngFor="let messageType of filteredMessageTypes | async" [value]="messageType">\n      <span [innerHTML]="messageType.name | highlight:searchText"></span>\n    </mat-option>\n    <mat-option *ngIf="(filteredMessageTypes | async)?.length === 0" [value]="null" class="tb-not-found">\n      <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n        <div *ngIf="!textIsNotEmpty(searchText); else searchNotEmpty">\n          <span translate>tb.rulenode.no-message-types-found</span>\n        </div>\n        <ng-template #searchNotEmpty>\n                <span>\n                  {{ \'tb.rulenode.no-message-type-matching\' | translate :\n                  {messageType: truncate.transform(searchText, true, 6, &apos;...&apos;)}\n                  }}\n                </span>\n        </ng-template>\n        <span>\n          <a translate (click)="createMessageType($event, searchText)">tb.rulenode.create-new-message-type</a>\n        </span>\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" matSuffix\n            color="primary"\n            matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.message-type\' | translate } }}">help</mat-icon>\n  <mat-error *ngIf="chipList.errorState">\n    {{ \'tb.rulenode.select-message-types-required\' | translate }}\n  </mat-error>\n</mat-form-field>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:A.TruncatePipe},{type:H.FormBuilder}]},propDecorators:{required:[{type:m}],label:[{type:m}],placeholder:[{type:m}],disabled:[{type:m}],chipList:[{type:u,args:["chipList",{static:!1}]}],matAutocomplete:[{type:u,args:["messageTypeAutocomplete",{static:!1}]}],messageTypeInput:[{type:u,args:["messageTypeInput",{static:!1}]}]}});class Fo extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t){super(e),this.store=e,this.fb=t,this.subscriptions=[],this.disableCertPemCredentials=!1,this.passwordFieldRequired=!0,this.allCredentialsTypes=dn,this.credentialsTypeTranslationsMap=un,this.propagateChange=e=>{}}ngOnInit(){this.credentialsConfigFormGroup=this.fb.group({type:[null,[K.required]],username:[null,[]],password:[null,[]],caCert:[null,[]],caCertFileName:[null,[]],privateKey:[null,[]],privateKeyFileName:[null,[]],cert:[null,[]],certFileName:[null,[]]}),this.subscriptions.push(this.credentialsConfigFormGroup.valueChanges.subscribe((()=>{this.updateView()}))),this.subscriptions.push(this.credentialsConfigFormGroup.get("type").valueChanges.subscribe((()=>{this.credentialsTypeChanged()})))}ngOnChanges(e){for(const t of Object.keys(e)){const n=e[t];if(!n.firstChange&&n.currentValue!==n.previousValue&&n.currentValue&&"disableCertPemCredentials"===t){"cert.PEM"===this.credentialsConfigFormGroup.get("type").value&&setTimeout((()=>{this.credentialsConfigFormGroup.get("type").patchValue("anonymous",{emitEvent:!0})}))}}}ngOnDestroy(){this.subscriptions.forEach((e=>e.unsubscribe()))}writeValue(e){Ce(e)&&(this.credentialsConfigFormGroup.reset(e,{emitEvent:!1}),this.updateValidators())}setDisabledState(e){e?this.credentialsConfigFormGroup.disable({emitEvent:!1}):(this.credentialsConfigFormGroup.enable({emitEvent:!1}),this.updateValidators())}updateView(){let e=this.credentialsConfigFormGroup.value;const t=e.type;switch(t){case"anonymous":e={type:t};break;case"basic":e={type:t,username:e.username,password:e.password};break;case"cert.PEM":delete e.username}this.propagateChange(e)}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}validate(e){return this.credentialsConfigFormGroup.valid?null:{credentialsConfig:{valid:!1}}}credentialsTypeChanged(){this.credentialsConfigFormGroup.patchValue({username:null,password:null,caCert:null,caCertFileName:null,privateKey:null,privateKeyFileName:null,cert:null,certFileName:null}),this.updateValidators()}updateValidators(e=!1){const t=this.credentialsConfigFormGroup.get("type").value;switch(e&&this.credentialsConfigFormGroup.reset({type:t},{emitEvent:!1}),this.credentialsConfigFormGroup.setValidators([]),this.credentialsConfigFormGroup.get("username").setValidators([]),this.credentialsConfigFormGroup.get("password").setValidators([]),t){case"anonymous":break;case"basic":this.credentialsConfigFormGroup.get("username").setValidators([K.required]),this.credentialsConfigFormGroup.get("password").setValidators(this.passwordFieldRequired?[K.required]:[]);break;case"cert.PEM":this.credentialsConfigFormGroup.setValidators([this.requiredFilesSelected(K.required,[["caCert","caCertFileName"],["privateKey","privateKeyFileName","cert","certFileName"]])])}this.credentialsConfigFormGroup.get("username").updateValueAndValidity({emitEvent:e}),this.credentialsConfigFormGroup.get("password").updateValueAndValidity({emitEvent:e}),this.credentialsConfigFormGroup.updateValueAndValidity({emitEvent:e})}requiredFilesSelected(e,t=null){return n=>{t||(t=[Object.keys(n.controls)]);return n?.controls&&t.some((t=>t.every((t=>!e(n.controls[t])))))?null:{notAllRequiredFilesSelected:!0}}}}e("CredentialsConfigComponent",Fo),Fo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Fo,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Fo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Fo,selector:"tb-credentials-config",inputs:{required:"required",disableCertPemCredentials:"disableCertPemCredentials",passwordFieldRequired:"passwordFieldRequired"},providers:[{provide:j,useExisting:c((()=>Fo)),multi:!0},{provide:Q,useExisting:c((()=>Fo)),multi:!0}],usesInheritance:!0,usesOnChanges:!0,ngImport:t,template:'<section [formGroup]="credentialsConfigFormGroup" fxLayout="column">\n  <mat-expansion-panel class="tb-credentials-config-panel-group">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.credentials</mat-panel-title>\n      <mat-panel-description>\n        {{ credentialsTypeTranslationsMap.get(credentialsConfigFormGroup.get(\'type\').value) | translate }}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <ng-template matExpansionPanelContent>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.credentials-type</mat-label>\n        <mat-select formControlName="type" required>\n          <mat-option *ngFor="let credentialsType of allCredentialsTypes" [value]="credentialsType"\n                      [disabled]="credentialsType === \'cert.PEM\' && disableCertPemCredentials">\n            {{ credentialsTypeTranslationsMap.get(credentialsType) | translate }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="credentialsConfigFormGroup.get(\'type\').hasError(\'required\')">\n          {{ \'tb.rulenode.credentials-type-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <section fxLayout="column" [ngSwitch]="credentialsConfigFormGroup.get(\'type\').value">\n        <ng-template ngSwitchCase="anonymous">\n        </ng-template>\n        <ng-template ngSwitchCase="basic">\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.username</mat-label>\n            <input required matInput formControlName="username">\n            <mat-error *ngIf="credentialsConfigFormGroup.get(\'username\').hasError(\'required\')">\n              {{ \'tb.rulenode.username-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.password</mat-label>\n            <input type="password" [required]="passwordFieldRequired" matInput formControlName="password">\n            <tb-toggle-password matSuffix></tb-toggle-password>\n            <mat-error *ngIf="credentialsConfigFormGroup.get(\'password\').hasError(\'required\')">\n              {{ \'tb.rulenode.password-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </ng-template>\n        <ng-template ngSwitchCase="cert.PEM">\n          <div class="tb-hint">{{ \'tb.rulenode.credentials-pem-hint\' | translate }}</div>\n          <tb-file-input formControlName="caCert"\n                         inputId="caCertSelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'caCertFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'caCertFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.ca-cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input formControlName="cert"\n                         inputId="CertSelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'certFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'certFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input style="padding-bottom: 8px;"\n                         formControlName="privateKey"\n                         inputId="privateKeySelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'privateKeyFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'privateKeyFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.private-key\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.private-key-password</mat-label>\n            <input type="password" matInput formControlName="password">\n            <tb-toggle-password matSuffix></tb-toggle-password>\n          </mat-form-field>\n        </ng-template>\n      </section>\n    </ng-template>\n  </mat-expansion-panel>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:W.NgSwitch,selector:"[ngSwitch]",inputs:["ngSwitch"]},{kind:"directive",type:W.NgSwitchCase,selector:"[ngSwitchCase]",inputs:["ngSwitchCase"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:pe.MatExpansionPanelDescription,selector:"mat-panel-description"},{kind:"directive",type:pe.MatExpansionPanelContent,selector:"ng-template[matExpansionPanelContent]"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:mt.FileInputComponent,selector:"tb-file-input",inputs:["label","hint","accept","noFileText","inputId","allowedExtensions","dropLabel","maxSizeByte","contentConvertFunction","required","requiredAsError","disabled","existingFileName","readAsBinary","workFromFileObj","multipleFile"],outputs:["fileNameChanged"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:pt.TogglePasswordComponent,selector:"tb-toggle-password"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Fo,decorators:[{type:n,args:[{selector:"tb-credentials-config",providers:[{provide:j,useExisting:c((()=>Fo)),multi:!0},{provide:Q,useExisting:c((()=>Fo)),multi:!0}],template:'<section [formGroup]="credentialsConfigFormGroup" fxLayout="column">\n  <mat-expansion-panel class="tb-credentials-config-panel-group">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.credentials</mat-panel-title>\n      <mat-panel-description>\n        {{ credentialsTypeTranslationsMap.get(credentialsConfigFormGroup.get(\'type\').value) | translate }}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <ng-template matExpansionPanelContent>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.credentials-type</mat-label>\n        <mat-select formControlName="type" required>\n          <mat-option *ngFor="let credentialsType of allCredentialsTypes" [value]="credentialsType"\n                      [disabled]="credentialsType === \'cert.PEM\' && disableCertPemCredentials">\n            {{ credentialsTypeTranslationsMap.get(credentialsType) | translate }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf="credentialsConfigFormGroup.get(\'type\').hasError(\'required\')">\n          {{ \'tb.rulenode.credentials-type-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <section fxLayout="column" [ngSwitch]="credentialsConfigFormGroup.get(\'type\').value">\n        <ng-template ngSwitchCase="anonymous">\n        </ng-template>\n        <ng-template ngSwitchCase="basic">\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.username</mat-label>\n            <input required matInput formControlName="username">\n            <mat-error *ngIf="credentialsConfigFormGroup.get(\'username\').hasError(\'required\')">\n              {{ \'tb.rulenode.username-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.password</mat-label>\n            <input type="password" [required]="passwordFieldRequired" matInput formControlName="password">\n            <tb-toggle-password matSuffix></tb-toggle-password>\n            <mat-error *ngIf="credentialsConfigFormGroup.get(\'password\').hasError(\'required\')">\n              {{ \'tb.rulenode.password-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </ng-template>\n        <ng-template ngSwitchCase="cert.PEM">\n          <div class="tb-hint">{{ \'tb.rulenode.credentials-pem-hint\' | translate }}</div>\n          <tb-file-input formControlName="caCert"\n                         inputId="caCertSelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'caCertFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'caCertFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.ca-cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input formControlName="cert"\n                         inputId="CertSelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'certFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'certFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.cert\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <tb-file-input style="padding-bottom: 8px;"\n                         formControlName="privateKey"\n                         inputId="privateKeySelect"\n                         [existingFileName]="credentialsConfigFormGroup.get(\'privateKeyFileName\').value"\n                         (fileNameChanged)="credentialsConfigFormGroup.get(\'privateKeyFileName\').setValue($event)"\n                         label="{{\'tb.rulenode.private-key\' | translate}}"\n                         noFileText="tb.rulenode.no-file"\n                         dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n          </tb-file-input>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.private-key-password</mat-label>\n            <input type="password" matInput formControlName="password">\n            <tb-toggle-password matSuffix></tb-toggle-password>\n          </mat-form-field>\n        </ng-template>\n      </section>\n    </ng-template>\n  </mat-expansion-panel>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]},propDecorators:{required:[{type:m}],disableCertPemCredentials:[{type:m}],passwordFieldRequired:[{type:m}]}});class ko{set required(e){this.requiredValue!==e&&(this.requiredValue=e,this.updateValidators())}get required(){return this.requiredValue}constructor(e){this.fb=e,this.subscriptSizing="fixed",this.messageTypes=[{name:"Post attributes",value:"POST_ATTRIBUTES_REQUEST"},{name:"Post telemetry",value:"POST_TELEMETRY_REQUEST"},{name:"Custom",value:""}],this.propagateChange=()=>{},this.destroy$=new de,this.messageTypeFormGroup=this.fb.group({messageTypeAlias:[null,[K.required]],messageType:[{value:null,disabled:!0},[K.maxLength(255)]]}),this.messageTypeFormGroup.get("messageTypeAlias").valueChanges.pipe(ue(this.destroy$)).subscribe((e=>this.updateMessageTypeValue(e))),this.messageTypeFormGroup.valueChanges.pipe(ue(this.destroy$)).subscribe((()=>this.updateView()))}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}registerOnTouched(e){}registerOnChange(e){this.propagateChange=e}writeValue(e){this.modelValue=e;let t=this.messageTypes.find((t=>t.value===e));t||(t=this.messageTypes.find((e=>""===e.value))),this.messageTypeFormGroup.get("messageTypeAlias").patchValue(t,{emitEvent:!1}),this.messageTypeFormGroup.get("messageType").patchValue(e,{emitEvent:!1})}validate(){return this.messageTypeFormGroup.valid?null:{messageTypeInvalid:!0}}setDisabledState(e){this.disabled=e,e?this.messageTypeFormGroup.disable({emitEvent:!1}):(this.messageTypeFormGroup.enable({emitEvent:!1}),"Custom"!==this.messageTypeFormGroup.get("messageTypeAlias").value?.name&&this.messageTypeFormGroup.get("messageType").disable({emitEvent:!1}))}updateView(){const e=this.messageTypeFormGroup.getRawValue().messageType;this.modelValue!==e&&(this.modelValue=e,this.propagateChange(this.modelValue))}updateValidators(){this.messageTypeFormGroup.get("messageType").setValidators(this.required?[K.required,K.maxLength(255)]:[K.maxLength(255)]),this.messageTypeFormGroup.get("messageType").updateValueAndValidity({emitEvent:!1})}updateMessageTypeValue(e){"Custom"!==e?.name?this.messageTypeFormGroup.get("messageType").disable({emitEvent:!1}):this.messageTypeFormGroup.get("messageType").enable({emitEvent:!1}),this.messageTypeFormGroup.get("messageType").patchValue(e.value??null)}}e("OutputMessageTypeAutocompleteComponent",ko),ko.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ko,deps:[{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),ko.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ko,selector:"tb-output-message-type-autocomplete",inputs:{subscriptSizing:"subscriptSizing",disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>ko)),multi:!0},{provide:Q,useExisting:c((()=>ko)),multi:!0}],ngImport:t,template:'<section class="tb-form-row no-border no-padding tb-standard-fields column-xs" [formGroup]="messageTypeFormGroup">\n  <mat-form-field class="flex" subscriptSizing="{{ subscriptSizing }}" hideRequiredMarker>\n    <mat-label>{{\'tb.rulenode.output-message-type\' | translate}}</mat-label>\n    <mat-select formControlName="messageTypeAlias">\n      <mat-option *ngFor="let msgType of messageTypes" [value]="msgType">\n        {{msgType.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="flex" subscriptSizing="{{ subscriptSizing }}" [hideRequiredMarker]="messageTypeFormGroup.get(\'messageType\').disabled">\n    <mat-label>{{\'tb.rulenode.message-type-value\' | translate}}</mat-label>\n    <input matInput type="text" formControlName="messageType">\n    <button type="button"\n            matSuffix\n            mat-icon-button\n            aria-label="Copy"\n            *ngIf="messageTypeFormGroup.get(\'messageType\').value"\n            ngxClipboard\n            [cbContent]="messageTypeFormGroup.get(\'messageType\').value"\n            matTooltip="{{ \'tb.rulenode.copy-message-type\' | translate }}">\n      <mat-icon aria-hidden="false"\n                aria-label="help-icon">content_copy\n      </mat-icon>\n    </button>\n    <mat-error *ngIf="messageTypeFormGroup.get(\'messageType\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-type-value-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="messageTypeFormGroup.get(\'messageType\').hasError(\'maxlength\')">\n      {{ \'tb.rulenode.message-type-value-max-length\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:wt,selector:"[ngxClipboard]",inputs:["ngxClipboard","container","cbContent","cbSuccessMsg"],outputs:["cbOnSuccess","cbOnError"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),it([N()],ko.prototype,"disabled",void 0),it([N()],ko.prototype,"required",null),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ko,decorators:[{type:n,args:[{selector:"tb-output-message-type-autocomplete",providers:[{provide:j,useExisting:c((()=>ko)),multi:!0},{provide:Q,useExisting:c((()=>ko)),multi:!0}],template:'<section class="tb-form-row no-border no-padding tb-standard-fields column-xs" [formGroup]="messageTypeFormGroup">\n  <mat-form-field class="flex" subscriptSizing="{{ subscriptSizing }}" hideRequiredMarker>\n    <mat-label>{{\'tb.rulenode.output-message-type\' | translate}}</mat-label>\n    <mat-select formControlName="messageTypeAlias">\n      <mat-option *ngFor="let msgType of messageTypes" [value]="msgType">\n        {{msgType.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="flex" subscriptSizing="{{ subscriptSizing }}" [hideRequiredMarker]="messageTypeFormGroup.get(\'messageType\').disabled">\n    <mat-label>{{\'tb.rulenode.message-type-value\' | translate}}</mat-label>\n    <input matInput type="text" formControlName="messageType">\n    <button type="button"\n            matSuffix\n            mat-icon-button\n            aria-label="Copy"\n            *ngIf="messageTypeFormGroup.get(\'messageType\').value"\n            ngxClipboard\n            [cbContent]="messageTypeFormGroup.get(\'messageType\').value"\n            matTooltip="{{ \'tb.rulenode.copy-message-type\' | translate }}">\n      <mat-icon aria-hidden="false"\n                aria-label="help-icon">content_copy\n      </mat-icon>\n    </button>\n    <mat-error *ngIf="messageTypeFormGroup.get(\'messageType\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-type-value-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="messageTypeFormGroup.get(\'messageType\').hasError(\'maxlength\')">\n      {{ \'tb.rulenode.message-type-value-max-length\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n\n'}]}],ctorParameters:function(){return[{type:H.FormBuilder}]},propDecorators:{subscriptSizing:[{type:m}],disabled:[{type:m}],required:[{type:m}]}});class To{constructor(e,t){this.fb=e,this.translate=t,this.translation=Pn,this.propagateChange=()=>{},this.destroy$=new de,this.selectOptions=[]}ngOnInit(){this.initOptions(),this.chipControlGroup=this.fb.group({chipControl:[null,[]]}),this.chipControlGroup.get("chipControl").valueChanges.pipe(Ve(this.destroy$)).subscribe((e=>{e&&this.propagateChange(e)}))}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}initOptions(){for(const e of this.translation.keys())this.selectOptions.push({value:e,name:this.translate.instant(this.translation.get(e))})}writeValue(e){this.chipControlGroup.get("chipControl").patchValue(e,{emitEvent:!1})}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){e?this.chipControlGroup.disable({emitEvent:!1}):this.chipControlGroup.enable({emitEvent:!1})}}e("MsgMetadataChipComponent",To),To.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:To,deps:[{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),To.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:To,selector:"tb-msg-metadata-chip",inputs:{labelText:"labelText",translation:"translation"},providers:[{provide:j,useExisting:c((()=>To)),multi:!0}],ngImport:t,template:'<div [formGroup]="chipControlGroup" class="tb-form-row space-between">\n  <div class="fixed-title-width">{{ labelText }}</div>\n  <mat-chip-listbox formControlName="chipControl">\n    <mat-chip-option *ngFor="let option of selectOptions"\n                     selectable="{{ chipControlGroup.get(\'chipControl\').value !== option.value }}"\n                     color="primary"\n                     [value]="option.value">{{ option.name }}</mat-chip-option>\n  </mat-chip-listbox>\n</div>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:Ee.MatChipListbox,selector:"mat-chip-listbox",inputs:["tabIndex","multiple","aria-orientation","selectable","compareWith","required","hideSingleSelectionIndicator","value"],outputs:["change"]},{kind:"component",type:Ee.MatChipOption,selector:"mat-basic-chip-option, [mat-basic-chip-option], mat-chip-option, [mat-chip-option]",inputs:["color","disabled","disableRipple","tabIndex","selectable","selected"],outputs:["selectionChange"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:To,decorators:[{type:n,args:[{selector:"tb-msg-metadata-chip",providers:[{provide:j,useExisting:c((()=>To)),multi:!0}],template:'<div [formGroup]="chipControlGroup" class="tb-form-row space-between">\n  <div class="fixed-title-width">{{ labelText }}</div>\n  <mat-chip-listbox formControlName="chipControl">\n    <mat-chip-option *ngFor="let option of selectOptions"\n                     selectable="{{ chipControlGroup.get(\'chipControl\').value !== option.value }}"\n                     color="primary"\n                     [value]="option.value">{{ option.name }}</mat-chip-option>\n  </mat-chip-listbox>\n</div>\n'}]}],ctorParameters:function(){return[{type:H.FormBuilder},{type:re.TranslateService}]},propDecorators:{labelText:[{type:m}],translation:[{type:m}]}});class Lo extends T{constructor(e,t,n,o){super(e),this.store=e,this.translate=t,this.injector=n,this.fb=o,this.destroy$=new de,this.sourceFieldSubcritption=[],this.propagateChange=null,this.disabled=!1,this.required=!1,this.oneMapRequiredValidator=e=>e.get("keyVals").value.length,this.propagateNestedErrors=e=>{if(this.svListFormGroup&&this.svListFormGroup.get("keyVals")&&"VALID"===this.svListFormGroup.get("keyVals")?.status)return null;const t={};if(this.svListFormGroup&&this.svListFormGroup.setErrors(null),e instanceof $||e instanceof Y){if(e.errors)for(const n of Object.keys(e.errors))t[n]=!0;for(const n of Object.keys(e.controls)){const o=this.propagateNestedErrors(e.controls[n]);if(o&&Object.keys(o).length)for(const e of Object.keys(o))t[e]=!0}return t}if(e.errors)for(const n of Object.keys(e.errors))t[n]=!0;return Fe(t,{})?null:t}}ngOnInit(){this.ngControl=this.injector.get(z),null!=this.ngControl&&(this.ngControl.valueAccessor=this),this.svListFormGroup=this.fb.group({keyVals:this.fb.array([])},{validators:[this.propagateNestedErrors,this.oneMapRequiredValidator]}),this.svListFormGroup.valueChanges.pipe(Ve(this.destroy$)).subscribe((()=>{this.updateModel()}))}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}keyValsFormArray(){return this.svListFormGroup.get("keyVals")}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.svListFormGroup.disable({emitEvent:!1}):this.svListFormGroup.enable({emitEvent:!1})}writeValue(e){const t=Object.keys(e).map((t=>({key:t,value:e[t]})));if(this.keyValsFormArray().length===t.length)this.keyValsFormArray().patchValue(t,{emitEvent:!1});else{const e=[];t.forEach((t=>{e.push(this.fb.group({key:[t.key,[K.required]],value:[t.value,[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]]}))})),this.svListFormGroup.setControl("keyVals",this.fb.array(e,this.propagateNestedErrors),{emitEvent:!1});for(const e of this.keyValsFormArray().controls)this.keyChangeSubscribe(e)}}filterSelectOptions(e){const t=[];for(const e of this.svListFormGroup.get("keyVals").value){const n=this.selectOptions.find((t=>t.value===e.key));n&&t.push(n)}const n=[];for(const o of this.selectOptions)Ce(t.find((e=>e.value===o.value)))&&o.value!==e?.get("key").value||n.push(o);return n}removeKeyVal(e){this.keyValsFormArray().removeAt(e),this.sourceFieldSubcritption[e].unsubscribe(),this.sourceFieldSubcritption.splice(e,1)}addKeyVal(){this.keyValsFormArray().push(this.fb.group({key:["",[K.required]],value:["",[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]]})),this.keyChangeSubscribe(this.keyValsFormArray().at(this.keyValsFormArray().length-1))}keyChangeSubscribe(e){this.sourceFieldSubcritption.push(e.get("key").valueChanges.pipe(Ve(this.destroy$)).subscribe((t=>{const n=zt.get(t);e.get("value").patchValue(this.targetKeyPrefix+n[0].toUpperCase()+n.slice(1))})))}validate(e){return!this.svListFormGroup.get("keyVals").value.length&&this.required?{svMapRequired:!0}:this.svListFormGroup.valid?null:{svFieldsRequired:!0}}updateModel(){const e=this.svListFormGroup.get("keyVals").value;if(this.required&&!e.length||!this.svListFormGroup.valid)this.propagateChange(null);else{const t={};e.forEach((e=>{t[e.key]=e.value})),this.propagateChange(t)}}}e("SvMapConfigComponent",Lo),Lo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Lo,deps:[{token:_.Store},{token:re.TranslateService},{token:t.Injector},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Lo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Lo,selector:"tb-sv-map-config",inputs:{selectOptions:"selectOptions",disabled:"disabled",labelText:"labelText",requiredText:"requiredText",targetKeyPrefix:"targetKeyPrefix",selectText:"selectText",selectRequiredText:"selectRequiredText",valText:"valText",valRequiredText:"valRequiredText",hintText:"hintText",popupHelpLink:"popupHelpLink",required:"required"},providers:[{provide:j,useExisting:c((()=>Lo)),multi:!0},{provide:Q,useExisting:c((()=>Lo)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="svListFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title">{{ labelText }}</div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="svListFormGroup.hasError(\'required\')">\n      tb.rulenode.map-fields-required\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="svListFormGroup.hasError(\'svMapRequired\')">\n      {{ requiredText }}\n    </div>\n  </div>\n  <div class="tb-form-panel no-border no-padding">\n    <div class="tb-form-table">\n      <div class="tb-form-table-header">\n        <div class="tb-form-table-header-cell field-space">{{ selectText }}</div>\n        <div class="tb-form-table-header-cell field-space">{{ valText }}</div>\n        <div class="tb-form-table-header-cell actions-header"></div>\n      </div>\n      <div class="tb-form-table-body">\n        <div class="tb-form-table-row"\n             *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index;">\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <mat-select [placeholder]="selectText" [formControl]="keyValControl.get(\'key\')" required>\n              <mat-option *ngFor="let option of filterSelectOptions(keyValControl)" [value]="option.value">\n                {{option.name}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="valText" [formControl]="keyValControl.get(\'value\')" matInput/>\n          </mat-form-field>\n          <div class="tb-form-table-row-cell-buttons">\n            <button [ngClass]="{\'tb-hidden\': keyValsFormArray().controls.length === 1}"\n                    type="button"\n                    mat-icon-button\n                    (click)="removeKeyVal($index)"\n                    [disabled]="isLoading$ | async"\n                    matTooltip="{{ \'tb.key-val.remove-mapping-entry\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button [disabled]="(isLoading$ | async) || keyValsFormArray().length >= selectOptions.length"\n            type="button" mat-stroked-button color="primary" (click)="addKeyVal()">\n      {{ \'tb.key-val.add-mapping-entry\' | translate }}\n    </button>\n  </div>\n  <tb-example-hint [hintText]="hintText" [popupHelpLink]="popupHelpLink"></tb-example-hint>\n</section>\n',styles:[":host .field-space{flex:1 1 50%}:host .actions-header{width:40px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgClass,selector:"[ngClass]",inputs:["class","ngClass"]},{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:Ze.DefaultClassDirective,selector:"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]",inputs:["ngClass","ngClass.xs","ngClass.sm","ngClass.md","ngClass.lg","ngClass.xl","ngClass.lt-sm","ngClass.lt-md","ngClass.lt-lg","ngClass.lt-xl","ngClass.gt-xs","ngClass.gt-sm","ngClass.gt-md","ngClass.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormControlDirective,selector:"[formControl]",inputs:["formControl","disabled","ngModel"],outputs:["ngModelChange"],exportAs:["ngForm"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),it([N()],Lo.prototype,"disabled",void 0),it([N()],Lo.prototype,"required",void 0),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Lo,decorators:[{type:n,args:[{selector:"tb-sv-map-config",providers:[{provide:j,useExisting:c((()=>Lo)),multi:!0},{provide:Q,useExisting:c((()=>Lo)),multi:!0}],template:'<section [formGroup]="svListFormGroup" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title">{{ labelText }}</div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="svListFormGroup.hasError(\'required\')">\n      tb.rulenode.map-fields-required\n    </div>\n    <div class="tb-form-panel-hint tb-error" translate *ngIf="svListFormGroup.hasError(\'svMapRequired\')">\n      {{ requiredText }}\n    </div>\n  </div>\n  <div class="tb-form-panel no-border no-padding">\n    <div class="tb-form-table">\n      <div class="tb-form-table-header">\n        <div class="tb-form-table-header-cell field-space">{{ selectText }}</div>\n        <div class="tb-form-table-header-cell field-space">{{ valText }}</div>\n        <div class="tb-form-table-header-cell actions-header"></div>\n      </div>\n      <div class="tb-form-table-body">\n        <div class="tb-form-table-row"\n             *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index;">\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <mat-select [placeholder]="selectText" [formControl]="keyValControl.get(\'key\')" required>\n              <mat-option *ngFor="let option of filterSelectOptions(keyValControl)" [value]="option.value">\n                {{option.name}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field class="tb-inline-field field-space" appearance="outline" subscriptSizing="dynamic">\n            <input [placeholder]="valText" [formControl]="keyValControl.get(\'value\')" matInput/>\n          </mat-form-field>\n          <div class="tb-form-table-row-cell-buttons">\n            <button [ngClass]="{\'tb-hidden\': keyValsFormArray().controls.length === 1}"\n                    type="button"\n                    mat-icon-button\n                    (click)="removeKeyVal($index)"\n                    [disabled]="isLoading$ | async"\n                    matTooltip="{{ \'tb.key-val.remove-mapping-entry\' | translate }}"\n                    matTooltipPosition="above">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button [disabled]="(isLoading$ | async) || keyValsFormArray().length >= selectOptions.length"\n            type="button" mat-stroked-button color="primary" (click)="addKeyVal()">\n      {{ \'tb.key-val.add-mapping-entry\' | translate }}\n    </button>\n  </div>\n  <tb-example-hint [hintText]="hintText" [popupHelpLink]="popupHelpLink"></tb-example-hint>\n</section>\n',styles:[":host .field-space{flex:1 1 50%}:host .actions-header{width:40px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:t.Injector},{type:H.FormBuilder}]},propDecorators:{selectOptions:[{type:m}],disabled:[{type:m}],labelText:[{type:m}],requiredText:[{type:m}],targetKeyPrefix:[{type:m}],selectText:[{type:m}],selectRequiredText:[{type:m}],valText:[{type:m}],valRequiredText:[{type:m}],hintText:[{type:m}],popupHelpLink:[{type:m}],required:[{type:m}]}});class Io extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.keys(v),this.directionTypeTranslations=S,this.propagateChange=null}ngOnInit(){this.relationsQueryFormGroup=this.fb.group({fetchLastLevelOnly:[!1,[]],direction:[null,[K.required]],maxLevel:[null,[]],filters:[null]}),this.relationsQueryFormGroup.valueChanges.subscribe((e=>{this.relationsQueryFormGroup.valid?this.propagateChange(e):this.propagateChange(null)}))}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e,this.disabled?this.relationsQueryFormGroup.disable({emitEvent:!1}):this.relationsQueryFormGroup.enable({emitEvent:!1})}writeValue(e){this.relationsQueryFormGroup.reset(e||{},{emitEvent:!1})}}e("RelationsQueryConfigOldComponent",Io),Io.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Io,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Io.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Io,selector:"tb-relations-query-config-old",inputs:{disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>Io)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section fxLayout="column" [formGroup]="relationsQueryFormGroup">\n  <mat-checkbox formControlName="fetchLastLevelOnly">\n    {{ \'alias.last-level-relation\' | translate }}\n  </mat-checkbox>\n  <div fxLayoutGap="8px" fxLayout="row">\n    <mat-form-field class="mat-block" style="min-width: 100px;">\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required matInput formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n    </mat-form-field>\n  </div>\n  <div class="mat-caption" style="color: #6e6e6e;" translate>relation.relation-filters</div>\n  <tb-relation-filters\n    formControlName="filters"\n  ></tb-relation-filters>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:st.RelationFiltersComponent,selector:"tb-relation-filters",inputs:["disabled","allowedEntityTypes","enableNotOption"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Io,decorators:[{type:n,args:[{selector:"tb-relations-query-config-old",providers:[{provide:j,useExisting:c((()=>Io)),multi:!0}],template:'<section fxLayout="column" [formGroup]="relationsQueryFormGroup">\n  <mat-checkbox formControlName="fetchLastLevelOnly">\n    {{ \'alias.last-level-relation\' | translate }}\n  </mat-checkbox>\n  <div fxLayoutGap="8px" fxLayout="row">\n    <mat-form-field class="mat-block" style="min-width: 100px;">\n      <mat-label translate>relation.direction</mat-label>\n      <mat-select required matInput formControlName="direction">\n        <mat-option *ngFor="let type of directionTypes" [value]="type">\n          {{ directionTypeTranslations.get(type) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field fxFlex floatLabel="always" class="mat-block">\n      <mat-label translate>tb.rulenode.max-relation-level</mat-label>\n      <input matInput\n             type="number"\n             min="1"\n             step="1"\n             placeholder="{{ \'tb.rulenode.unlimited-level\' | translate }}"\n             formControlName="maxLevel">\n    </mat-form-field>\n  </div>\n  <div class="mat-caption" style="color: #6e6e6e;" translate>relation.relation-filters</div>\n  <tb-relation-filters\n    formControlName="filters"\n  ></tb-relation-filters>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]},propDecorators:{disabled:[{type:m}],required:[{type:m}]}});class No{constructor(e,t){this.translate=e,this.fb=t,this.propagateChange=e=>{},this.destroy$=new de,this.separatorKeysCodes=[Ae,qe,we],this.onTouched=()=>{}}ngOnInit(){this.attributeControlGroup=this.fb.group({clientAttributeNames:[[],[]],sharedAttributeNames:[[],[]],serverAttributeNames:[[],[]],latestTsKeyNames:[[],[]],getLatestValueWithTs:[!1,[]]},{validators:this.atLeastOne(K.required,["clientAttributeNames","sharedAttributeNames","serverAttributeNames","latestTsKeyNames"])}),this.attributeControlGroup.valueChanges.pipe(Ve(this.destroy$)).subscribe((e=>{this.propagateChange(this.preparePropagateValue(e))}))}preparePropagateValue(e){const t={};for(const n in e)t[n]="getLatestValueWithTs"===n||Ce(e[n])?e[n]:[];return t}validate(){return this.attributeControlGroup.valid?null:{atLeastOneRequired:!0}}atLeastOne(e,t=null){return n=>{t||(t=Object.keys(n.controls));return n?.controls&&t.some((t=>!e(n.controls[t])))?null:{atLeastOne:!0}}}writeValue(e){this.attributeControlGroup.setValue(e,{emitEvent:!1})}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){this.onTouched=e}setDisabledState(e){e?this.attributeControlGroup.disable({emitEvent:!1}):this.attributeControlGroup.enable({emitEvent:!1})}ngOnDestroy(){this.destroy$.next(null),this.destroy$.complete()}}e("SelectAttributesComponent",No),No.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:No,deps:[{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),No.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:No,selector:"tb-select-attributes",inputs:{popupHelpLink:"popupHelpLink"},providers:[{provide:j,useExisting:c((()=>No)),multi:!0},{provide:Q,useExisting:No,multi:!0}],ngImport:t,template:'<div class="tb-form-panel no-padding no-border" [formGroup]="attributeControlGroup">\n  <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\' | translate"\n                   [popupHelpLink]="popupHelpLink"></tb-example-hint>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.client-attributes\' | translate" formControlName="clientAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.shared-attributes\' | translate" formControlName="sharedAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.server-attributes\' | translate" formControlName="serverAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" editable class="mat-block"\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-telemetry-key\' | translate"\n                        [label]="\'tb.rulenode.latest-telemetry\' | translate" formControlName="latestTsKeyNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.fetch-latest-telemetry-with-timestamp-tooltip\' | translate:\n                         { latestTsKeyName:  attributeControlGroup.get(\'latestTsKeyNames\').value[0]} }}"\n       *ngIf="attributeControlGroup.get(\'latestTsKeyNames\').value?.length > 0"\n       class="tb-form-row no-border no-padding">\n    <mat-slide-toggle class="mat-slide" formControlName="getLatestValueWithTs">\n      {{ \'tb.rulenode.fetch-latest-telemetry-with-timestamp\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</div>\n\n<ng-template #helpIcon>\n  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n            color="primary"\n            matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n</ng-template>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:W.NgTemplateOutlet,selector:"[ngTemplateOutlet]",inputs:["ngTemplateOutletContext","ngTemplateOutlet","ngTemplateOutletInjector"]},{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:No,decorators:[{type:n,args:[{selector:"tb-select-attributes",providers:[{provide:j,useExisting:c((()=>No)),multi:!0},{provide:Q,useExisting:No,multi:!0}],template:'<div class="tb-form-panel no-padding no-border" [formGroup]="attributeControlGroup">\n  <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\' | translate"\n                   [popupHelpLink]="popupHelpLink"></tb-example-hint>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.client-attributes\' | translate" formControlName="clientAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.shared-attributes\' | translate" formControlName="sharedAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" class="mat-block" editable\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-attribute-key\' | translate"\n                        [label]="\'tb.rulenode.server-attributes\' | translate" formControlName="serverAttributeNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <tb-string-items-list subscriptSizing="dynamic" editable class="mat-block"\n                        (focusout)="onTouched()"\n                        [placeholder]="\'tb.rulenode.add-telemetry-key\' | translate"\n                        [label]="\'tb.rulenode.latest-telemetry\' | translate" formControlName="latestTsKeyNames">\n    <ng-container matSuffix *ngTemplateOutlet="helpIcon"></ng-container>\n  </tb-string-items-list>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.fetch-latest-telemetry-with-timestamp-tooltip\' | translate:\n                         { latestTsKeyName:  attributeControlGroup.get(\'latestTsKeyNames\').value[0]} }}"\n       *ngIf="attributeControlGroup.get(\'latestTsKeyNames\').value?.length > 0"\n       class="tb-form-row no-border no-padding">\n    <mat-slide-toggle class="mat-slide" formControlName="getLatestValueWithTs">\n      {{ \'tb.rulenode.fetch-latest-telemetry-with-timestamp\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</div>\n\n<ng-template #helpIcon>\n  <mat-icon class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n            color="primary"\n            matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n</ng-template>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:re.TranslateService},{type:H.FormBuilder}]},propDecorators:{popupHelpLink:[{type:m}]}});class So extends T{constructor(e,t){super(e),this.store=e,this.fb=t,this.propagateChange=null,this.destroy$=new de,this.alarmStatus=q,this.alarmStatusTranslations=w}ngOnInit(){this.alarmStatusGroup=this.fb.group({alarmStatus:[null,[]]}),this.alarmStatusGroup.get("alarmStatus").valueChanges.pipe(Ve(this.destroy$)).subscribe((e=>{this.propagateChange(e)}))}setDisabledState(e){e?this.alarmStatusGroup.disable({emitEvent:!1}):this.alarmStatusGroup.enable({emitEvent:!1})}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}writeValue(e){this.alarmStatusGroup.get("alarmStatus").patchValue(e,{emitEvent:!1})}}e("AlarmStatusSelectComponent",So),So.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:So,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),So.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:So,selector:"tb-alarm-status-select",providers:[{provide:j,useExisting:c((()=>So)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="alarmStatusGroup" fxLayout="column" fxLayoutAlign="center center">\n  <mat-chip-listbox multiple formControlName="alarmStatus" class="chip-listbox" fxLayout="column">\n    <div class="toggle-column">\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.ACTIVE_UNACK">\n        {{ alarmStatusTranslations.get(alarmStatus.ACTIVE_UNACK) | translate }}\n      </mat-chip-option>\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.ACTIVE_ACK">\n        {{ alarmStatusTranslations.get(alarmStatus.ACTIVE_ACK) | translate }}\n      </mat-chip-option>\n    </div>\n    <div class="toggle-column">\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.CLEARED_UNACK">\n        {{ alarmStatusTranslations.get(alarmStatus.CLEARED_UNACK) | translate }}\n      </mat-chip-option>\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.CLEARED_ACK">\n        {{ alarmStatusTranslations.get(alarmStatus.CLEARED_ACK) | translate }}\n      </mat-chip-option>\n    </div>\n  </mat-chip-listbox>\n</section>\n',styles:[":host .chip-listbox{max-width:460px;width:100%}:host .chip-listbox .toggle-column{display:flex;flex:1 1 100%;gap:8px}:host .chip-listbox .option{margin:0}@media screen and (max-width: 959px){:host .chip-listbox{max-width:360px}:host .chip-listbox .toggle-column{flex-direction:column}}:host ::ng-deep .chip-listbox .mdc-evolution-chip-set__chips{gap:8px}:host ::ng-deep .chip-listbox .option button{flex-basis:100%;justify-content:start}:host ::ng-deep .chip-listbox .option .mdc-evolution-chip__graphic{flex-grow:0}\n"],dependencies:[{kind:"component",type:Ee.MatChipListbox,selector:"mat-chip-listbox",inputs:["tabIndex","multiple","aria-orientation","selectable","compareWith","required","hideSingleSelectionIndicator","value"],outputs:["change"]},{kind:"component",type:Ee.MatChipOption,selector:"mat-basic-chip-option, [mat-basic-chip-option], mat-chip-option, [mat-chip-option]",inputs:["color","disabled","disableRipple","tabIndex","selectable","selected"],outputs:["selectionChange"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:So,decorators:[{type:n,args:[{selector:"tb-alarm-status-select",providers:[{provide:j,useExisting:c((()=>So)),multi:!0}],template:'<section [formGroup]="alarmStatusGroup" fxLayout="column" fxLayoutAlign="center center">\n  <mat-chip-listbox multiple formControlName="alarmStatus" class="chip-listbox" fxLayout="column">\n    <div class="toggle-column">\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.ACTIVE_UNACK">\n        {{ alarmStatusTranslations.get(alarmStatus.ACTIVE_UNACK) | translate }}\n      </mat-chip-option>\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.ACTIVE_ACK">\n        {{ alarmStatusTranslations.get(alarmStatus.ACTIVE_ACK) | translate }}\n      </mat-chip-option>\n    </div>\n    <div class="toggle-column">\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.CLEARED_UNACK">\n        {{ alarmStatusTranslations.get(alarmStatus.CLEARED_UNACK) | translate }}\n      </mat-chip-option>\n      <mat-chip-option fxFlex class="option" [value]="alarmStatus.CLEARED_ACK">\n        {{ alarmStatusTranslations.get(alarmStatus.CLEARED_ACK) | translate }}\n      </mat-chip-option>\n    </div>\n  </mat-chip-listbox>\n</section>\n',styles:[":host .chip-listbox{max-width:460px;width:100%}:host .chip-listbox .toggle-column{display:flex;flex:1 1 100%;gap:8px}:host .chip-listbox .option{margin:0}@media screen and (max-width: 959px){:host .chip-listbox{max-width:360px}:host .chip-listbox .toggle-column{flex-direction:column}}:host ::ng-deep .chip-listbox .mdc-evolution-chip-set__chips{gap:8px}:host ::ng-deep .chip-listbox .option button{flex-basis:100%;justify-content:start}:host ::ng-deep .chip-listbox .option .mdc-evolution-chip__graphic{flex-grow:0}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class Ao{constructor(e,t){this.fb=e,this.entityService=t,this.isTypeSelected=!1,this.propagateChange=null,this.destroy$=new de}ngOnInit(){this.targetEntityControlGroup=this.fb.group({entityGroupId:[null,[]],groupOwnerId:[null,[]]}),this.targetEntityControlGroup.get("entityGroupId").valueChanges.pipe(Ve(this.destroy$)).subscribe((e=>{this.propagateChange(e)})),this.targetEntityControlGroup.get("groupOwnerId").valueChanges.pipe(Ve(this.destroy$)).subscribe((()=>{this.targetEntityControlGroup.get("entityGroupId").patchValue(null,{emitEvent:!1})}))}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){e?this.targetEntityControlGroup.disable({emitEvent:!1}):this.targetEntityControlGroup.enable({emitEvent:!1})}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete()}writeValue(e){this.targetEntityControlGroup.get("entityGroupId").patchValue(e,{emitEvent:!1}),e&&this.entityService.getEntity(e.entityType,e.id).pipe(Ve(this.destroy$)).subscribe((e=>{this.targetEntityControlGroup.get("groupOwnerId").patchValue(e.ownerId,{emitEvent:!1})}))}}e("TargetEntityComponent",Ao),Ao.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ao,deps:[{token:H.UntypedFormBuilder},{token:ve.EntityService}],target:t.ɵɵFactoryTarget.Component}),Ao.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ao,selector:"tb-target-entity",inputs:{allowedGroupTypes:"allowedGroupTypes",isTypeSelected:"isTypeSelected"},providers:[{provide:j,useExisting:c((()=>Ao)),multi:!0}],ngImport:t,template:'<div class="same-width-component-row" [formGroup]="targetEntityControlGroup">\n  <tb-owner-autocomplete\n    formControlName="groupOwnerId"\n    [class.third-width]="isTypeSelected"\n    placeholderText="tb.rulenode.owner"\n    requiredText="tb.rulenode.owner-required"\n    required\n    notFoundText="tb.rulenode.no-owners-matching">\n  </tb-owner-autocomplete>\n  <tb-entity-group-select\n    *ngIf="targetEntityControlGroup.get(\'groupOwnerId\').value"\n    fxFlex\n    formControlName="entityGroupId"\n    [ownerId]="targetEntityControlGroup.get(\'groupOwnerId\').value"\n    [allowedGroupTypes]="allowedGroupTypes"\n    [class.flex-2]="isTypeSelected"\n    (currentGroupType)="isTypeSelected = !!$event"\n    required\n    placeholderText="entity-group.select-entity-group"\n    notFoundText="entity-group.no-entity-groups-matching"\n    requiredText="entity-group.target-entity-group-required">\n  </tb-entity-group-select>\n</div>\n',styles:[":host ::ng-deep tb-entity-group-select .tb-entity-group-select{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select{flex-direction:column;flex-wrap:wrap;gap:8px}}:host ::ng-deep tb-entity-group-select .tb-entity-group-select>*{flex:1}:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:calc(50% - 8px)}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:100%}}:host ::ng-deep tb-entity-group-select tb-entity-type-select{padding-right:0!important}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ke.OwnerAutocompleteComponent,selector:"tb-owner-autocomplete",inputs:["excludeOwnerIds","placeholderText","notFoundText","requiredText","required","useOwnerInfoValue","defaultOwnerId","disabled"]},{kind:"component",type:ze.EntityGroupSelectComponent,selector:"tb-entity-group-select",inputs:["allowedGroupTypes","excludeGroupTypes","defaultGroupType","excludeGroupIds","excludeGroupAll","placeholderText","notFoundText","requiredText","ownerId","originator","required","disabled"],outputs:["currentGroupType","currentGroupInfo"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]}]}),it([N()],Ao.prototype,"isTypeSelected",void 0),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ao,decorators:[{type:n,args:[{selector:"tb-target-entity",providers:[{provide:j,useExisting:c((()=>Ao)),multi:!0}],template:'<div class="same-width-component-row" [formGroup]="targetEntityControlGroup">\n  <tb-owner-autocomplete\n    formControlName="groupOwnerId"\n    [class.third-width]="isTypeSelected"\n    placeholderText="tb.rulenode.owner"\n    requiredText="tb.rulenode.owner-required"\n    required\n    notFoundText="tb.rulenode.no-owners-matching">\n  </tb-owner-autocomplete>\n  <tb-entity-group-select\n    *ngIf="targetEntityControlGroup.get(\'groupOwnerId\').value"\n    fxFlex\n    formControlName="entityGroupId"\n    [ownerId]="targetEntityControlGroup.get(\'groupOwnerId\').value"\n    [allowedGroupTypes]="allowedGroupTypes"\n    [class.flex-2]="isTypeSelected"\n    (currentGroupType)="isTypeSelected = !!$event"\n    required\n    placeholderText="entity-group.select-entity-group"\n    notFoundText="entity-group.no-entity-groups-matching"\n    requiredText="entity-group.target-entity-group-required">\n  </tb-entity-group-select>\n</div>\n',styles:[":host ::ng-deep tb-entity-group-select .tb-entity-group-select{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select{flex-direction:column;flex-wrap:wrap;gap:8px}}:host ::ng-deep tb-entity-group-select .tb-entity-group-select>*{flex:1}:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:calc(50% - 8px)}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:100%}}:host ::ng-deep tb-entity-group-select tb-entity-type-select{padding-right:0!important}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:H.UntypedFormBuilder},{type:ve.EntityService}]},propDecorators:{allowedGroupTypes:[{type:m}],isTypeSelected:[{type:m}]}});class qo{}e("RulenodeCoreConfigCommonModule",qo),qo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qo,deps:[],target:t.ɵɵFactoryTarget.NgModule}),qo.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:qo,declarations:[bo,ho,vo,Co,Fo,io,lo,ko,no,To,Lo,Io,No,So,Gt,Ao],imports:[X,M,at],exports:[bo,ho,vo,Co,Fo,io,lo,ko,no,To,Lo,Io,No,So,Gt,Ao]}),qo.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qo,imports:[X,M,at]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qo,decorators:[{type:d,args:[{declarations:[bo,ho,vo,Co,Fo,io,lo,ko,no,To,Lo,Io,No,So,Gt,Ao],imports:[X,M,at],exports:[bo,ho,vo,Co,Fo,io,lo,ko,no,To,Lo,Io,No,So,Gt,Ao]}]}]});class wo{}e("RuleNodeCoreConfigActionModule",wo),wo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:wo,deps:[],target:t.ɵɵFactoryTarget.NgModule}),wo.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:wo,declarations:[yo,Dt,ro,to,Yn,St,Vt,Pt,Rt,Wn,Ot,Qn,$n,Jn,eo,oo,ao,mo,po,uo,co,go,fo,Ut,Xn,Zn,so,xo],imports:[X,M,at,qo],exports:[yo,Dt,ro,to,Yn,St,Vt,Pt,Rt,Wn,Ot,Qn,$n,Jn,eo,oo,ao,mo,po,uo,co,go,fo,Ut,Xn,Zn,so,xo]}),wo.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:wo,imports:[X,M,at,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:wo,decorators:[{type:d,args:[{declarations:[yo,Dt,ro,to,Yn,St,Vt,Pt,Rt,Wn,Ot,Qn,$n,Jn,eo,oo,ao,mo,po,uo,co,go,fo,Ut,Xn,Zn,so,xo],imports:[X,M,at,qo],exports:[yo,Dt,ro,to,Yn,St,Vt,Pt,Rt,Wn,Ot,Qn,$n,Jn,eo,oo,ao,mo,po,uo,co,go,fo,Ut,Xn,Zn,so,xo]}]}]});class Mo extends g{constructor(e,t,n){super(e),this.store=e,this.translate=t,this.fb=n,this.separatorKeysCodes=[Ae,qe,we]}configForm(){return this.calculateDeltaConfigForm}onConfigurationSet(e){this.calculateDeltaConfigForm=this.fb.group({inputValueKey:[e.inputValueKey,[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]],outputValueKey:[e.outputValueKey,[K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]],useCache:[e.useCache,[]],addPeriodBetweenMsgs:[e.addPeriodBetweenMsgs,[]],periodValueKey:[e.periodValueKey,[]],round:[e.round,[K.min(0),K.max(15)]],tellFailureIfDeltaIsNegative:[e.tellFailureIfDeltaIsNegative,[]],excludeZeroDeltas:[e.excludeZeroDeltas,[]]})}prepareInputConfig(e){return{inputValueKey:Ce(e?.inputValueKey)?e.inputValueKey:null,outputValueKey:Ce(e?.outputValueKey)?e.outputValueKey:null,useCache:!Ce(e?.useCache)||e.useCache,addPeriodBetweenMsgs:!!Ce(e?.addPeriodBetweenMsgs)&&e.addPeriodBetweenMsgs,periodValueKey:Ce(e?.periodValueKey)?e.periodValueKey:null,round:Ce(e?.round)?e.round:null,tellFailureIfDeltaIsNegative:!Ce(e?.tellFailureIfDeltaIsNegative)||e.tellFailureIfDeltaIsNegative,excludeZeroDeltas:!!Ce(e?.excludeZeroDeltas)&&e.excludeZeroDeltas}}prepareOutputConfig(e){return ke(e)}updateValidators(e){this.calculateDeltaConfigForm.get("addPeriodBetweenMsgs").value?this.calculateDeltaConfigForm.get("periodValueKey").setValidators([K.required]):this.calculateDeltaConfigForm.get("periodValueKey").setValidators([]),this.calculateDeltaConfigForm.get("periodValueKey").updateValueAndValidity({emitEvent:e})}validatorTriggers(){return["addPeriodBetweenMsgs"]}}e("CalculateDeltaConfigComponent",Mo),Mo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Mo,deps:[{token:_.Store},{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Mo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Mo,selector:"tb-enrichment-node-calculate-delta-config",usesInheritance:!0,ngImport:t,template:"<section [formGroup]=\"calculateDeltaConfigForm\">\n  <div fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"22px\">\n    <mat-form-field class=\"mat-block\" fxFlex>\n      <mat-label>{{ 'tb.rulenode.input-value-key' | translate }}</mat-label>\n      <input matInput formControlName=\"inputValueKey\">\n      <mat-error *ngIf=\"calculateDeltaConfigForm.get('inputValueKey').hasError('required') ||\n      calculateDeltaConfigForm.get('inputValueKey').hasError('pattern')\">\n        {{ 'tb.rulenode.input-value-key-required' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block\" fxFlex>\n      <mat-label>{{ 'tb.rulenode.output-value-key' | translate }}</mat-label>\n      <input matInput formControlName=\"outputValueKey\">\n      <mat-error *ngIf=\"calculateDeltaConfigForm.get('outputValueKey').hasError('required') ||\n      calculateDeltaConfigForm.get('outputValueKey').hasError('pattern')\">\n        {{ 'tb.rulenode.output-value-key-required' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class=\"mat-block\" fxFlex>\n    <mat-label>{{ 'tb.rulenode.number-of-digits-after-floating-point' | translate }}</mat-label>\n    <input type=\"number\" min=\"0\" max=\"15\" step=\"1\" matInput formControlName=\"round\">\n    <mat-error *ngIf=\"calculateDeltaConfigForm.get('round').hasError('min')\">\n      {{ 'tb.rulenode.number-of-digits-after-floating-point-range' | translate }}\n    </mat-error>\n    <mat-error *ngIf=\"calculateDeltaConfigForm.get('round').hasError('max')\">\n      {{ 'tb.rulenode.number-of-digits-after-floating-point-range' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class=\"tb-form-panel no-padding no-border\">\n    <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.failure-if-delta-negative-tooltip' | translate }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"tellFailureIfDeltaIsNegative\">\n        {{ 'tb.rulenode.failure-if-delta-negative' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.use-caching-tooltip' | translate :\n                       { inputValueKey: calculateDeltaConfigForm.get('inputValueKey').valid ?\n                                calculateDeltaConfigForm.get('inputValueKey').value : 'tb.rulenode.input-value-key' | translate } }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"useCache\">\n        {{ 'tb.rulenode.use-caching' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div class=\"tb-form-panel stroked\" [class.no-padding-bottom]=\"calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value\">\n      <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.add-time-difference-between-readings-tooltip' | translate:\n                           { periodValueKey: (calculateDeltaConfigForm.get('periodValueKey').valid &&\n                           calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value) ? calculateDeltaConfigForm.get('periodValueKey').value :\n                           'periodInMs' } }}\"\n           class=\"tb-form-row no-border no-padding\">\n        <mat-slide-toggle class=\"mat-slide\" formControlName=\"addPeriodBetweenMsgs\">\n          {{ 'tb.rulenode.add-time-difference-between-readings' | translate:\n          { inputValueKey: calculateDeltaConfigForm.get('inputValueKey').valid ?\n                     calculateDeltaConfigForm.get('inputValueKey').value : 'tb.rulenode.input-value-key' | translate } }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field class=\"mat-block\" *ngIf=\"calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value\">\n        <mat-label>{{ 'tb.rulenode.period-value-key' | translate }}</mat-label>\n        <input required matInput formControlName=\"periodValueKey\">\n        <mat-error *ngIf=\"calculateDeltaConfigForm.get('periodValueKey').hasError('required')\">\n          {{ 'tb.rulenode.period-value-key-required' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div tb-hint-tooltip-icon=\"{{ calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value ? ('tb.rulenode.exclude-zero-deltas-time-difference-hint'  | translate :{\n            outputValueKey: calculateDeltaConfigForm.get('outputValueKey').valid ? calculateDeltaConfigForm.get('outputValueKey').value : 'tb.rulenode.output-value-key' | translate,\n            periodValueKey: calculateDeltaConfigForm.get('periodValueKey').valid ? calculateDeltaConfigForm.get('periodValueKey').value : 'tb.rulenode.period-value-key' | translate\n            }) : ('tb.rulenode.exclude-zero-deltas-hint' | translate :{ outputValueKey: calculateDeltaConfigForm.get('outputValueKey').valid ? calculateDeltaConfigForm.get('outputValueKey').value : 'tb.rulenode.output-value-key' | translate }) }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"excludeZeroDeltas\">\n        {{ 'tb.rulenode.exclude-zero-deltas' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n",dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Mo,decorators:[{type:n,args:[{selector:"tb-enrichment-node-calculate-delta-config",template:"<section [formGroup]=\"calculateDeltaConfigForm\">\n  <div fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"22px\">\n    <mat-form-field class=\"mat-block\" fxFlex>\n      <mat-label>{{ 'tb.rulenode.input-value-key' | translate }}</mat-label>\n      <input matInput formControlName=\"inputValueKey\">\n      <mat-error *ngIf=\"calculateDeltaConfigForm.get('inputValueKey').hasError('required') ||\n      calculateDeltaConfigForm.get('inputValueKey').hasError('pattern')\">\n        {{ 'tb.rulenode.input-value-key-required' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block\" fxFlex>\n      <mat-label>{{ 'tb.rulenode.output-value-key' | translate }}</mat-label>\n      <input matInput formControlName=\"outputValueKey\">\n      <mat-error *ngIf=\"calculateDeltaConfigForm.get('outputValueKey').hasError('required') ||\n      calculateDeltaConfigForm.get('outputValueKey').hasError('pattern')\">\n        {{ 'tb.rulenode.output-value-key-required' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class=\"mat-block\" fxFlex>\n    <mat-label>{{ 'tb.rulenode.number-of-digits-after-floating-point' | translate }}</mat-label>\n    <input type=\"number\" min=\"0\" max=\"15\" step=\"1\" matInput formControlName=\"round\">\n    <mat-error *ngIf=\"calculateDeltaConfigForm.get('round').hasError('min')\">\n      {{ 'tb.rulenode.number-of-digits-after-floating-point-range' | translate }}\n    </mat-error>\n    <mat-error *ngIf=\"calculateDeltaConfigForm.get('round').hasError('max')\">\n      {{ 'tb.rulenode.number-of-digits-after-floating-point-range' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <div class=\"tb-form-panel no-padding no-border\">\n    <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.failure-if-delta-negative-tooltip' | translate }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"tellFailureIfDeltaIsNegative\">\n        {{ 'tb.rulenode.failure-if-delta-negative' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.use-caching-tooltip' | translate :\n                       { inputValueKey: calculateDeltaConfigForm.get('inputValueKey').valid ?\n                                calculateDeltaConfigForm.get('inputValueKey').value : 'tb.rulenode.input-value-key' | translate } }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"useCache\">\n        {{ 'tb.rulenode.use-caching' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div class=\"tb-form-panel stroked\" [class.no-padding-bottom]=\"calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value\">\n      <div tb-hint-tooltip-icon=\"{{ 'tb.rulenode.add-time-difference-between-readings-tooltip' | translate:\n                           { periodValueKey: (calculateDeltaConfigForm.get('periodValueKey').valid &&\n                           calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value) ? calculateDeltaConfigForm.get('periodValueKey').value :\n                           'periodInMs' } }}\"\n           class=\"tb-form-row no-border no-padding\">\n        <mat-slide-toggle class=\"mat-slide\" formControlName=\"addPeriodBetweenMsgs\">\n          {{ 'tb.rulenode.add-time-difference-between-readings' | translate:\n          { inputValueKey: calculateDeltaConfigForm.get('inputValueKey').valid ?\n                     calculateDeltaConfigForm.get('inputValueKey').value : 'tb.rulenode.input-value-key' | translate } }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field class=\"mat-block\" *ngIf=\"calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value\">\n        <mat-label>{{ 'tb.rulenode.period-value-key' | translate }}</mat-label>\n        <input required matInput formControlName=\"periodValueKey\">\n        <mat-error *ngIf=\"calculateDeltaConfigForm.get('periodValueKey').hasError('required')\">\n          {{ 'tb.rulenode.period-value-key-required' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div tb-hint-tooltip-icon=\"{{ calculateDeltaConfigForm.get('addPeriodBetweenMsgs').value ? ('tb.rulenode.exclude-zero-deltas-time-difference-hint'  | translate :{\n            outputValueKey: calculateDeltaConfigForm.get('outputValueKey').valid ? calculateDeltaConfigForm.get('outputValueKey').value : 'tb.rulenode.output-value-key' | translate,\n            periodValueKey: calculateDeltaConfigForm.get('periodValueKey').valid ? calculateDeltaConfigForm.get('periodValueKey').value : 'tb.rulenode.period-value-key' | translate\n            }) : ('tb.rulenode.exclude-zero-deltas-hint' | translate :{ outputValueKey: calculateDeltaConfigForm.get('outputValueKey').valid ? calculateDeltaConfigForm.get('outputValueKey').value : 'tb.rulenode.output-value-key' | translate }) }}\"\n         class=\"tb-form-row same-padding\">\n      <mat-slide-toggle class=\"mat-slide margin\" formControlName=\"excludeZeroDeltas\">\n        {{ 'tb.rulenode.exclude-zero-deltas' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n</section>\n"}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:H.FormBuilder}]}});class Eo extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.dataToFetch=rn,this.dataToFetchTranslations=an,this.fetchToData=[],this.DataToFetch=rn;for(const e of an.keys())e!==rn.FIELDS&&this.fetchToData.push({value:e,name:this.translate.instant(an.get(e))})}configForm(){return this.customerAttributesConfigForm}prepareOutputConfig(e){const t={};for(const n of Object.keys(e.dataMapping))t[n.trim()]=e.dataMapping[n];return e.dataMapping=t,ke(e)}prepareInputConfig(e){let t,n;return t=Ce(e?.telemetry)?e.telemetry?rn.LATEST_TELEMETRY:rn.ATTRIBUTES:Ce(e?.dataToFetch)?e.dataToFetch:rn.ATTRIBUTES,n=Ce(e?.attrMapping)?e.attrMapping:Ce(e?.dataMapping)?e.dataMapping:null,{dataToFetch:t,dataMapping:n,fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA,preserveOriginatorIfCustomer:!!Ce(e?.preserveOriginatorIfCustomer)&&e.preserveOriginatorIfCustomer}}selectTranslation(e,t){return this.customerAttributesConfigForm.get("dataToFetch").value===rn.LATEST_TELEMETRY?e:t}onConfigurationSet(e){this.customerAttributesConfigForm=this.fb.group({dataToFetch:[e.dataToFetch,[]],dataMapping:[e.dataMapping,[K.required]],fetchTo:[e.fetchTo],preserveOriginatorIfCustomer:[e.preserveOriginatorIfCustomer,[]]})}}e("CustomerAttributesConfigComponent",Eo),Eo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Eo,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Eo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Eo,selector:"tb-enrichment-node-customer-attributes-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="customerAttributesConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.mapping-of-customers</div>\n  <div fxFlex fxLayoutAlign="center center">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="dataToFetch" appearance="fill">\n        <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\',\'tb.rulenode.attributes-mapping\') | translate"\n    [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\',\'tb.rulenode.source-attribute\') | translate"\n    [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\',\'tb.rulenode.source-attribute-required\') | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n    popupHelpLink="rulenode/customer_attributes_node_fields_templatization">\n  </tb-kv-map-config>\n  <tb-msg-metadata-chip\n    [labelText]="customerAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.LATEST_TELEMETRY ?\n    (\'tb.rulenode.add-mapped-latest-telemetry-to\' | translate) : (\'tb.rulenode.add-mapped-attribute-to\' | translate)"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.fetch-originators-attributes-customer-hint\' | translate :\n  {mappingOfCustomers: dataToFetchTranslations.get(customerAttributesConfigForm.get(\'dataToFetch\').value) | translate | lowercase } }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="preserveOriginatorIfCustomer">\n      {{ \'tb.rulenode.fetch-originators-attributes-customer\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:bo,selector:"tb-kv-map-config",inputs:["disabled","uniqueKeyValuePairValidator","labelText","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:W.LowerCasePipe,name:"lowercase"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Eo,decorators:[{type:n,args:[{selector:"tb-enrichment-node-customer-attributes-config",template:'<section [formGroup]="customerAttributesConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.mapping-of-customers</div>\n  <div fxFlex fxLayoutAlign="center center">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="dataToFetch" appearance="fill">\n        <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\',\'tb.rulenode.attributes-mapping\') | translate"\n    [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\',\'tb.rulenode.source-attribute\') | translate"\n    [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\',\'tb.rulenode.source-attribute-required\') | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n    popupHelpLink="rulenode/customer_attributes_node_fields_templatization">\n  </tb-kv-map-config>\n  <tb-msg-metadata-chip\n    [labelText]="customerAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.LATEST_TELEMETRY ?\n    (\'tb.rulenode.add-mapped-latest-telemetry-to\' | translate) : (\'tb.rulenode.add-mapped-attribute-to\' | translate)"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.fetch-originators-attributes-customer-hint\' | translate :\n  {mappingOfCustomers: dataToFetchTranslations.get(customerAttributesConfigForm.get(\'dataToFetch\').value) | translate | lowercase } }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="preserveOriginatorIfCustomer">\n      {{ \'tb.rulenode.fetch-originators-attributes-customer\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Go extends g{constructor(e,t,n){super(e),this.store=e,this.translate=t,this.fb=n}configForm(){return this.deviceAttributesConfigForm}onConfigurationSet(e){this.deviceAttributesConfigForm=this.fb.group({deviceRelationsQuery:[e.deviceRelationsQuery,[K.required]],tellFailureIfAbsent:[e.tellFailureIfAbsent,[]],fetchTo:[e.fetchTo,[]],attributesControl:[e.attributesControl,[]]})}prepareInputConfig(e){return Te(e)&&(e.attributesControl={clientAttributeNames:Ce(e?.clientAttributeNames)?e.clientAttributeNames:[],latestTsKeyNames:Ce(e?.latestTsKeyNames)?e.latestTsKeyNames:[],serverAttributeNames:Ce(e?.serverAttributeNames)?e.serverAttributeNames:[],sharedAttributeNames:Ce(e?.sharedAttributeNames)?e.sharedAttributeNames:[],getLatestValueWithTs:!!Ce(e?.getLatestValueWithTs)&&e.getLatestValueWithTs}),{deviceRelationsQuery:Ce(e?.deviceRelationsQuery)?e.deviceRelationsQuery:null,tellFailureIfAbsent:!Ce(e?.tellFailureIfAbsent)||e.tellFailureIfAbsent,fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA,attributesControl:e?e.attributesControl:null}}prepareOutputConfig(e){for(const t of Object.keys(e.attributesControl))e[t]=e.attributesControl[t];return delete e.attributesControl,e}}e("DeviceAttributesConfigComponent",Go),Go.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Go,deps:[{token:_.Store},{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Go.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Go,selector:"tb-enrichment-node-device-attributes-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deviceAttributesConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.device-relations-query</div>\n    <tb-device-relations-query-config\n      required\n      formControlName="deviceRelationsQuery">\n    </tb-device-relations-query-config>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border space-between">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.related-device-attributes</div>\n      <div class="tb-form-panel-hint tb-error" translate\n           [hidden]="!(deviceAttributesConfigForm.get(\'attributesControl\').touched &&\n                        deviceAttributesConfigForm.get(\'attributesControl\').hasError(\'atLeastOneRequired\'))">\n        tb.rulenode.at-least-one-field-required\n      </div>\n    </div>\n    <tb-select-attributes formControlName="attributesControl"\n                          popupHelpLink="rulenode/related_device_attributes_node_fields_templatization"></tb-select-attributes>\n    <tb-msg-metadata-chip formControlName="fetchTo"\n                          [labelText]="\'tb.rulenode.add-selected-attributes-to\' | translate"></tb-msg-metadata-chip>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-tooltip\' | translate }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="tellFailureIfAbsent">\n      {{ \'tb.rulenode.tell-failure\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:ho,selector:"tb-device-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"component",type:No,selector:"tb-select-attributes",inputs:["popupHelpLink"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Go,decorators:[{type:n,args:[{selector:"tb-enrichment-node-device-attributes-config",template:'<section [formGroup]="deviceAttributesConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked no-padding-bottom">\n    <div class="tb-form-panel-title" translate>tb.rulenode.device-relations-query</div>\n    <tb-device-relations-query-config\n      required\n      formControlName="deviceRelationsQuery">\n    </tb-device-relations-query-config>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border space-between">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.related-device-attributes</div>\n      <div class="tb-form-panel-hint tb-error" translate\n           [hidden]="!(deviceAttributesConfigForm.get(\'attributesControl\').touched &&\n                        deviceAttributesConfigForm.get(\'attributesControl\').hasError(\'atLeastOneRequired\'))">\n        tb.rulenode.at-least-one-field-required\n      </div>\n    </div>\n    <tb-select-attributes formControlName="attributesControl"\n                          popupHelpLink="rulenode/related_device_attributes_node_fields_templatization"></tb-select-attributes>\n    <tb-msg-metadata-chip formControlName="fetchTo"\n                          [labelText]="\'tb.rulenode.add-selected-attributes-to\' | translate"></tb-msg-metadata-chip>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-tooltip\' | translate }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="tellFailureIfAbsent">\n      {{ \'tb.rulenode.tell-failure\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:H.FormBuilder}]}});class Do extends g{constructor(e,t,n){super(e),this.store=e,this.translate=t,this.fb=n,this.predefinedValues=[];for(const e of Object.keys(Zt))this.predefinedValues.push({value:Zt[e],name:this.translate.instant(Xt.get(Zt[e]))})}ngOnInit(){super.ngOnInit()}configForm(){return this.entityDetailsConfigForm}prepareInputConfig(e){let t;return t=Ce(e?.addToMetadata)?e.addToMetadata?Dn.METADATA:Dn.DATA:e?.fetchTo?e.fetchTo:Dn.DATA,{detailsList:Ce(e?.detailsList)?e.detailsList:null,fetchTo:t}}onConfigurationSet(e){this.entityDetailsConfigForm=this.fb.group({detailsList:[e.detailsList,[K.required]],fetchTo:[e.fetchTo,[]]})}}e("EntityDetailsConfigComponent",Do),Do.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Do,deps:[{token:_.Store},{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Do.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Do,selector:"tb-enrichment-node-entity-details-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="entityDetailsConfigForm">\n  <tb-string-items-list [predefinedValues]="predefinedValues"\n                        class="mat-block" required\n                        [label]="\'tb.rulenode.select-details\' | translate"\n                        [placeholder]="\'tb.rulenode.add-detail\' | translate"\n                        [requiredText]="\'tb.rulenode.entity-details-list-empty\' | translate"\n                        formControlName="detailsList">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.detail\' | translate } }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n  <tb-msg-metadata-chip\n    [labelText]="\'tb.rulenode.add-selected-details-to\' | translate"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Do,decorators:[{type:n,args:[{selector:"tb-enrichment-node-entity-details-config",template:'<section [formGroup]="entityDetailsConfigForm">\n  <tb-string-items-list [predefinedValues]="predefinedValues"\n                        class="mat-block" required\n                        [label]="\'tb.rulenode.select-details\' | translate"\n                        [placeholder]="\'tb.rulenode.add-detail\' | translate"\n                        [requiredText]="\'tb.rulenode.entity-details-list-empty\' | translate"\n                        formControlName="detailsList">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.detail\' | translate } }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n  <tb-msg-metadata-chip\n    [labelText]="\'tb.rulenode.add-selected-details-to\' | translate"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:H.FormBuilder}]}});class Vo extends g{constructor(e,t,n){super(e),this.store=e,this.translate=t,this.fb=n,this.separatorKeysCodes=[Ae,qe,we],this.aggregationTypes=E,this.aggregations=Object.values(E),this.aggregationTypesTranslations=G,this.fetchMode=en,this.samplingOrders=Object.values(on),this.samplingOrdersTranslate=sn,this.timeUnits=Object.values($t),this.timeUnitsTranslationMap=Yt,this.deduplicationStrategiesHintTranslations=nn,this.headerOptions=[],this.timeUnitMap={[$t.MILLISECONDS]:1,[$t.SECONDS]:1e3,[$t.MINUTES]:6e4,[$t.HOURS]:36e5,[$t.DAYS]:864e5},this.intervalValidator=()=>e=>e.get("startInterval").value*this.timeUnitMap[e.get("startIntervalTimeUnit").value]<=e.get("endInterval").value*this.timeUnitMap[e.get("endIntervalTimeUnit").value]?{intervalError:!0}:null;for(const e of tn.keys())this.headerOptions.push({value:e,name:this.translate.instant(tn.get(e))})}configForm(){return this.getTelemetryFromDatabaseConfigForm}onConfigurationSet(e){this.getTelemetryFromDatabaseConfigForm=this.fb.group({latestTsKeyNames:[e.latestTsKeyNames,[K.required]],aggregation:[e.aggregation,[K.required]],fetchMode:[e.fetchMode,[K.required]],orderBy:[e.orderBy,[]],limit:[e.limit,[]],useMetadataIntervalPatterns:[e.useMetadataIntervalPatterns,[]],interval:this.fb.group({startInterval:[e.interval.startInterval,[]],startIntervalTimeUnit:[e.interval.startIntervalTimeUnit,[]],endInterval:[e.interval.endInterval,[]],endIntervalTimeUnit:[e.interval.endIntervalTimeUnit,[]]}),startIntervalPattern:[e.startIntervalPattern,[]],endIntervalPattern:[e.endIntervalPattern,[]]})}validatorTriggers(){return["fetchMode","useMetadataIntervalPatterns"]}toggleChange(e){this.getTelemetryFromDatabaseConfigForm.get("fetchMode").patchValue(e,{emitEvent:!0})}prepareOutputConfig(e){return e.startInterval=e.interval.startInterval,e.startIntervalTimeUnit=e.interval.startIntervalTimeUnit,e.endInterval=e.interval.endInterval,e.endIntervalTimeUnit=e.interval.endIntervalTimeUnit,delete e.interval,ke(e)}prepareInputConfig(e){return Te(e)&&(e.interval={startInterval:e.startInterval,startIntervalTimeUnit:e.startIntervalTimeUnit,endInterval:e.endInterval,endIntervalTimeUnit:e.endIntervalTimeUnit}),{latestTsKeyNames:Ce(e?.latestTsKeyNames)?e.latestTsKeyNames:null,aggregation:Ce(e?.aggregation)?e.aggregation:E.NONE,fetchMode:Ce(e?.fetchMode)?e.fetchMode:en.FIRST,orderBy:Ce(e?.orderBy)?e.orderBy:on.ASC,limit:Ce(e?.limit)?e.limit:1e3,useMetadataIntervalPatterns:!!Ce(e?.useMetadataIntervalPatterns)&&e.useMetadataIntervalPatterns,interval:{startInterval:Ce(e?.interval?.startInterval)?e.interval.startInterval:2,startIntervalTimeUnit:Ce(e?.interval?.startIntervalTimeUnit)?e.interval.startIntervalTimeUnit:$t.MINUTES,endInterval:Ce(e?.interval?.endInterval)?e.interval.endInterval:1,endIntervalTimeUnit:Ce(e?.interval?.endIntervalTimeUnit)?e.interval.endIntervalTimeUnit:$t.MINUTES},startIntervalPattern:Ce(e?.startIntervalPattern)?e.startIntervalPattern:null,endIntervalPattern:Ce(e?.endIntervalPattern)?e.endIntervalPattern:null}}updateValidators(e){const t=this.getTelemetryFromDatabaseConfigForm.get("fetchMode").value,n=this.getTelemetryFromDatabaseConfigForm.get("useMetadataIntervalPatterns").value;t&&t===en.ALL?(this.getTelemetryFromDatabaseConfigForm.get("aggregation").setValidators([K.required]),this.getTelemetryFromDatabaseConfigForm.get("orderBy").setValidators([K.required]),this.getTelemetryFromDatabaseConfigForm.get("limit").setValidators([K.required,K.min(2),K.max(1e3)])):(this.getTelemetryFromDatabaseConfigForm.get("aggregation").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("orderBy").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("limit").setValidators([])),n?(this.getTelemetryFromDatabaseConfigForm.get("interval.startInterval").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("interval.startIntervalTimeUnit").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("interval.endInterval").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("interval.endIntervalTimeUnit").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("interval").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").setValidators([K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").setValidators([K.required,K.pattern(/(?:.|\s)*\S(&:.|\s)*/)])):(this.getTelemetryFromDatabaseConfigForm.get("interval.startInterval").setValidators([K.required,K.min(1),K.max(2147483647)]),this.getTelemetryFromDatabaseConfigForm.get("interval.startIntervalTimeUnit").setValidators([K.required]),this.getTelemetryFromDatabaseConfigForm.get("interval.endInterval").setValidators([K.required,K.min(1),K.max(2147483647)]),this.getTelemetryFromDatabaseConfigForm.get("interval.endIntervalTimeUnit").setValidators([K.required]),this.getTelemetryFromDatabaseConfigForm.get("interval").setValidators([this.intervalValidator()]),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").setValidators([]),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").setValidators([])),this.getTelemetryFromDatabaseConfigForm.get("aggregation").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("orderBy").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("limit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("interval.startInterval").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("interval.startIntervalTimeUnit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("interval.endInterval").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("interval.endIntervalTimeUnit").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("interval").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("startIntervalPattern").updateValueAndValidity({emitEvent:e}),this.getTelemetryFromDatabaseConfigForm.get("endIntervalPattern").updateValueAndValidity({emitEvent:e})}removeKey(e,t){const n=this.getTelemetryFromDatabaseConfigForm.get(t).value,o=n.indexOf(e);o>=0&&(n.splice(o,1),this.getTelemetryFromDatabaseConfigForm.get(t).setValue(n,{emitEvent:!0}))}clearChipGrid(){this.getTelemetryFromDatabaseConfigForm.get("latestTsKeyNames").patchValue([],{emitEvent:!0})}addKey(e,t){const n=e.input;let o=e.value;if((o||"").trim()){o=o.trim();let e=this.getTelemetryFromDatabaseConfigForm.get(t).value;e&&-1!==e.indexOf(o)||(e||(e=[]),e.push(o),this.getTelemetryFromDatabaseConfigForm.get(t).setValue(e,{emitEvent:!0}))}n&&(n.value="")}defaultPaddingEnable(){return this.getTelemetryFromDatabaseConfigForm.get("fetchMode").value===en.ALL&&this.getTelemetryFromDatabaseConfigForm.get("aggregation").value===E.NONE}}e("GetTelemetryFromDatabaseConfigComponent",Vo),Vo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vo,deps:[{token:_.Store},{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Vo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Vo,selector:"tb-enrichment-node-get-telemetry-from-database",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="getTelemetryFromDatabaseConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-string-items-list class="mat-block" editable [placeholder]="\'tb.rulenode.add-timeseries-key\' | translate"\n                        subscriptSizing="dynamic" required\n                        [requiredText]="\'tb.rulenode.timeseries-keys-required\' | translate"\n                        [label]="\'tb.rulenode.timeseries-keys\' | translate" formControlName="latestTsKeyNames"\n                        [hint]="\'tb.rulenode.general-pattern-hint\' | translate">\n    <div matHintEnd class="see-example" tb-help-popup="{{\'rulenode/originator_telemetry_node_fields_templatization\'}}"\n         hintMode\n         tb-help-popup-placement="right"\n         trigger-style="letter-spacing:0.25px; font-size:12px"\n         [tb-help-popup-style]="{maxWidth: \'820px\'}"\n         trigger-text="{{ \'tb.key-val.see-examples\' | translate }}"></div>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.timeseries-key\' | translate } }}">help\n    </mat-icon>\n  </tb-string-items-list>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.fetch-interval</div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.use-metadata-dynamic-interval-tooltip\' | translate }}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="useMetadataIntervalPatterns">\n        {{ \'tb.rulenode.use-metadata-dynamic-interval\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div formGroupName="interval" fxLayout="column"\n         *ngIf="getTelemetryFromDatabaseConfigForm.get(\'useMetadataIntervalPatterns\').value === false; else intervalPattern">\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap="0" fxLayoutGap.gt-sm="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.interval-start\' | translate }}</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="startInterval" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'required\')">\n            {{ \'tb.rulenode.start-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block" hideRequiredMarker>\n          <mat-label>{{ \'tb.rulenode.time-unit\' | translate }}</mat-label>\n          <mat-select formControlName="startIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap="0" fxLayoutGap.gt-sm="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.interval-end\' | translate }}</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="endInterval" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'required\')">\n            {{ \'tb.rulenode.end-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block" hideRequiredMarker>\n          <mat-label>{{ \'tb.rulenode.time-unit\' | translate }}</mat-label>\n          <mat-select formControlName="endIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class="description-block tb-primary-fill" [class.error]="getTelemetryFromDatabaseConfigForm.get(\'interval\').invalid">\n        <mat-icon class="description-icon">error_outline</mat-icon>\n        <div class="description-text">\n          <ng-container *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval\').valid; else invalidText">\n            {{ \'tb.rulenode.fetch-timeseries-from-to\' | translate:\n            {\n              startInterval: getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').value,\n              endInterval: getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').value,\n              startIntervalTimeUnit: getTelemetryFromDatabaseConfigForm.get(\'interval.startIntervalTimeUnit\').value.toLowerCase(),\n              endIntervalTimeUnit: getTelemetryFromDatabaseConfigForm.get(\'interval.endIntervalTimeUnit\').value.toLowerCase()\n            } }}\n          </ng-container>\n          <ng-template #invalidText>\n            {{ "tb.rulenode.fetch-timeseries-from-to-invalid" | translate }}\n          </ng-template>\n        </div>\n      </div>\n    </div>\n    <ng-template #intervalPattern>\n      <div fxLayout="column" class="input-block">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{ \'tb.rulenode.start-interval\' | translate }}</mat-label>\n          <input matInput formControlName="startIntervalPattern" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startIntervalPattern\').hasError(\'required\') ||\n            getTelemetryFromDatabaseConfigForm.get(\'startIntervalPattern\').hasError(\'pattern\')">\n            {{ \'tb.rulenode.start-interval-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{ \'tb.rulenode.end-interval\' | translate }}</mat-label>\n          <input matInput formControlName="endIntervalPattern" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endIntervalPattern\').hasError(\'required\') ||\n          getTelemetryFromDatabaseConfigForm.get(\'endIntervalPattern\').hasError(\'pattern\')">\n            {{ \'tb.rulenode.end-interval-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <tb-example-hint [hintText]="\'tb.rulenode.metadata-dynamic-interval-hint\' | translate"\n                         popupHelpLink="rulenode/originator_telemetry_node_fields_templatization">\n        </tb-example-hint>\n      </div>\n    </ng-template>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.fetch-strategy</div>\n    <div class="tb-form-panel no-border no-padding item-center">\n      <div class="fetch-mod-toggle">\n        <tb-toggle-select formControlName="fetchMode" appearance="fill">\n          <tb-toggle-option *ngFor="let data of headerOptions" [value]="data.value">\n            {{ data.name }}\n          </tb-toggle-option>\n        </tb-toggle-select>\n      </div>\n      <div class="tb-form-hint tb-primary-fill hint-container">\n        {{ deduplicationStrategiesHintTranslations.get(getTelemetryFromDatabaseConfigForm.get(\'fetchMode\').value) | translate }}\n      </div>\n    </div>\n    <div *ngIf="getTelemetryFromDatabaseConfigForm.get(\'fetchMode\').value === fetchMode.ALL">\n      <mat-form-field class="mat-block" hideRequiredMarker\n                      [subscriptSizing]="defaultPaddingEnable() ? \'fixed\' : \'dynamic\'">\n        <mat-label>{{ \'aggregation.function\' | translate }}</mat-label>\n        <mat-select formControlName="aggregation" required>\n          <mat-option *ngFor="let aggregation of aggregations" [value]="aggregation">\n            {{ aggregationTypesTranslations.get(aggregationTypes[aggregation]) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div *ngIf="getTelemetryFromDatabaseConfigForm.get(\'aggregation\').value === aggregationTypes.NONE">\n        <mat-form-field class="mat-block" hideRequiredMarker>\n          <mat-label> {{ "tb.rulenode.order-by-timestamp" | translate }} </mat-label>\n          <mat-select formControlName="orderBy" required>\n            <mat-option *ngFor="let order of samplingOrders" [value]="order">\n              {{ samplingOrdersTranslate.get(order) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label>{{ "tb.rulenode.limit" | translate }}</mat-label>\n          <input type="number" min="2" max="1000" step="1" matInput formControlName="limit" required>\n          <mat-hint>{{ "tb.rulenode.limit-hint" | translate }}</mat-hint>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'required\')">\n            {{ \'tb.rulenode.limit-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'min\')">\n            {{ \'tb.rulenode.limit-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'max\')">\n            {{ \'tb.rulenode.limit-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n</section>\n',styles:[":host .see-example{display:inline-block}:host .description-block{display:flex;align-items:center;border-radius:6px;border:1px solid #EAEAEA}:host .description-block .description-icon{font-size:24px;height:24px;min-height:24px;width:24px;min-width:24px;line-height:24px;color:#d9d9d9;margin:4px}:host .description-block .description-text{font-size:12px;line-height:16px;letter-spacing:.25px;margin:6px}:host .description-block.error{color:var(--mdc-theme-error, #f44336)}:host .description-block.error .description-icon{color:var(--mdc-theme-error, #f44336)}:host .item-center{align-items:center}:host .item-center .fetch-mod-toggle{width:100%}:host .hint-container{width:100%}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:xe.HelpPopupComponent,selector:"[tb-help-popup], [tb-help-popup-content]",inputs:["tb-help-popup","tb-help-popup-content","trigger-text","trigger-style","tb-help-popup-placement","tb-help-popup-style","hintMode"]},{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vo,decorators:[{type:n,args:[{selector:"tb-enrichment-node-get-telemetry-from-database",template:'<section [formGroup]="getTelemetryFromDatabaseConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-string-items-list class="mat-block" editable [placeholder]="\'tb.rulenode.add-timeseries-key\' | translate"\n                        subscriptSizing="dynamic" required\n                        [requiredText]="\'tb.rulenode.timeseries-keys-required\' | translate"\n                        [label]="\'tb.rulenode.timeseries-keys\' | translate" formControlName="latestTsKeyNames"\n                        [hint]="\'tb.rulenode.general-pattern-hint\' | translate">\n    <div matHintEnd class="see-example" tb-help-popup="{{\'rulenode/originator_telemetry_node_fields_templatization\'}}"\n         hintMode\n         tb-help-popup-placement="right"\n         trigger-style="letter-spacing:0.25px; font-size:12px"\n         [tb-help-popup-style]="{maxWidth: \'820px\'}"\n         trigger-text="{{ \'tb.key-val.see-examples\' | translate }}"></div>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon" color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.timeseries-key\' | translate } }}">help\n    </mat-icon>\n  </tb-string-items-list>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.fetch-interval</div>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.use-metadata-dynamic-interval-tooltip\' | translate }}"\n         class="tb-form-row no-border no-padding">\n      <mat-slide-toggle class="mat-slide" formControlName="useMetadataIntervalPatterns">\n        {{ \'tb.rulenode.use-metadata-dynamic-interval\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div formGroupName="interval" fxLayout="column"\n         *ngIf="getTelemetryFromDatabaseConfigForm.get(\'useMetadataIntervalPatterns\').value === false; else intervalPattern">\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap="0" fxLayoutGap.gt-sm="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.interval-start\' | translate }}</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="startInterval" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'required\')">\n            {{ \'tb.rulenode.start-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block" hideRequiredMarker>\n          <mat-label>{{ \'tb.rulenode.time-unit\' | translate }}</mat-label>\n          <mat-select formControlName="startIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap="0" fxLayoutGap.gt-sm="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.interval-end\' | translate }}</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="endInterval" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'required\')">\n            {{ \'tb.rulenode.end-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block" hideRequiredMarker>\n          <mat-label>{{ \'tb.rulenode.time-unit\' | translate }}</mat-label>\n          <mat-select formControlName="endIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of timeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class="description-block tb-primary-fill" [class.error]="getTelemetryFromDatabaseConfigForm.get(\'interval\').invalid">\n        <mat-icon class="description-icon">error_outline</mat-icon>\n        <div class="description-text">\n          <ng-container *ngIf="getTelemetryFromDatabaseConfigForm.get(\'interval\').valid; else invalidText">\n            {{ \'tb.rulenode.fetch-timeseries-from-to\' | translate:\n            {\n              startInterval: getTelemetryFromDatabaseConfigForm.get(\'interval.startInterval\').value,\n              endInterval: getTelemetryFromDatabaseConfigForm.get(\'interval.endInterval\').value,\n              startIntervalTimeUnit: getTelemetryFromDatabaseConfigForm.get(\'interval.startIntervalTimeUnit\').value.toLowerCase(),\n              endIntervalTimeUnit: getTelemetryFromDatabaseConfigForm.get(\'interval.endIntervalTimeUnit\').value.toLowerCase()\n            } }}\n          </ng-container>\n          <ng-template #invalidText>\n            {{ "tb.rulenode.fetch-timeseries-from-to-invalid" | translate }}\n          </ng-template>\n        </div>\n      </div>\n    </div>\n    <ng-template #intervalPattern>\n      <div fxLayout="column" class="input-block">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{ \'tb.rulenode.start-interval\' | translate }}</mat-label>\n          <input matInput formControlName="startIntervalPattern" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'startIntervalPattern\').hasError(\'required\') ||\n            getTelemetryFromDatabaseConfigForm.get(\'startIntervalPattern\').hasError(\'pattern\')">\n            {{ \'tb.rulenode.start-interval-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{ \'tb.rulenode.end-interval\' | translate }}</mat-label>\n          <input matInput formControlName="endIntervalPattern" required>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'endIntervalPattern\').hasError(\'required\') ||\n          getTelemetryFromDatabaseConfigForm.get(\'endIntervalPattern\').hasError(\'pattern\')">\n            {{ \'tb.rulenode.end-interval-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <tb-example-hint [hintText]="\'tb.rulenode.metadata-dynamic-interval-hint\' | translate"\n                         popupHelpLink="rulenode/originator_telemetry_node_fields_templatization">\n        </tb-example-hint>\n      </div>\n    </ng-template>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.fetch-strategy</div>\n    <div class="tb-form-panel no-border no-padding item-center">\n      <div class="fetch-mod-toggle">\n        <tb-toggle-select formControlName="fetchMode" appearance="fill">\n          <tb-toggle-option *ngFor="let data of headerOptions" [value]="data.value">\n            {{ data.name }}\n          </tb-toggle-option>\n        </tb-toggle-select>\n      </div>\n      <div class="tb-form-hint tb-primary-fill hint-container">\n        {{ deduplicationStrategiesHintTranslations.get(getTelemetryFromDatabaseConfigForm.get(\'fetchMode\').value) | translate }}\n      </div>\n    </div>\n    <div *ngIf="getTelemetryFromDatabaseConfigForm.get(\'fetchMode\').value === fetchMode.ALL">\n      <mat-form-field class="mat-block" hideRequiredMarker\n                      [subscriptSizing]="defaultPaddingEnable() ? \'fixed\' : \'dynamic\'">\n        <mat-label>{{ \'aggregation.function\' | translate }}</mat-label>\n        <mat-select formControlName="aggregation" required>\n          <mat-option *ngFor="let aggregation of aggregations" [value]="aggregation">\n            {{ aggregationTypesTranslations.get(aggregationTypes[aggregation]) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div *ngIf="getTelemetryFromDatabaseConfigForm.get(\'aggregation\').value === aggregationTypes.NONE">\n        <mat-form-field class="mat-block" hideRequiredMarker>\n          <mat-label> {{ "tb.rulenode.order-by-timestamp" | translate }} </mat-label>\n          <mat-select formControlName="orderBy" required>\n            <mat-option *ngFor="let order of samplingOrders" [value]="order">\n              {{ samplingOrdersTranslate.get(order) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label>{{ "tb.rulenode.limit" | translate }}</mat-label>\n          <input type="number" min="2" max="1000" step="1" matInput formControlName="limit" required>\n          <mat-hint>{{ "tb.rulenode.limit-hint" | translate }}</mat-hint>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'required\')">\n            {{ \'tb.rulenode.limit-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'min\')">\n            {{ \'tb.rulenode.limit-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="getTelemetryFromDatabaseConfigForm.get(\'limit\').hasError(\'max\')">\n            {{ \'tb.rulenode.limit-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n</section>\n',styles:[":host .see-example{display:inline-block}:host .description-block{display:flex;align-items:center;border-radius:6px;border:1px solid #EAEAEA}:host .description-block .description-icon{font-size:24px;height:24px;min-height:24px;width:24px;min-width:24px;line-height:24px;color:#d9d9d9;margin:4px}:host .description-block .description-text{font-size:12px;line-height:16px;letter-spacing:.25px;margin:6px}:host .description-block.error{color:var(--mdc-theme-error, #f44336)}:host .description-block.error .description-icon{color:var(--mdc-theme-error, #f44336)}:host .item-center{align-items:center}:host .item-center .fetch-mod-toggle{width:100%}:host .hint-container{width:100%}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:H.FormBuilder}]}});class Po extends g{constructor(e,t,n){super(e),this.store=e,this.translate=t,this.fb=n}configForm(){return this.originatorAttributesConfigForm}onConfigurationSet(e){this.originatorAttributesConfigForm=this.fb.group({tellFailureIfAbsent:[e.tellFailureIfAbsent,[]],fetchTo:[e.fetchTo,[]],attributesControl:[e.attributesControl,[]]})}prepareInputConfig(e){return Te(e)&&(e.attributesControl={clientAttributeNames:Ce(e?.clientAttributeNames)?e.clientAttributeNames:[],latestTsKeyNames:Ce(e?.latestTsKeyNames)?e.latestTsKeyNames:[],serverAttributeNames:Ce(e?.serverAttributeNames)?e.serverAttributeNames:[],sharedAttributeNames:Ce(e?.sharedAttributeNames)?e.sharedAttributeNames:[],getLatestValueWithTs:!!Ce(e?.getLatestValueWithTs)&&e.getLatestValueWithTs}),{fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA,tellFailureIfAbsent:!!Ce(e?.tellFailureIfAbsent)&&e.tellFailureIfAbsent,attributesControl:Ce(e?.attributesControl)?e.attributesControl:null}}prepareOutputConfig(e){for(const t of Object.keys(e.attributesControl))e[t]=e.attributesControl[t];return delete e.attributesControl,e}}e("OriginatorAttributesConfigComponent",Po),Po.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Po,deps:[{token:_.Store},{token:re.TranslateService},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Po.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Po,selector:"tb-enrichment-node-originator-attributes-config",usesInheritance:!0,ngImport:t,template:'<section class="tb-form-panel no-padding no-border" [formGroup]="originatorAttributesConfigForm">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border space-between">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.originator-attributes</div>\n      <div class="tb-form-panel-hint tb-error" translate\n           [hidden]="!(originatorAttributesConfigForm.get(\'attributesControl\').touched &&\n                        originatorAttributesConfigForm.get(\'attributesControl\').hasError(\'atLeastOneRequired\'))">\n        tb.rulenode.at-least-one-field-required\n      </div>\n    </div>\n    <tb-select-attributes formControlName="attributesControl"\n                          popupHelpLink="rulenode/originator_attributes_node_fields_templatization">\n    </tb-select-attributes>\n    <tb-msg-metadata-chip [labelText]="\'tb.rulenode.add-originator-attributes-to\' | translate"\n                          formControlName="fetchTo">\n    </tb-msg-metadata-chip>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-tooltip\' | translate }}" class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="tellFailureIfAbsent">\n      {{ \'tb.rulenode.tell-failure\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"component",type:No,selector:"tb-select-attributes",inputs:["popupHelpLink"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Po,decorators:[{type:n,args:[{selector:"tb-enrichment-node-originator-attributes-config",template:'<section class="tb-form-panel no-padding no-border" [formGroup]="originatorAttributesConfigForm">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border space-between">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.originator-attributes</div>\n      <div class="tb-form-panel-hint tb-error" translate\n           [hidden]="!(originatorAttributesConfigForm.get(\'attributesControl\').touched &&\n                        originatorAttributesConfigForm.get(\'attributesControl\').hasError(\'atLeastOneRequired\'))">\n        tb.rulenode.at-least-one-field-required\n      </div>\n    </div>\n    <tb-select-attributes formControlName="attributesControl"\n                          popupHelpLink="rulenode/originator_attributes_node_fields_templatization">\n    </tb-select-attributes>\n    <tb-msg-metadata-chip [labelText]="\'tb.rulenode.add-originator-attributes-to\' | translate"\n                          formControlName="fetchTo">\n    </tb-msg-metadata-chip>\n  </div>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-tooltip\' | translate }}" class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="tellFailureIfAbsent">\n      {{ \'tb.rulenode.tell-failure\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:H.FormBuilder}]}});class Ro extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.originatorFields=[];for(const e of Kt)this.originatorFields.push({value:e.value,name:this.translate.instant(e.name)})}configForm(){return this.originatorFieldsConfigForm}prepareOutputConfig(e){return ke(e)}prepareInputConfig(e){return{dataMapping:Ce(e?.dataMapping)?e.dataMapping:null,ignoreNullStrings:Ce(e?.ignoreNullStrings)?e.ignoreNullStrings:null,fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA}}onConfigurationSet(e){this.originatorFieldsConfigForm=this.fb.group({dataMapping:[e.dataMapping,[K.required]],ignoreNullStrings:[e.ignoreNullStrings,[]],fetchTo:[e.fetchTo,[]]})}}e("OriginatorFieldsConfigComponent",Ro),Ro.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ro,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Ro.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ro,selector:"tb-enrichment-node-originator-fields-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="originatorFieldsConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-sv-map-config\n    required\n    [selectOptions]="originatorFields"\n    targetKeyPrefix="originator"\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="\'tb.rulenode.originator-fields-mapping\' | translate"\n    [selectText]="\'tb.rulenode.source-field\' | translate"\n    [selectRequiredText]="\'tb.rulenode.source-field-required\' | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.originator-fields-sv-map-hint\' | translate"\n    popupHelpLink="rulenode/originator_fields_node_fields_templatization">\n  </tb-sv-map-config>\n  <tb-msg-metadata-chip [labelText]="\'tb.rulenode.add-mapped-originator-fields-to\' | translate"\n                        formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.skip-empty-fields-tooltip\' | translate }}" class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="ignoreNullStrings">\n      {{ \'tb.rulenode.skip-empty-fields\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',dependencies:[{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"component",type:Lo,selector:"tb-sv-map-config",inputs:["selectOptions","disabled","labelText","requiredText","targetKeyPrefix","selectText","selectRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ro,decorators:[{type:n,args:[{selector:"tb-enrichment-node-originator-fields-config",template:'<section [formGroup]="originatorFieldsConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-sv-map-config\n    required\n    [selectOptions]="originatorFields"\n    targetKeyPrefix="originator"\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="\'tb.rulenode.originator-fields-mapping\' | translate"\n    [selectText]="\'tb.rulenode.source-field\' | translate"\n    [selectRequiredText]="\'tb.rulenode.source-field-required\' | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.originator-fields-sv-map-hint\' | translate"\n    popupHelpLink="rulenode/originator_fields_node_fields_templatization">\n  </tb-sv-map-config>\n  <tb-msg-metadata-chip [labelText]="\'tb.rulenode.add-mapped-originator-fields-to\' | translate"\n                        formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.skip-empty-fields-tooltip\' | translate }}" class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="ignoreNullStrings">\n      {{ \'tb.rulenode.skip-empty-fields\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Oo extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.DataToFetch=rn,this.msgMetadataLabelTranslations=ln,this.originatorFields=[],this.fetchToData=[];for(const e of Object.keys(Kt))this.originatorFields.push({value:Kt[e].value,name:this.translate.instant(Kt[e].name)});for(const e of an.keys())this.fetchToData.push({value:e,name:this.translate.instant(an.get(e))})}configForm(){return this.relatedAttributesConfigForm}prepareOutputConfig(e){e.dataToFetch===rn.FIELDS?(e.dataMapping=e.svMap,delete e.svMap):(e.dataMapping=e.kvMap,delete e.kvMap);const t={};if(e&&e.dataMapping)for(const n of Object.keys(e.dataMapping))t[n.trim()]=e.dataMapping[n];return e.dataMapping=t,delete e.svMap,delete e.kvMap,ke(e)}prepareInputConfig(e){let t,n,o={[F.name.value]:`relatedEntity${this.translate.instant(F.name.name)}`},r={serialNumber:"sn"};return t=Ce(e?.telemetry)?e.telemetry?rn.LATEST_TELEMETRY:rn.ATTRIBUTES:Ce(e?.dataToFetch)?e.dataToFetch:rn.ATTRIBUTES,n=Ce(e?.attrMapping)?e.attrMapping:Ce(e?.dataMapping)?e.dataMapping:null,t===rn.FIELDS?o=n:r=n,{relationsQuery:Ce(e?.relationsQuery)?e.relationsQuery:null,dataToFetch:t,svMap:o,kvMap:r,fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA}}selectTranslation(e,t){return this.relatedAttributesConfigForm.get("dataToFetch").value===rn.LATEST_TELEMETRY?e:t}onConfigurationSet(e){this.relatedAttributesConfigForm=this.fb.group({relationsQuery:[e.relationsQuery,[K.required]],dataToFetch:[e.dataToFetch,[]],kvMap:[e.kvMap,[K.required]],svMap:[e.svMap,[K.required]],fetchTo:[e.fetchTo,[]]})}validatorTriggers(){return["dataToFetch"]}updateValidators(e){this.relatedAttributesConfigForm.get("dataToFetch").value===rn.FIELDS?(this.relatedAttributesConfigForm.get("svMap").enable({emitEvent:!1}),this.relatedAttributesConfigForm.get("kvMap").disable({emitEvent:!1}),this.relatedAttributesConfigForm.get("svMap").updateValueAndValidity()):(this.relatedAttributesConfigForm.get("svMap").disable({emitEvent:!1}),this.relatedAttributesConfigForm.get("kvMap").enable({emitEvent:!1}),this.relatedAttributesConfigForm.get("kvMap").updateValueAndValidity())}}e("RelatedAttributesConfigComponent",Oo),Oo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Oo,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Oo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Oo,selector:"tb-enrichment-node-related-attributes-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="relatedAttributesConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-relations-query-config\n    required\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.data-to-fetch</div>\n    <tb-toggle-select formControlName="dataToFetch" appearance="fill">\n      <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n        {{ data.name }}\n      </tb-toggle-option>\n    </tb-toggle-select>\n    <tb-kv-map-config\n      [hidden]="relatedAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.FIELDS"\n      required\n      formControlName="kvMap"\n      [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n      [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\',\'tb.rulenode.attributes-mapping\') | translate"\n      [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\',\'tb.rulenode.source-attribute\') | translate"\n      [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\',\'tb.rulenode.source-attribute-required\') | translate"\n      [valText]="\'tb.rulenode.target-key\' | translate"\n      [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n      [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n      popupHelpLink="rulenode/related_entity_data_node_fields_templatization">\n    </tb-kv-map-config>\n    <tb-sv-map-config\n      [hidden]="relatedAttributesConfigForm.get(\'dataToFetch\').value !== DataToFetch.FIELDS"\n      required\n      [labelText]="\'tb.rulenode.fields-mapping\' | translate"\n      targetKeyPrefix="relatedEntity"\n      [selectOptions]="originatorFields"\n      formControlName="svMap"\n      [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n      [selectText]="\'tb.rulenode.source-field\' | translate"\n      [selectRequiredText]="\'tb.rulenode.source-field-required\' | translate"\n      [valText]="\'tb.rulenode.target-key\' | translate"\n      [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n      [hintText]="\'tb.rulenode.sv-map-hint\' | translate"\n      popupHelpLink="rulenode/related_entity_data_node_fields_templatization">\n    </tb-sv-map-config>\n    <tb-msg-metadata-chip formControlName="fetchTo"\n                          [labelText]="msgMetadataLabelTranslations.get(relatedAttributesConfigForm.get(\'dataToFetch\').value) | translate">\n    </tb-msg-metadata-chip>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:bo,selector:"tb-kv-map-config",inputs:["disabled","uniqueKeyValuePairValidator","labelText","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"component",type:Lo,selector:"tb-sv-map-config",inputs:["selectOptions","disabled","labelText","requiredText","targetKeyPrefix","selectText","selectRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Oo,decorators:[{type:n,args:[{selector:"tb-enrichment-node-related-attributes-config",template:'<section [formGroup]="relatedAttributesConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-relations-query-config\n    required\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.data-to-fetch</div>\n    <tb-toggle-select formControlName="dataToFetch" appearance="fill">\n      <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n        {{ data.name }}\n      </tb-toggle-option>\n    </tb-toggle-select>\n    <tb-kv-map-config\n      [hidden]="relatedAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.FIELDS"\n      required\n      formControlName="kvMap"\n      [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n      [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\',\'tb.rulenode.attributes-mapping\') | translate"\n      [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\',\'tb.rulenode.source-attribute\') | translate"\n      [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\',\'tb.rulenode.source-attribute-required\') | translate"\n      [valText]="\'tb.rulenode.target-key\' | translate"\n      [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n      [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n      popupHelpLink="rulenode/related_entity_data_node_fields_templatization">\n    </tb-kv-map-config>\n    <tb-sv-map-config\n      [hidden]="relatedAttributesConfigForm.get(\'dataToFetch\').value !== DataToFetch.FIELDS"\n      required\n      [labelText]="\'tb.rulenode.fields-mapping\' | translate"\n      targetKeyPrefix="relatedEntity"\n      [selectOptions]="originatorFields"\n      formControlName="svMap"\n      [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n      [selectText]="\'tb.rulenode.source-field\' | translate"\n      [selectRequiredText]="\'tb.rulenode.source-field-required\' | translate"\n      [valText]="\'tb.rulenode.target-key\' | translate"\n      [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n      [hintText]="\'tb.rulenode.sv-map-hint\' | translate"\n      popupHelpLink="rulenode/related_entity_data_node_fields_templatization">\n    </tb-sv-map-config>\n    <tb-msg-metadata-chip formControlName="fetchTo"\n                          [labelText]="msgMetadataLabelTranslations.get(relatedAttributesConfigForm.get(\'dataToFetch\').value) | translate">\n    </tb-msg-metadata-chip>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Uo extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.fetchToData=[],this.DataToFetch=rn;for(const e of an.keys())e!==rn.FIELDS&&this.fetchToData.push({value:e,name:this.translate.instant(an.get(e))})}configForm(){return this.tenantAttributesConfigForm}prepareInputConfig(e){let t,n;return t=Ce(e?.telemetry)?e.telemetry?rn.LATEST_TELEMETRY:rn.ATTRIBUTES:Ce(e?.dataToFetch)?e.dataToFetch:rn.ATTRIBUTES,n=Ce(e?.attrMapping)?e.attrMapping:Ce(e?.dataMapping)?e.dataMapping:null,{dataToFetch:t,dataMapping:n,fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA}}selectTranslation(e,t){return this.tenantAttributesConfigForm.get("dataToFetch").value===rn.LATEST_TELEMETRY?e:t}onConfigurationSet(e){this.tenantAttributesConfigForm=this.fb.group({dataToFetch:[e.dataToFetch,[]],dataMapping:[e.dataMapping,[K.required]],fetchTo:[e.fetchTo,[]]})}}e("TenantAttributesConfigComponent",Uo),Uo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Uo,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Uo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Uo,selector:"tb-enrichment-node-tenant-attributes-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="tenantAttributesConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.mapping-of-tenant</div>\n  <div fxFlex fxLayoutAlign="center center">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="dataToFetch" appearance="fill">\n        <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\', \'tb.rulenode.attributes-mapping\') | translate"\n    [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\', \'tb.rulenode.source-attribute\') | translate"\n    [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\', \'tb.rulenode.source-attribute-required\') | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n    popupHelpLink="rulenode/tenant_attributes_node_fields_templatization">\n  </tb-kv-map-config>\n  <tb-msg-metadata-chip formControlName="fetchTo"\n                        [labelText]="tenantAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.LATEST_TELEMETRY ?\n                        (\'tb.rulenode.add-mapped-latest-telemetry-to\' | translate) : (\'tb.rulenode.add-mapped-attribute-to\' | translate)">\n  </tb-msg-metadata-chip>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:bo,selector:"tb-kv-map-config",inputs:["disabled","uniqueKeyValuePairValidator","labelText","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Uo,decorators:[{type:n,args:[{selector:"tb-enrichment-node-tenant-attributes-config",template:'<section [formGroup]="tenantAttributesConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.mapping-of-tenant</div>\n  <div fxFlex fxLayoutAlign="center center">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="dataToFetch" appearance="fill">\n        <tb-toggle-option *ngFor="let data of fetchToData" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    formControlName="dataMapping"\n    [requiredText]="\'tb.rulenode.attr-mapping-required\' | translate"\n    [labelText]="selectTranslation(\'tb.rulenode.latest-telemetry-mapping\', \'tb.rulenode.attributes-mapping\') | translate"\n    [keyText]="selectTranslation(\'tb.rulenode.source-telemetry\', \'tb.rulenode.source-attribute\') | translate"\n    [keyRequiredText]="selectTranslation(\'tb.rulenode.source-telemetry-required\', \'tb.rulenode.source-attribute-required\') | translate"\n    [valText]="\'tb.rulenode.target-key\' | translate"\n    [valRequiredText]="\'tb.rulenode.target-key-required\' | translate"\n    [hintText]="\'tb.rulenode.kv-map-pattern-hint\'"\n    popupHelpLink="rulenode/tenant_attributes_node_fields_templatization">\n  </tb-kv-map-config>\n  <tb-msg-metadata-chip formControlName="fetchTo"\n                        [labelText]="tenantAttributesConfigForm.get(\'dataToFetch\').value === DataToFetch.LATEST_TELEMETRY ?\n                        (\'tb.rulenode.add-mapped-latest-telemetry-to\' | translate) : (\'tb.rulenode.add-mapped-attribute-to\' | translate)">\n  </tb-msg-metadata-chip>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Bo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.fetchDeviceCredentialsConfigForm}prepareInputConfig(e){return{fetchTo:Ce(e?.fetchTo)?e.fetchTo:Dn.METADATA}}onConfigurationSet(e){this.fetchDeviceCredentialsConfigForm=this.fb.group({fetchTo:[e.fetchTo,[]]})}}e("FetchDeviceCredentialsConfigComponent",Bo),Bo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Bo,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Bo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Bo,selector:"./tb-enrichment-node-fetch-device-credentials-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="fetchDeviceCredentialsConfigForm">\n  <tb-msg-metadata-chip\n    [labelText]="\'tb.rulenode.fetch-credentials-to\' | translate"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n</section>\n',dependencies:[{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Bo,decorators:[{type:n,args:[{selector:"./tb-enrichment-node-fetch-device-credentials-config",template:'<section [formGroup]="fetchDeviceCredentialsConfigForm">\n  <tb-msg-metadata-chip\n    [labelText]="\'tb.rulenode.fetch-credentials-to\' | translate"\n    formControlName="fetchTo">\n  </tb-msg-metadata-chip>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class _o{}e("RulenodeCoreConfigEnrichmentModule",_o),_o.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:_o,deps:[],target:t.ɵɵFactoryTarget.NgModule}),_o.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:_o,declarations:[Eo,Do,Go,Po,Ro,Vo,Oo,Uo,Mo,Bo],imports:[X,M,qo],exports:[Eo,Do,Go,Po,Ro,Vo,Oo,Uo,Mo,Bo]}),_o.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:_o,imports:[X,M,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:_o,decorators:[{type:d,args:[{declarations:[Eo,Do,Go,Po,Ro,Vo,Oo,Uo,Mo,Bo],imports:[X,M,qo],exports:[Eo,Do,Go,Po,Ro,Vo,Oo,Uo,Mo,Bo]}]}]});const Ho=/^((http|https):\/\/)?(127\.|(10\.)|(172\.1[6-9]\.)|(172\.2[0-9]\.)|(172\.3[0-1]\.)|(192\.168\.)|localhost$)/;function Ko(e){if(e.value){const t=e.value.trim();return Ho.test(t)?{privateNetwork:{valid:!1}}:null}return null}class zo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.allAzureIotHubCredentialsTypes=cn,this.azureIotHubCredentialsTypeTranslationsMap=gn}configForm(){return this.azureIotHubConfigForm}onConfigurationSet(e){this.azureIotHubConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[K.required]],host:[e?e.host:null,[K.required,Ko]],port:[e?e.port:null,[K.required,K.min(1),K.max(65535)]],connectTimeoutSec:[e?e.connectTimeoutSec:null,[K.required,K.min(1),K.max(200)]],clientId:[e?e.clientId:null,[K.required]],cleanSession:[!!e&&e.cleanSession,[]],ssl:[!!e&&e.ssl,[]],credentials:this.fb.group({type:[e&&e.credentials?e.credentials.type:null,[K.required]],sasKey:[e&&e.credentials?e.credentials.sasKey:null,[]],caCert:[e&&e.credentials?e.credentials.caCert:null,[]],caCertFileName:[e&&e.credentials?e.credentials.caCertFileName:null,[]],privateKey:[e&&e.credentials?e.credentials.privateKey:null,[]],privateKeyFileName:[e&&e.credentials?e.credentials.privateKeyFileName:null,[]],cert:[e&&e.credentials?e.credentials.cert:null,[]],certFileName:[e&&e.credentials?e.credentials.certFileName:null,[]],password:[e&&e.credentials?e.credentials.password:null,[]]})})}prepareOutputConfig(e){const t=e.credentials.type;return"sas"===t&&(e.credentials={type:t,sasKey:e.credentials.sasKey,caCert:e.credentials.caCert,caCertFileName:e.credentials.caCertFileName}),e}validatorTriggers(){return["credentials.type"]}updateValidators(e){const t=this.azureIotHubConfigForm.get("credentials"),n=t.get("type").value;switch(e&&t.reset({type:n},{emitEvent:!1}),t.get("sasKey").setValidators([]),t.get("privateKey").setValidators([]),t.get("privateKeyFileName").setValidators([]),t.get("cert").setValidators([]),t.get("certFileName").setValidators([]),n){case"sas":t.get("sasKey").setValidators([K.required]);break;case"cert.PEM":t.get("privateKey").setValidators([K.required]),t.get("privateKeyFileName").setValidators([K.required]),t.get("cert").setValidators([K.required]),t.get("certFileName").setValidators([K.required])}t.get("sasKey").updateValueAndValidity({emitEvent:e}),t.get("privateKey").updateValueAndValidity({emitEvent:e}),t.get("privateKeyFileName").updateValueAndValidity({emitEvent:e}),t.get("cert").updateValueAndValidity({emitEvent:e}),t.get("certFileName").updateValueAndValidity({emitEvent:e})}}e("AzureIotHubConfigComponent",zo),zo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:zo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),zo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:zo,selector:"tb-external-node-azure-iot-hub-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="azureIotHubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.hostname</mat-label>\n    <input required matInput formControlName="host">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'host\').hasError(\'required\')">\n      {{ \'tb.rulenode.hostname-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.host-private\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.device-id</mat-label>\n    <input required matInput formControlName="clientId" autocomplete="new-clientId">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'clientId\').hasError(\'required\')">\n      {{ \'tb.rulenode.device-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-accordion>\n    <mat-expansion-panel class="tb-mqtt-credentials-panel-group">\n      <mat-expansion-panel-header>\n        <mat-panel-title class="tb-required" translate>tb.rulenode.credentials</mat-panel-title>\n        <mat-panel-description>\n          {{ azureIotHubCredentialsTypeTranslationsMap.get(azureIotHubConfigForm.get(\'credentials.type\').value) | translate }}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <section formGroupName="credentials" fxLayout="column">\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.credentials-type</mat-label>\n          <mat-select formControlName="type" required>\n            <mat-option *ngFor="let credentialsType of allAzureIotHubCredentialsTypes" [value]="credentialsType">\n              {{ azureIotHubCredentialsTypeTranslationsMap.get(credentialsType) | translate }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.type\').hasError(\'required\')">\n            {{ \'tb.rulenode.credentials-type-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <section fxLayout="column" [ngSwitch]="azureIotHubConfigForm.get(\'credentials.type\').value">\n          <ng-template ngSwitchCase="anonymous">\n          </ng-template>\n          <ng-template ngSwitchCase="sas">\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.sas-key</mat-label>\n              <input type="password" required matInput formControlName="sasKey" autocomplete="new-password">\n              <tb-toggle-password matSuffix></tb-toggle-password>\n              <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.sasKey\').hasError(\'required\')">\n                {{ \'tb.rulenode.sas-key-required\' | translate }}\n              </mat-error>\n            </mat-form-field>\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n          </ng-template>\n          <ng-template ngSwitchCase="cert.PEM">\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input formControlName="cert"\n                           inputId="CertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.certFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.certFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input style="padding-bottom: 8px;"\n                           formControlName="privateKey"\n                           inputId="privateKeySelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.private-key\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.private-key-password</mat-label>\n              <input type="password" matInput formControlName="password" autocomplete="new-password">\n              <tb-toggle-password matSuffix></tb-toggle-password>\n            </mat-form-field>\n          </ng-template>\n        </section>\n      </section>\n    </mat-expansion-panel>\n  </mat-accordion>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:W.NgSwitch,selector:"[ngSwitch]",inputs:["ngSwitch"]},{kind:"directive",type:W.NgSwitchCase,selector:"[ngSwitchCase]",inputs:["ngSwitchCase"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:pe.MatAccordion,selector:"mat-accordion",inputs:["multi","hideToggle","displayMode","togglePosition"],exportAs:["matAccordion"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:pe.MatExpansionPanelDescription,selector:"mat-panel-description"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"component",type:mt.FileInputComponent,selector:"tb-file-input",inputs:["label","hint","accept","noFileText","inputId","allowedExtensions","dropLabel","maxSizeByte","contentConvertFunction","required","requiredAsError","disabled","existingFileName","readAsBinary","workFromFileObj","multipleFile"],outputs:["fileNameChanged"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:pt.TogglePasswordComponent,selector:"tb-toggle-password"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:zo,decorators:[{type:n,args:[{selector:"tb-external-node-azure-iot-hub-config",template:'<section [formGroup]="azureIotHubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.hostname</mat-label>\n    <input required matInput formControlName="host">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'host\').hasError(\'required\')">\n      {{ \'tb.rulenode.hostname-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.host-private\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.device-id</mat-label>\n    <input required matInput formControlName="clientId" autocomplete="new-clientId">\n    <mat-error *ngIf="azureIotHubConfigForm.get(\'clientId\').hasError(\'required\')">\n      {{ \'tb.rulenode.device-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-accordion>\n    <mat-expansion-panel class="tb-mqtt-credentials-panel-group">\n      <mat-expansion-panel-header>\n        <mat-panel-title class="tb-required" translate>tb.rulenode.credentials</mat-panel-title>\n        <mat-panel-description>\n          {{ azureIotHubCredentialsTypeTranslationsMap.get(azureIotHubConfigForm.get(\'credentials.type\').value) | translate }}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <section formGroupName="credentials" fxLayout="column">\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.credentials-type</mat-label>\n          <mat-select formControlName="type" required>\n            <mat-option *ngFor="let credentialsType of allAzureIotHubCredentialsTypes" [value]="credentialsType">\n              {{ azureIotHubCredentialsTypeTranslationsMap.get(credentialsType) | translate }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.type\').hasError(\'required\')">\n            {{ \'tb.rulenode.credentials-type-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <section fxLayout="column" [ngSwitch]="azureIotHubConfigForm.get(\'credentials.type\').value">\n          <ng-template ngSwitchCase="anonymous">\n          </ng-template>\n          <ng-template ngSwitchCase="sas">\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.sas-key</mat-label>\n              <input type="password" required matInput formControlName="sasKey" autocomplete="new-password">\n              <tb-toggle-password matSuffix></tb-toggle-password>\n              <mat-error *ngIf="azureIotHubConfigForm.get(\'credentials.sasKey\').hasError(\'required\')">\n                {{ \'tb.rulenode.sas-key-required\' | translate }}\n              </mat-error>\n            </mat-form-field>\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n          </ng-template>\n          <ng-template ngSwitchCase="cert.PEM">\n            <tb-file-input formControlName="caCert"\n                           inputId="caCertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.caCertFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.caCertFileName\').setValue($event)"\n                           label="{{\'tb.rulenode.azure-ca-cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input formControlName="cert"\n                           inputId="CertSelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.certFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.certFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.cert\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <tb-file-input style="padding-bottom: 8px;"\n                           formControlName="privateKey"\n                           inputId="privateKeySelect"\n                           [existingFileName]="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').value"\n                           (fileNameChanged)="azureIotHubConfigForm.get(\'credentials.privateKeyFileName\').setValue($event)"\n                           required\n                           requiredAsError\n                           label="{{\'tb.rulenode.private-key\' | translate}}"\n                           noFileText="tb.rulenode.no-file"\n                           dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n            </tb-file-input>\n            <mat-form-field class="mat-block">\n              <mat-label translate>tb.rulenode.private-key-password</mat-label>\n              <input type="password" matInput formControlName="password" autocomplete="new-password">\n              <tb-toggle-password matSuffix></tb-toggle-password>\n            </mat-form-field>\n          </ng-template>\n        </section>\n      </section>\n    </mat-expansion-panel>\n  </mat-accordion>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class jo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.ackValues=["all","-1","0","1"],this.ToByteStandartCharsetTypesValues=Nn,this.ToByteStandartCharsetTypeTranslationMap=Sn}configForm(){return this.kafkaConfigForm}onConfigurationSet(e){this.kafkaConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[K.required]],keyPattern:[e?e.keyPattern:null],bootstrapServers:[e?e.bootstrapServers:null,[K.required,Ko]],retries:[e?e.retries:null,[K.min(0)]],batchSize:[e?e.batchSize:null,[K.min(0)]],linger:[e?e.linger:null,[K.min(0)]],bufferMemory:[e?e.bufferMemory:null,[K.min(0)]],acks:[e?e.acks:null,[K.required]],keySerializer:[e?e.keySerializer:null,[K.required]],valueSerializer:[e?e.valueSerializer:null,[K.required]],otherProperties:[e?e.otherProperties:null,[]],addMetadataKeyValuesAsKafkaHeaders:[!!e&&e.addMetadataKeyValuesAsKafkaHeaders,[]],kafkaHeadersCharset:[e?e.kafkaHeadersCharset:null,[]]})}validatorTriggers(){return["addMetadataKeyValuesAsKafkaHeaders"]}updateValidators(e){this.kafkaConfigForm.get("addMetadataKeyValuesAsKafkaHeaders").value?this.kafkaConfigForm.get("kafkaHeadersCharset").setValidators([K.required]):this.kafkaConfigForm.get("kafkaHeadersCharset").setValidators([]),this.kafkaConfigForm.get("kafkaHeadersCharset").updateValueAndValidity({emitEvent:e})}}e("KafkaConfigComponent",jo),jo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:jo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),jo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:jo,selector:"tb-external-node-kafka-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="kafkaConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="kafkaConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.key-pattern</mat-label>\n    <input matInput formControlName="keyPattern">\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <div class="tb-hint" translate>tb.rulenode.key-pattern-hint</div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.bootstrap-servers</mat-label>\n    <input required matInput formControlName="bootstrapServers">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bootstrapServers\').hasError(\'required\')">\n      {{ \'tb.rulenode.bootstrap-servers-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="kafkaConfigForm.get(\'bootstrapServers\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.host-private\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.retries</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="retries">\n    <mat-error *ngIf="kafkaConfigForm.get(\'retries\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-retries-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.batch-size-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="batchSize">\n    <mat-error *ngIf="kafkaConfigForm.get(\'batchSize\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-batch-size-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.linger-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="linger">\n    <mat-error *ngIf="kafkaConfigForm.get(\'linger\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-linger-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.buffer-memory-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="bufferMemory">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bufferMemory\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-buffer-memory-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.acks</mat-label>\n    <mat-select formControlName="acks" required>\n      <mat-option *ngFor="let ackValue of ackValues" [value]="ackValue">\n        {{ ackValue }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.key-serializer</mat-label>\n    <input required matInput formControlName="keySerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'keySerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.key-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.value-serializer</mat-label>\n    <input required matInput formControlName="valueSerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'valueSerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.value-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.other-properties</label>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="otherProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <mat-checkbox fxFlex formControlName="addMetadataKeyValuesAsKafkaHeaders">\n    {{ \'tb.rulenode.add-metadata-key-values-as-kafka-headers\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.add-metadata-key-values-as-kafka-headers-hint</div>\n  <mat-form-field fxFlex class="mat-block" *ngIf="kafkaConfigForm.get(\'addMetadataKeyValuesAsKafkaHeaders\').value">\n    <mat-label translate>tb.rulenode.charset-encoding</mat-label>\n    <mat-select formControlName="kafkaHeadersCharset" required>\n      <mat-option *ngFor="let charset of ToByteStandartCharsetTypesValues" [value]="charset">\n        {{ ToByteStandartCharsetTypeTranslationMap.get(charset) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:jo,decorators:[{type:n,args:[{selector:"tb-external-node-kafka-config",template:'<section [formGroup]="kafkaConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="kafkaConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.key-pattern</mat-label>\n    <input matInput formControlName="keyPattern">\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <div class="tb-hint" translate>tb.rulenode.key-pattern-hint</div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.bootstrap-servers</mat-label>\n    <input required matInput formControlName="bootstrapServers">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bootstrapServers\').hasError(\'required\')">\n      {{ \'tb.rulenode.bootstrap-servers-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="kafkaConfigForm.get(\'bootstrapServers\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.host-private\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.retries</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="retries">\n    <mat-error *ngIf="kafkaConfigForm.get(\'retries\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-retries-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.batch-size-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="batchSize">\n    <mat-error *ngIf="kafkaConfigForm.get(\'batchSize\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-batch-size-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.linger-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="linger">\n    <mat-error *ngIf="kafkaConfigForm.get(\'linger\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-linger-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.buffer-memory-bytes</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="bufferMemory">\n    <mat-error *ngIf="kafkaConfigForm.get(\'bufferMemory\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-buffer-memory-bytes-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.acks</mat-label>\n    <mat-select formControlName="acks" required>\n      <mat-option *ngFor="let ackValue of ackValues" [value]="ackValue">\n        {{ ackValue }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.key-serializer</mat-label>\n    <input required matInput formControlName="keySerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'keySerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.key-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.value-serializer</mat-label>\n    <input required matInput formControlName="valueSerializer">\n    <mat-error *ngIf="kafkaConfigForm.get(\'valueSerializer\').hasError(\'required\')">\n      {{ \'tb.rulenode.value-serializer-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.other-properties</label>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="otherProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <mat-checkbox fxFlex formControlName="addMetadataKeyValuesAsKafkaHeaders">\n    {{ \'tb.rulenode.add-metadata-key-values-as-kafka-headers\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.add-metadata-key-values-as-kafka-headers-hint</div>\n  <mat-form-field fxFlex class="mat-block" *ngIf="kafkaConfigForm.get(\'addMetadataKeyValuesAsKafkaHeaders\').value">\n    <mat-label translate>tb.rulenode.charset-encoding</mat-label>\n    <mat-select formControlName="kafkaHeadersCharset" required>\n      <mat-option *ngFor="let charset of ToByteStandartCharsetTypesValues" [value]="charset">\n        {{ ToByteStandartCharsetTypeTranslationMap.get(charset) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Qo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.mqttConfigForm}onConfigurationSet(e){this.mqttConfigForm=this.fb.group({topicPattern:[e?e.topicPattern:null,[K.required]],host:[e?e.host:null,[K.required,Ko]],port:[e?e.port:null,[K.required,K.min(1),K.max(65535)]],connectTimeoutSec:[e?e.connectTimeoutSec:null,[K.required,K.min(1),K.max(200)]],clientId:[e?e.clientId:null,[]],appendClientIdSuffix:[{value:!!e&&e.appendClientIdSuffix,disabled:!(e&&Le(e.clientId))},[]],parseToPlainText:[!!e&&e.parseToPlainText,[]],cleanSession:[!!e&&e.cleanSession,[]],retainedMessage:[!!e&&e.retainedMessage,[]],ssl:[!!e&&e.ssl,[]],credentials:[e?e.credentials:null,[]]})}updateValidators(e){Le(this.mqttConfigForm.get("clientId").value)?this.mqttConfigForm.get("appendClientIdSuffix").enable({emitEvent:!1}):this.mqttConfigForm.get("appendClientIdSuffix").disable({emitEvent:!1}),this.mqttConfigForm.get("appendClientIdSuffix").updateValueAndValidity({emitEvent:e})}validatorTriggers(){return["clientId"]}}e("MqttConfigComponent",Qo),Qo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Qo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Qo,selector:"tb-external-node-mqtt-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="mqttConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="mqttConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <div fxFlex fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="mqttConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n        {{ \'tb.validator.host-private\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.connect-timeout</mat-label>\n      <input required type="number" step="1" min="1" max="200" matInput formControlName="connectTimeoutSec">\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'required\')">\n        {{ \'tb.rulenode.connect-timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'min\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'max\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.client-id</mat-label>\n    <input matInput formControlName="clientId">\n    <mat-hint>{{\'tb.rulenode.client-id-hint\' | translate}}</mat-hint>\n  </mat-form-field>\n  <mat-checkbox formControlName="appendClientIdSuffix">\n    {{ \'tb.rulenode.append-client-id-suffix\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint">{{ "tb.rulenode.client-id-suffix-hint" | translate }}</div>\n  <mat-checkbox formControlName="parseToPlainText">\n    {{ \'tb.rulenode.parse-to-plain-text\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint">{{ "tb.rulenode.parse-to-plain-text-hint" | translate }}</div>\n  <mat-checkbox formControlName="cleanSession">\n    {{ \'tb.rulenode.clean-session\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="retainedMessage">\n    {{ "tb.rulenode.retained-message" | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="ssl">\n    {{ \'tb.rulenode.enable-ssl\' | translate }}\n  </mat-checkbox>\n  <tb-credentials-config formControlName="credentials" [passwordFieldRequired]="false"></tb-credentials-config>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}\n"],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Fo,selector:"tb-credentials-config",inputs:["required","disableCertPemCredentials","passwordFieldRequired"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qo,decorators:[{type:n,args:[{selector:"tb-external-node-mqtt-config",template:'<section [formGroup]="mqttConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-pattern</mat-label>\n    <input required matInput formControlName="topicPattern">\n    <mat-error *ngIf="mqttConfigForm.get(\'topicPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <div fxFlex fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="mqttConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n        {{ \'tb.validator.host-private\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="40" class="mat-block">\n      <mat-label translate>tb.rulenode.connect-timeout</mat-label>\n      <input required type="number" step="1" min="1" max="200" matInput formControlName="connectTimeoutSec">\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'required\')">\n        {{ \'tb.rulenode.connect-timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'min\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="mqttConfigForm.get(\'connectTimeoutSec\').hasError(\'max\')">\n        {{ \'tb.rulenode.connect-timeout-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.client-id</mat-label>\n    <input matInput formControlName="clientId">\n    <mat-hint>{{\'tb.rulenode.client-id-hint\' | translate}}</mat-hint>\n  </mat-form-field>\n  <mat-checkbox formControlName="appendClientIdSuffix">\n    {{ \'tb.rulenode.append-client-id-suffix\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint">{{ "tb.rulenode.client-id-suffix-hint" | translate }}</div>\n  <mat-checkbox formControlName="parseToPlainText">\n    {{ \'tb.rulenode.parse-to-plain-text\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint">{{ "tb.rulenode.parse-to-plain-text-hint" | translate }}</div>\n  <mat-checkbox formControlName="cleanSession">\n    {{ \'tb.rulenode.clean-session\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="retainedMessage">\n    {{ "tb.rulenode.retained-message" | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="ssl">\n    {{ \'tb.rulenode.enable-ssl\' | translate }}\n  </mat-checkbox>\n  <tb-credentials-config formControlName="credentials" [passwordFieldRequired]="false"></tb-credentials-config>\n</section>\n',styles:[":host .tb-mqtt-credentials-panel-group{margin:0 6px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class $o extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.notificationType=D,this.entityType=C}configForm(){return this.notificationConfigForm}onConfigurationSet(e){this.notificationConfigForm=this.fb.group({templateId:[e?e.templateId:null,[K.required]],targets:[e?e.targets:[],[K.required]]})}}e("NotificationConfigComponent",$o),$o.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:$o,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),$o.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:$o,selector:"tb-external-node-notification-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="notificationConfigForm" fxLayout="column">\n  <tb-template-autocomplete\n    required\n    allowCreate\n    formControlName="templateId"\n    [notificationTypes]="notificationType.RULE_NODE">\n  </tb-template-autocomplete>\n  <tb-entity-list\n    required\n    formControlName="targets"\n    labelText="{{ \'notification.recipients\' | translate }}"\n    placeholderText="{{ \'notification.recipient\' | translate }}"\n    requiredText="{{ \'notification.recipients-required\' | translate }}"\n    entityType="{{ entityType.NOTIFICATION_TARGET }}"\n    entitySubType="{{ notificationType.RULE_NODE }}">\n  </tb-entity-list>\n</section>\n',dependencies:[{kind:"component",type:ut.EntityListComponent,selector:"tb-entity-list",inputs:["entityType","entitySubType","entityListText","noEntitiesText","entitiesRequiredText","labelText","placeholderText","requiredText","required","disabled","subscriptSizing","hint"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ct.TemplateAutocompleteComponent,selector:"tb-template-autocomplete",inputs:["required","allowCreate","allowEdit","disabled","notificationTypes"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:$o,decorators:[{type:n,args:[{selector:"tb-external-node-notification-config",template:'<section [formGroup]="notificationConfigForm" fxLayout="column">\n  <tb-template-autocomplete\n    required\n    allowCreate\n    formControlName="templateId"\n    [notificationTypes]="notificationType.RULE_NODE">\n  </tb-template-autocomplete>\n  <tb-entity-list\n    required\n    formControlName="targets"\n    labelText="{{ \'notification.recipients\' | translate }}"\n    placeholderText="{{ \'notification.recipient\' | translate }}"\n    requiredText="{{ \'notification.recipients-required\' | translate }}"\n    entityType="{{ entityType.NOTIFICATION_TARGET }}"\n    entitySubType="{{ notificationType.RULE_NODE }}">\n  </tb-entity-list>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class Yo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.pubSubConfigForm}onConfigurationSet(e){this.pubSubConfigForm=this.fb.group({projectId:[e?e.projectId:null,[K.required]],topicName:[e?e.topicName:null,[K.required]],serviceAccountKey:[e?e.serviceAccountKey:null,[K.required]],serviceAccountKeyFileName:[e?e.serviceAccountKeyFileName:null,[K.required]],messageAttributes:[e?e.messageAttributes:null,[]]})}}e("PubSubConfigComponent",Yo),Yo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Yo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Yo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Yo,selector:"tb-external-node-pub-sub-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="pubSubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.gcp-project-id</mat-label>\n    <input required matInput formControlName="projectId">\n    <mat-error *ngIf="pubSubConfigForm.get(\'projectId\').hasError(\'required\')">\n      {{ \'tb.rulenode.gcp-project-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.pubsub-topic-name</mat-label>\n    <input required matInput formControlName="topicName">\n    <mat-error *ngIf="pubSubConfigForm.get(\'topicName\').hasError(\'required\')">\n      {{ \'tb.rulenode.pubsub-topic-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <tb-file-input style="padding-bottom: 24px;"\n                 formControlName="serviceAccountKey"\n                 [existingFileName]="pubSubConfigForm.get(\'serviceAccountKeyFileName\').value"\n                 (fileNameChanged)="pubSubConfigForm.get(\'serviceAccountKeyFileName\').setValue($event)"\n                 required\n                 requiredAsError\n                 label="{{\'tb.rulenode.gcp-service-account-key\' | translate}}"\n                 noFileText="tb.rulenode.no-file"\n                 dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n  </tb-file-input>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.message-attributes-hint\' | translate | safe: \'html\'"></div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:mt.FileInputComponent,selector:"tb-file-input",inputs:["label","hint","accept","noFileText","inputId","allowedExtensions","dropLabel","maxSizeByte","contentConvertFunction","required","requiredAsError","disabled","existingFileName","readAsBinary","workFromFileObj","multipleFile"],outputs:["fileNameChanged"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Yo,decorators:[{type:n,args:[{selector:"tb-external-node-pub-sub-config",template:'<section [formGroup]="pubSubConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.gcp-project-id</mat-label>\n    <input required matInput formControlName="projectId">\n    <mat-error *ngIf="pubSubConfigForm.get(\'projectId\').hasError(\'required\')">\n      {{ \'tb.rulenode.gcp-project-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.pubsub-topic-name</mat-label>\n    <input required matInput formControlName="topicName">\n    <mat-error *ngIf="pubSubConfigForm.get(\'topicName\').hasError(\'required\')">\n      {{ \'tb.rulenode.pubsub-topic-name-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <tb-file-input style="padding-bottom: 24px;"\n                 formControlName="serviceAccountKey"\n                 [existingFileName]="pubSubConfigForm.get(\'serviceAccountKeyFileName\').value"\n                 (fileNameChanged)="pubSubConfigForm.get(\'serviceAccountKeyFileName\').setValue($event)"\n                 required\n                 requiredAsError\n                 label="{{\'tb.rulenode.gcp-service-account-key\' | translate}}"\n                 noFileText="tb.rulenode.no-file"\n                 dropLabel="{{\'tb.rulenode.drop-file\' | translate}}">\n  </tb-file-input>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.message-attributes-hint\' | translate | safe: \'html\'"></div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Jo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.messageProperties=[null,"BASIC","TEXT_PLAIN","MINIMAL_BASIC","MINIMAL_PERSISTENT_BASIC","PERSISTENT_BASIC","PERSISTENT_TEXT_PLAIN"]}configForm(){return this.rabbitMqConfigForm}onConfigurationSet(e){this.rabbitMqConfigForm=this.fb.group({exchangeNamePattern:[e?e.exchangeNamePattern:null,[]],routingKeyPattern:[e?e.routingKeyPattern:null,[]],messageProperties:[e?e.messageProperties:null,[]],host:[e?e.host:null,[K.required,Ko]],port:[e?e.port:null,[K.required,K.min(1),K.max(65535)]],virtualHost:[e?e.virtualHost:null,[]],username:[e?e.username:null,[]],password:[e?e.password:null,[]],automaticRecoveryEnabled:[!!e&&e.automaticRecoveryEnabled,[]],connectionTimeout:[e?e.connectionTimeout:null,[K.min(0)]],handshakeTimeout:[e?e.handshakeTimeout:null,[K.min(0)]],clientProperties:[e?e.clientProperties:null,[]]})}}e("RabbitMqConfigComponent",Jo),Jo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Jo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Jo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Jo,selector:"tb-external-node-rabbit-mq-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="rabbitMqConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.exchange-name-pattern</mat-label>\n    <input matInput formControlName="exchangeNamePattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.routing-key-pattern</mat-label>\n    <input matInput formControlName="routingKeyPattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-properties</mat-label>\n    <mat-select formControlName="messageProperties">\n      <mat-option *ngFor="let property of messageProperties" [value]="property">\n        {{ property }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n        {{ \'tb.validator.host-private\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.virtual-host</mat-label>\n    <input matInput formControlName="virtualHost">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.username</mat-label>\n    <input matInput formControlName="username">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.password</mat-label>\n    <input type="password" matInput formControlName="password">\n    <tb-toggle-password matSuffix></tb-toggle-password>\n  </mat-form-field>\n  <mat-checkbox formControlName="automaticRecoveryEnabled">\n    {{ \'tb.rulenode.automatic-recovery\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.connection-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="connectionTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'connectionTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-connection-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.handshake-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="handshakeTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'handshakeTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-handshake-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.client-properties</label>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="clientProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:pt.TogglePasswordComponent,selector:"tb-toggle-password"},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Jo,decorators:[{type:n,args:[{selector:"tb-external-node-rabbit-mq-config",template:'<section [formGroup]="rabbitMqConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.exchange-name-pattern</mat-label>\n    <input matInput formControlName="exchangeNamePattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.routing-key-pattern</mat-label>\n    <input matInput formControlName="routingKeyPattern">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.message-properties</mat-label>\n    <mat-select formControlName="messageProperties">\n      <mat-option *ngFor="let property of messageProperties" [value]="property">\n        {{ property }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n      <mat-label translate>tb.rulenode.host</mat-label>\n      <input required matInput formControlName="host">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'host\').hasError(\'required\')">\n        {{ \'tb.rulenode.host-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'host\').hasError(\'privateNetwork\')">\n        {{ \'tb.validator.host-private\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n      <mat-label translate>tb.rulenode.port</mat-label>\n      <input required type="number" step="1" min="1" max="65535" matInput formControlName="port">\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'required\')">\n        {{ \'tb.rulenode.port-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'min\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="rabbitMqConfigForm.get(\'port\').hasError(\'max\')">\n        {{ \'tb.rulenode.port-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.virtual-host</mat-label>\n    <input matInput formControlName="virtualHost">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.username</mat-label>\n    <input matInput formControlName="username">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.password</mat-label>\n    <input type="password" matInput formControlName="password">\n    <tb-toggle-password matSuffix></tb-toggle-password>\n  </mat-form-field>\n  <mat-checkbox formControlName="automaticRecoveryEnabled">\n    {{ \'tb.rulenode.automatic-recovery\' | translate }}\n  </mat-checkbox>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.connection-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="connectionTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'connectionTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-connection-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.handshake-timeout-ms</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="handshakeTimeout">\n    <mat-error *ngIf="rabbitMqConfigForm.get(\'handshakeTimeout\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-handshake-timeout-ms-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.client-properties</label>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="clientProperties"\n    keyText="tb.rulenode.key"\n    keyRequiredText="tb.rulenode.key-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Wo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.proxySchemes=["http","https"],this.httpRequestTypes=Object.keys(fn)}configForm(){return this.restApiCallConfigForm}onConfigurationSet(e){this.restApiCallConfigForm=this.fb.group({restEndpointUrlPattern:[e?e.restEndpointUrlPattern:null,[K.required,Ko]],requestMethod:[e?e.requestMethod:null,[K.required]],useSimpleClientHttpFactory:[!!e&&e.useSimpleClientHttpFactory,[]],parseToPlainText:[!!e&&e.parseToPlainText,[]],ignoreRequestBody:[!!e&&e.ignoreRequestBody,[]],enableProxy:[!!e&&e.enableProxy,[]],useSystemProxyProperties:[!!e&&e.enableProxy,[]],proxyScheme:[e?e.proxyHost:null,[]],proxyHost:[e?e.proxyHost:null,[]],proxyPort:[e?e.proxyPort:null,[]],proxyUser:[e?e.proxyUser:null,[]],proxyPassword:[e?e.proxyPassword:null,[]],readTimeoutMs:[e?e.readTimeoutMs:null,[]],maxParallelRequestsCount:[e?e.maxParallelRequestsCount:null,[K.min(0)]],headers:[e?e.headers:null,[]],credentials:[e?e.credentials:null,[]]})}validatorTriggers(){return["useSimpleClientHttpFactory","enableProxy","useSystemProxyProperties"]}updateValidators(e){const t=this.restApiCallConfigForm.get("useSimpleClientHttpFactory").value,n=this.restApiCallConfigForm.get("enableProxy").value,o=this.restApiCallConfigForm.get("useSystemProxyProperties").value;n&&!o?(this.restApiCallConfigForm.get("proxyHost").setValidators(n?[K.required,Ko]:[]),this.restApiCallConfigForm.get("proxyPort").setValidators(n?[K.required,K.min(1),K.max(65535)]:[])):(this.restApiCallConfigForm.get("proxyHost").setValidators([]),this.restApiCallConfigForm.get("proxyPort").setValidators([]),t?this.restApiCallConfigForm.get("readTimeoutMs").setValidators([]):this.restApiCallConfigForm.get("readTimeoutMs").setValidators([K.min(0)])),this.restApiCallConfigForm.get("readTimeoutMs").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("proxyHost").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("proxyPort").updateValueAndValidity({emitEvent:e}),this.restApiCallConfigForm.get("credentials").updateValueAndValidity({emitEvent:e})}}e("RestApiCallConfigComponent",Wo),Wo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Wo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Wo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Wo,selector:"tb-external-node-rest-api-call-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="restApiCallConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.endpoint-url-pattern</mat-label>\n    <input required matInput formControlName="restEndpointUrlPattern">\n    <mat-error *ngIf="restApiCallConfigForm.get(\'restEndpointUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.endpoint-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="restApiCallConfigForm.get(\'restEndpointUrlPattern\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.url-private\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.request-method</mat-label>\n    <mat-select formControlName="requestMethod">\n      <mat-option *ngFor="let requestType of httpRequestTypes" [value]="requestType">\n        {{ requestType }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-checkbox formControlName="enableProxy">\n    {{ \'tb.rulenode.enable-proxy\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox *ngIf="!restApiCallConfigForm.get(\'enableProxy\').value" formControlName="useSimpleClientHttpFactory">\n    {{ \'tb.rulenode.use-simple-client-http-factory\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="parseToPlainText">\n    {{ \'tb.rulenode.parse-to-plain-text\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 5px;" translate>tb.rulenode.parse-to-plain-text-hint</div>\n  <mat-checkbox formControlName="ignoreRequestBody">\n    {{ \'tb.rulenode.ignore-request-body\' | translate }}\n  </mat-checkbox>\n  <div *ngIf="restApiCallConfigForm.get(\'enableProxy\').value">\n    <mat-checkbox formControlName="useSystemProxyProperties">\n      {{ \'tb.rulenode.use-system-proxy-properties\' | translate }}\n    </mat-checkbox>\n    <div *ngIf="!restApiCallConfigForm.get(\'useSystemProxyProperties\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="10">\n          <mat-label translate>tb.rulenode.proxy-scheme</mat-label>\n          <mat-select formControlName="proxyScheme">\n            <mat-option *ngFor="let proxyScheme of proxySchemes" [value]="proxyScheme">\n              {{ proxyScheme }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class="md-block" fxFlex="100" fxFlex.gt-sm="50">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyHost\').hasError(\'privateNetwork\')">\n            {{ \'tb.validator.host-private\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error\n            *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'min\') || restApiCallConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n  </div>\n  <mat-form-field *ngIf="!restApiCallConfigForm.get(\'useSimpleClientHttpFactory\').value || restApiCallConfigForm.get(\'enableProxy\').value" class="mat-block"\n                  subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.read-timeout</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="readTimeoutMs">\n    <mat-hint translate>tb.rulenode.read-timeout-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.max-parallel-requests-count</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="maxParallelRequestsCount">\n    <mat-hint translate>tb.rulenode.max-parallel-requests-count-hint</mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.headers</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.headers-hint\' | translate | safe: \'html\'">  </div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="headers"\n    keyText="tb.rulenode.header"\n    keyRequiredText="tb.rulenode.header-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <tb-credentials-config formControlName="credentials" [disableCertPemCredentials]="restApiCallConfigForm.get(\'useSimpleClientHttpFactory\').value"></tb-credentials-config>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Fo,selector:"tb-credentials-config",inputs:["required","disableCertPemCredentials","passwordFieldRequired"]},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Wo,decorators:[{type:n,args:[{selector:"tb-external-node-rest-api-call-config",template:'<section [formGroup]="restApiCallConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.endpoint-url-pattern</mat-label>\n    <input required matInput formControlName="restEndpointUrlPattern">\n    <mat-error *ngIf="restApiCallConfigForm.get(\'restEndpointUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.endpoint-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="restApiCallConfigForm.get(\'restEndpointUrlPattern\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.url-private\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.request-method</mat-label>\n    <mat-select formControlName="requestMethod">\n      <mat-option *ngFor="let requestType of httpRequestTypes" [value]="requestType">\n        {{ requestType }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-checkbox formControlName="enableProxy">\n    {{ \'tb.rulenode.enable-proxy\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox *ngIf="!restApiCallConfigForm.get(\'enableProxy\').value" formControlName="useSimpleClientHttpFactory">\n    {{ \'tb.rulenode.use-simple-client-http-factory\' | translate }}\n  </mat-checkbox>\n  <mat-checkbox formControlName="parseToPlainText">\n    {{ \'tb.rulenode.parse-to-plain-text\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" style="padding-bottom: 5px;" translate>tb.rulenode.parse-to-plain-text-hint</div>\n  <mat-checkbox formControlName="ignoreRequestBody">\n    {{ \'tb.rulenode.ignore-request-body\' | translate }}\n  </mat-checkbox>\n  <div *ngIf="restApiCallConfigForm.get(\'enableProxy\').value">\n    <mat-checkbox formControlName="useSystemProxyProperties">\n      {{ \'tb.rulenode.use-system-proxy-properties\' | translate }}\n    </mat-checkbox>\n    <div *ngIf="!restApiCallConfigForm.get(\'useSystemProxyProperties\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="10">\n          <mat-label translate>tb.rulenode.proxy-scheme</mat-label>\n          <mat-select formControlName="proxyScheme">\n            <mat-option *ngFor="let proxyScheme of proxySchemes" [value]="proxyScheme">\n              {{ proxyScheme }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class="md-block" fxFlex="100" fxFlex.gt-sm="50">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyHost\').hasError(\'privateNetwork\')">\n            {{ \'tb.validator.host-private\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1">\n          <mat-error *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error\n            *ngIf="restApiCallConfigForm.get(\'proxyPort\').hasError(\'min\') || restApiCallConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n  </div>\n  <mat-form-field *ngIf="!restApiCallConfigForm.get(\'useSimpleClientHttpFactory\').value || restApiCallConfigForm.get(\'enableProxy\').value" class="mat-block"\n                  subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.read-timeout</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="readTimeoutMs">\n    <mat-hint translate>tb.rulenode.read-timeout-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.max-parallel-requests-count</mat-label>\n    <input type="number" step="1" min="0" matInput formControlName="maxParallelRequestsCount">\n    <mat-hint translate>tb.rulenode.max-parallel-requests-count-hint</mat-hint>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.headers</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.headers-hint\' | translate | safe: \'html\'">  </div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="headers"\n    keyText="tb.rulenode.header"\n    keyRequiredText="tb.rulenode.header-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <tb-credentials-config formControlName="credentials" [disableCertPemCredentials]="restApiCallConfigForm.get(\'useSimpleClientHttpFactory\').value"></tb-credentials-config>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Zo extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.smtpProtocols=["smtp","smtps"],this.tlsVersions=["TLSv1","TLSv1.1","TLSv1.2","TLSv1.3"]}configForm(){return this.sendEmailConfigForm}onConfigurationSet(e){this.sendEmailConfigForm=this.fb.group({useSystemSmtpSettings:[!0,[]],smtpProtocol:[e?e.smtpProtocol:null,[]],smtpHost:[e?e.smtpHost:null,[]],smtpPort:[e?e.smtpPort:null,[]],timeout:[e?e.timeout:null,[]],enableTls:[!!e&&e.enableTls,[]],tlsVersion:[e?e.tlsVersion:null,[]],enableProxy:[!!e&&e.enableProxy,[]],proxyHost:[e?e.proxyHost:null,[]],proxyPort:[e?e.proxyPort:null,[]],proxyUser:[e?e.proxyUser:null,[]],proxyPassword:[e?e.proxyPassword:null,[]],username:[e?e.username:null,[]],password:[e?e.password:null,[]]})}validatorTriggers(){return["useSystemSmtpSettings","enableProxy"]}updateValidators(e){const t=this.sendEmailConfigForm.get("useSystemSmtpSettings").value,n=this.sendEmailConfigForm.get("enableProxy").value;t?(this.sendEmailConfigForm.get("smtpProtocol").setValidators([]),this.sendEmailConfigForm.get("smtpHost").setValidators([]),this.sendEmailConfigForm.get("smtpPort").setValidators([]),this.sendEmailConfigForm.get("timeout").setValidators([]),this.sendEmailConfigForm.get("proxyHost").setValidators([]),this.sendEmailConfigForm.get("proxyPort").setValidators([])):(this.sendEmailConfigForm.get("smtpProtocol").setValidators([K.required]),this.sendEmailConfigForm.get("smtpHost").setValidators([K.required]),this.sendEmailConfigForm.get("smtpPort").setValidators([K.required,K.min(1),K.max(65535)]),this.sendEmailConfigForm.get("timeout").setValidators([K.required,K.min(0)]),this.sendEmailConfigForm.get("proxyHost").setValidators(n?[K.required]:[]),this.sendEmailConfigForm.get("proxyPort").setValidators(n?[K.required,K.min(1),K.max(65535)]:[])),this.sendEmailConfigForm.get("smtpProtocol").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("smtpHost").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("smtpPort").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("timeout").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("proxyHost").updateValueAndValidity({emitEvent:e}),this.sendEmailConfigForm.get("proxyPort").updateValueAndValidity({emitEvent:e})}}e("SendEmailConfigComponent",Zo),Zo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Zo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Zo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Zo,selector:"tb-external-node-send-email-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="sendEmailConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useSystemSmtpSettings">\n    {{ \'tb.rulenode.use-system-smtp-settings\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="sendEmailConfigForm.get(\'useSystemSmtpSettings\').value === false">\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.smtp-protocol</mat-label>\n      <mat-select formControlName="smtpProtocol">\n        <mat-option *ngFor="let smtpProtocol of smtpProtocols" [value]="smtpProtocol">\n          {{ smtpProtocol.toUpperCase() }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-host</mat-label>\n        <input required matInput formControlName="smtpHost">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpHost\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-host-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-port</mat-label>\n        <input required type="number" step="1" min="1" max="65535" matInput formControlName="smtpPort">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-port-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'min\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'max\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.timeout-msec</mat-label>\n      <input required type="number" step="1" min="0" matInput formControlName="timeout">\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'required\')">\n        {{ \'tb.rulenode.timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'min\')">\n        {{ \'tb.rulenode.min-timeout-msec-message\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-checkbox formControlName="enableTls">\n      {{ \'tb.rulenode.enable-tls\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" *ngIf="sendEmailConfigForm.get(\'enableTls\').value === true">\n      <mat-label translate>tb.rulenode.tls-version</mat-label>\n      <mat-select formControlName="tlsVersion">\n        <mat-option *ngFor="let tlsVersion of tlsVersions" [value]="tlsVersion">\n          {{ tlsVersion }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-checkbox formControlName="enableProxy">\n      {{ \'tb.rulenode.enable-proxy\' | translate }}\n    </tb-checkbox>\n    <div *ngIf="sendEmailConfigForm.get(\'enableProxy\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="60">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1" min="1" max="65535">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'min\') || sendEmailConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.username</mat-label>\n      <input matInput placeholder="{{ \'tb.rulenode.enter-username\' | translate }}" formControlName="username">\n    </mat-form-field>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.password</mat-label>\n      <input matInput type="password" placeholder="{{ \'tb.rulenode.enter-password\' | translate }}" formControlName="password">\n      <tb-toggle-password matSuffix></tb-toggle-password>\n    </mat-form-field>\n  </section>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:gt.TbCheckboxComponent,selector:"tb-checkbox",inputs:["disabled","trueValue","falseValue"],outputs:["valueChange"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:pt.TogglePasswordComponent,selector:"tb-toggle-password"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Zo,decorators:[{type:n,args:[{selector:"tb-external-node-send-email-config",template:'<section [formGroup]="sendEmailConfigForm" fxLayout="column">\n  <mat-checkbox formControlName="useSystemSmtpSettings">\n    {{ \'tb.rulenode.use-system-smtp-settings\' | translate }}\n  </mat-checkbox>\n  <section fxLayout="column" *ngIf="sendEmailConfigForm.get(\'useSystemSmtpSettings\').value === false">\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.smtp-protocol</mat-label>\n      <mat-select formControlName="smtpProtocol">\n        <mat-option *ngFor="let smtpProtocol of smtpProtocols" [value]="smtpProtocol">\n          {{ smtpProtocol.toUpperCase() }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="60" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-host</mat-label>\n        <input required matInput formControlName="smtpHost">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpHost\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-host-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex="100" fxFlex.gt-sm="40" class="mat-block">\n        <mat-label translate>tb.rulenode.smtp-port</mat-label>\n        <input required type="number" step="1" min="1" max="65535" matInput formControlName="smtpPort">\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'required\')">\n          {{ \'tb.rulenode.smtp-port-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'min\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="sendEmailConfigForm.get(\'smtpPort\').hasError(\'max\')">\n          {{ \'tb.rulenode.smtp-port-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block">\n      <mat-label translate>tb.rulenode.timeout-msec</mat-label>\n      <input required type="number" step="1" min="0" matInput formControlName="timeout">\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'required\')">\n        {{ \'tb.rulenode.timeout-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="sendEmailConfigForm.get(\'timeout\').hasError(\'min\')">\n        {{ \'tb.rulenode.min-timeout-msec-message\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-checkbox formControlName="enableTls">\n      {{ \'tb.rulenode.enable-tls\' | translate }}\n    </mat-checkbox>\n    <mat-form-field class="mat-block" *ngIf="sendEmailConfigForm.get(\'enableTls\').value === true">\n      <mat-label translate>tb.rulenode.tls-version</mat-label>\n      <mat-select formControlName="tlsVersion">\n        <mat-option *ngFor="let tlsVersion of tlsVersions" [value]="tlsVersion">\n          {{ tlsVersion }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-checkbox formControlName="enableProxy">\n      {{ \'tb.rulenode.enable-proxy\' | translate }}\n    </tb-checkbox>\n    <div *ngIf="sendEmailConfigForm.get(\'enableProxy\').value">\n      <div fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="60">\n          <mat-label translate>tb.rulenode.proxy-host</mat-label>\n          <input matInput required formControlName="proxyHost">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyHost\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-host-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block" fxFlex="100" fxFlex.gt-sm="40">\n          <mat-label translate>tb.rulenode.proxy-port</mat-label>\n          <input matInput required formControlName="proxyPort" type="number" step="1" min="1" max="65535">\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'required\')">\n            {{ \'tb.rulenode.proxy-port-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="sendEmailConfigForm.get(\'proxyPort\').hasError(\'min\') || sendEmailConfigForm.get(\'proxyPort\').hasError(\'max\')">\n            {{ \'tb.rulenode.proxy-port-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-user</mat-label>\n        <input matInput formControlName="proxyUser">\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.proxy-password</mat-label>\n        <input matInput formControlName="proxyPassword">\n      </mat-form-field>\n    </div>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.username</mat-label>\n      <input matInput placeholder="{{ \'tb.rulenode.enter-username\' | translate }}" formControlName="username">\n    </mat-form-field>\n    <mat-form-field class="mat-block" floatLabel="always">\n      <mat-label translate>tb.rulenode.password</mat-label>\n      <input matInput type="password" placeholder="{{ \'tb.rulenode.enter-password\' | translate }}" formControlName="password">\n      <tb-toggle-password matSuffix></tb-toggle-password>\n    </mat-form-field>\n  </section>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Xo extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.sendSmsConfigForm}onConfigurationSet(e){this.sendSmsConfigForm=this.fb.group({numbersToTemplate:[e?e.numbersToTemplate:null,[K.required]],smsMessageTemplate:[e?e.smsMessageTemplate:null,[K.required]],useSystemSmsSettings:[!e||e.useSystemSmsSettings,[]],smsProviderConfiguration:[e?e.smsProviderConfiguration:null,[]]})}validatorTriggers(){return["useSystemSmsSettings"]}updateValidators(e){this.sendSmsConfigForm.get("useSystemSmsSettings").value?this.sendSmsConfigForm.get("smsProviderConfiguration").setValidators([]):this.sendSmsConfigForm.get("smsProviderConfiguration").setValidators([K.required]),this.sendSmsConfigForm.get("smsProviderConfiguration").updateValueAndValidity({emitEvent:e})}}e("SendSmsConfigComponent",Xo),Xo.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Xo,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Xo.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Xo,selector:"tb-external-node-send-sms-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="sendSmsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.numbers-to-template</mat-label>\n    <input required matInput formControlName="numbersToTemplate">\n    <mat-error *ngIf="sendSmsConfigForm.get(\'numbersToTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.numbers-to-template-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.rulenode.numbers-to-template-hint\' | translate | safe: \'html\'"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.sms-message-template</mat-label>\n    <textarea required matInput formControlName="smsMessageTemplate" rows="6"></textarea>\n    <mat-error *ngIf="sendSmsConfigForm.get(\'smsMessageTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.sms-message-template-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  \x3c!--mat-checkbox formControlName="useSystemSmsSettings">\n    {{ \'tb.rulenode.use-system-sms-settings\' | translate }}\n  </mat-checkbox>\n  <tb-sms-provider-configuration\n    *ngIf="sendSmsConfigForm.get(\'useSystemSmsSettings\').value === false"\n    formControlName="smsProviderConfiguration"\n    required>\n  </tb-sms-provider-configuration--\x3e\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Xo,decorators:[{type:n,args:[{selector:"tb-external-node-send-sms-config",template:'<section [formGroup]="sendSmsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.numbers-to-template</mat-label>\n    <input required matInput formControlName="numbersToTemplate">\n    <mat-error *ngIf="sendSmsConfigForm.get(\'numbersToTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.numbers-to-template-required\' | translate }}\n    </mat-error>\n    <mat-hint [innerHTML]="\'tb.rulenode.numbers-to-template-hint\' | translate | safe: \'html\'"></mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.sms-message-template</mat-label>\n    <textarea required matInput formControlName="smsMessageTemplate" rows="6"></textarea>\n    <mat-error *ngIf="sendSmsConfigForm.get(\'smsMessageTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.sms-message-template-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  \x3c!--mat-checkbox formControlName="useSystemSmsSettings">\n    {{ \'tb.rulenode.use-system-sms-settings\' | translate }}\n  </mat-checkbox>\n  <tb-sms-provider-configuration\n    *ngIf="sendSmsConfigForm.get(\'useSystemSmsSettings\').value === false"\n    formControlName="smsProviderConfiguration"\n    required>\n  </tb-sms-provider-configuration--\x3e\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class er extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.slackChanelTypes=Object.keys(V),this.slackChanelTypesTranslateMap=P}configForm(){return this.slackConfigForm}onConfigurationSet(e){this.slackConfigForm=this.fb.group({botToken:[e?e.botToken:null],useSystemSettings:[!!e&&e.useSystemSettings],messageTemplate:[e?e.messageTemplate:null,[K.required]],conversationType:[e?e.conversationType:null,[K.required]],conversation:[e?e.conversation:null,[K.required]]})}validatorTriggers(){return["useSystemSettings"]}updateValidators(e){this.slackConfigForm.get("useSystemSettings").value?this.slackConfigForm.get("botToken").clearValidators():this.slackConfigForm.get("botToken").setValidators([K.required]),this.slackConfigForm.get("botToken").updateValueAndValidity({emitEvent:e})}}e("SlackConfigComponent",er),er.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:er,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),er.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:er,selector:"tb-external-node-slack-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="slackConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.message-template</mat-label>\n    <input required matInput formControlName="messageTemplate">\n    <mat-error *ngIf="slackConfigForm.get(\'messageTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-template-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-checkbox formControlName="useSystemSettings">\n    {{ \'tb.rulenode.use-system-slack-settings\' | translate }}\n  </mat-checkbox>\n  <mat-form-field *ngIf="!slackConfigForm.get(\'useSystemSettings\').value" class="mat-block">\n    <mat-label translate>tb.rulenode.slack-api-token</mat-label>\n    <input required matInput formControlName="botToken">\n    <mat-error *ngIf="slackConfigForm.get(\'botToken\').hasError(\'required\')">\n      {{ \'tb.rulenode.slack-api-token-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label class="tb-title">{{ \'notification.slack-chanel-type\' | translate }}</label>\n  <mat-radio-group formControlName="conversationType">\n    <mat-radio-button *ngFor="let slackChanelType of slackChanelTypes" [value]="slackChanelType">\n      {{ slackChanelTypesTranslateMap.get(slackChanelType) | translate }}\n    </mat-radio-button>\n  </mat-radio-group>\n  <tb-slack-conversation-autocomplete\n    formControlName="conversation"\n    required\n    [token]="slackConfigForm.get(\'useSystemSettings\').value ? \'\' : slackConfigForm.get(\'botToken\').value"\n    [slackChanelType]="slackConfigForm.get(\'conversationType\').value">\n  </tb-slack-conversation-autocomplete>\n</section>\n',styles:[":host .tb-title{display:block;padding-bottom:6px}:host ::ng-deep .mat-mdc-radio-group{display:flex;flex-direction:row;margin-bottom:22px;gap:12px}:host ::ng-deep .mat-mdc-radio-group .mat-mdc-radio-button{flex:1 1 100%;padding:4px;border:1px solid rgba(0,0,0,.12);border-radius:6px}@media screen and (max-width: 599px){:host ::ng-deep .mat-mdc-radio-group{flex-direction:column}}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:ft.MatRadioGroup,selector:"mat-radio-group",exportAs:["matRadioGroup"]},{kind:"component",type:ft.MatRadioButton,selector:"mat-radio-button",inputs:["disableRipple","tabIndex"],exportAs:["matRadioButton"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:yt.SlackConversationAutocompleteComponent,selector:"tb-slack-conversation-autocomplete",inputs:["labelText","requiredText","required","disabled","slackChanelType","token"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:er,decorators:[{type:n,args:[{selector:"tb-external-node-slack-config",template:'<section [formGroup]="slackConfigForm" fxLayout="column">\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.message-template</mat-label>\n    <input required matInput formControlName="messageTemplate">\n    <mat-error *ngIf="slackConfigForm.get(\'messageTemplate\').hasError(\'required\')">\n      {{ \'tb.rulenode.message-template-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-checkbox formControlName="useSystemSettings">\n    {{ \'tb.rulenode.use-system-slack-settings\' | translate }}\n  </mat-checkbox>\n  <mat-form-field *ngIf="!slackConfigForm.get(\'useSystemSettings\').value" class="mat-block">\n    <mat-label translate>tb.rulenode.slack-api-token</mat-label>\n    <input required matInput formControlName="botToken">\n    <mat-error *ngIf="slackConfigForm.get(\'botToken\').hasError(\'required\')">\n      {{ \'tb.rulenode.slack-api-token-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label class="tb-title">{{ \'notification.slack-chanel-type\' | translate }}</label>\n  <mat-radio-group formControlName="conversationType">\n    <mat-radio-button *ngFor="let slackChanelType of slackChanelTypes" [value]="slackChanelType">\n      {{ slackChanelTypesTranslateMap.get(slackChanelType) | translate }}\n    </mat-radio-button>\n  </mat-radio-group>\n  <tb-slack-conversation-autocomplete\n    formControlName="conversation"\n    required\n    [token]="slackConfigForm.get(\'useSystemSettings\').value ? \'\' : slackConfigForm.get(\'botToken\').value"\n    [slackChanelType]="slackConfigForm.get(\'conversationType\').value">\n  </tb-slack-conversation-autocomplete>\n</section>\n',styles:[":host .tb-title{display:block;padding-bottom:6px}:host ::ng-deep .mat-mdc-radio-group{display:flex;flex-direction:row;margin-bottom:22px;gap:12px}:host ::ng-deep .mat-mdc-radio-group .mat-mdc-radio-button{flex:1 1 100%;padding:4px;border:1px solid rgba(0,0,0,.12);border-radius:6px}@media screen and (max-width: 599px){:host ::ng-deep .mat-mdc-radio-group{flex-direction:column}}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class tr extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.snsConfigForm}onConfigurationSet(e){this.snsConfigForm=this.fb.group({topicArnPattern:[e?e.topicArnPattern:null,[K.required]],accessKeyId:[e?e.accessKeyId:null,[K.required]],secretAccessKey:[e?e.secretAccessKey:null,[K.required]],region:[e?e.region:null,[K.required]]})}}e("SnsConfigComponent",tr),tr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:tr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),tr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:tr,selector:"tb-external-node-sns-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="snsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-arn-pattern</mat-label>\n    <input required matInput formControlName="topicArnPattern">\n    <mat-error *ngIf="snsConfigForm.get(\'topicArnPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-arn-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="snsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="snsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="snsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:tr,decorators:[{type:n,args:[{selector:"tb-external-node-sns-config",template:'<section [formGroup]="snsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.topic-arn-pattern</mat-label>\n    <input required matInput formControlName="topicArnPattern">\n    <mat-error *ngIf="snsConfigForm.get(\'topicArnPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.topic-arn-pattern-required\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="snsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="snsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="snsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class nr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.sqsQueueType=mn,this.sqsQueueTypes=Object.keys(mn),this.sqsQueueTypeTranslationsMap=pn}configForm(){return this.sqsConfigForm}onConfigurationSet(e){this.sqsConfigForm=this.fb.group({queueType:[e?e.queueType:null,[K.required]],queueUrlPattern:[e?e.queueUrlPattern:null,[K.required,Ko]],delaySeconds:[e?e.delaySeconds:null,[K.min(0),K.max(900)]],messageAttributes:[e?e.messageAttributes:null,[]],accessKeyId:[e?e.accessKeyId:null,[K.required]],secretAccessKey:[e?e.secretAccessKey:null,[K.required]],region:[e?e.region:null,[K.required]]})}}e("SqsConfigComponent",nr),nr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:nr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),nr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:nr,selector:"tb-external-node-sqs-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="sqsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.queue-type</mat-label>\n    <mat-select formControlName="queueType" required>\n      <mat-option *ngFor="let type of sqsQueueTypes" [value]="type">\n        {{ sqsQueueTypeTranslationsMap.get(type) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.queue-url-pattern</mat-label>\n    <input required matInput formControlName="queueUrlPattern">\n    <mat-error *ngIf="sqsConfigForm.get(\'queueUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.queue-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="sqsConfigForm.get(\'queueUrlPattern\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.url-private\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field *ngIf="sqsConfigForm.get(\'queueType\').value === sqsQueueType.STANDARD" class="mat-block">\n    <mat-label translate>tb.rulenode.delay-seconds</mat-label>\n    <input required type="number" min="0" max="900" step="1" matInput formControlName="delaySeconds">\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-delay-seconds-message\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-delay-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.message-attributes-hint\' | translate | safe: \'html\'"></div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="sqsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="sqsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="sqsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:no,selector:"tb-kv-map-config-old",inputs:["disabled","uniqueKeyValuePairValidator","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","required"]},{kind:"pipe",type:be.SafePipe,name:"safe"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:nr,decorators:[{type:n,args:[{selector:"tb-external-node-sqs-config",template:'<section [formGroup]="sqsConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.queue-type</mat-label>\n    <mat-select formControlName="queueType" required>\n      <mat-option *ngFor="let type of sqsQueueTypes" [value]="type">\n        {{ sqsQueueTypeTranslationsMap.get(type) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field class="mat-block" subscriptSizing="dynamic">\n    <mat-label translate>tb.rulenode.queue-url-pattern</mat-label>\n    <input required matInput formControlName="queueUrlPattern">\n    <mat-error *ngIf="sqsConfigForm.get(\'queueUrlPattern\').hasError(\'required\')">\n      {{ \'tb.rulenode.queue-url-pattern-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="sqsConfigForm.get(\'queueUrlPattern\').hasError(\'privateNetwork\')">\n      {{ \'tb.validator.url-private\' | translate }}\n    </mat-error>\n    <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n  </mat-form-field>\n  <mat-form-field *ngIf="sqsConfigForm.get(\'queueType\').value === sqsQueueType.STANDARD" class="mat-block">\n    <mat-label translate>tb.rulenode.delay-seconds</mat-label>\n    <input required type="number" min="0" max="900" step="1" matInput formControlName="delaySeconds">\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'min\')">\n      {{ \'tb.rulenode.min-delay-seconds-message\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="sqsConfigForm.get(\'delaySeconds\').hasError(\'max\')">\n      {{ \'tb.rulenode.max-delay-seconds-message\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <label translate class="tb-title">tb.rulenode.message-attributes</label>\n  <div class="tb-hint" [innerHTML]="\'tb.rulenode.message-attributes-hint\' | translate | safe: \'html\'"></div>\n  <tb-kv-map-config-old\n    required="false"\n    formControlName="messageAttributes"\n    keyText="tb.rulenode.name"\n    keyRequiredText="tb.rulenode.name-required"\n    valText="tb.rulenode.value"\n    valRequiredText="tb.rulenode.value-required">\n  </tb-kv-map-config-old>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n    <input required matInput formControlName="accessKeyId">\n    <mat-error *ngIf="sqsConfigForm.get(\'accessKeyId\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n    <input required matInput formControlName="secretAccessKey">\n    <mat-error *ngIf="sqsConfigForm.get(\'secretAccessKey\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label translate>tb.rulenode.aws-region</mat-label>\n    <input required matInput formControlName="region">\n    <mat-error *ngIf="sqsConfigForm.get(\'region\').hasError(\'required\')">\n      {{ \'tb.rulenode.aws-region-required\' | translate }}\n    </mat-error>\n  </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class or extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.lambdaConfigForm}onConfigurationSet(e){this.lambdaConfigForm=this.fb.group({functionName:[e?e.functionName:null,[K.required]],qualifier:[e?e.qualifier:null,[]],accessKey:[e?e.accessKey:null,[K.required]],secretKey:[e?e.secretKey:null,[K.required]],region:[e?e.region:null,[K.required]],connectionTimeout:[e?e.connectionTimeout:null,[K.required,K.min(0)]],requestTimeout:[e?e.requestTimeout:null,[K.required,K.min(0)]],tellFailureIfFuncThrowsExc:[!!e&&e.tellFailureIfFuncThrowsExc,[]]})}}e("LambdaConfigComponent",or),or.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:or,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),or.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:or,selector:"tb-external-node-lambda-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="lambdaConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.function-configuration</div>\n    </div>\n    <tb-example-hint [hintText]="\'tb.rulenode.template-rules-hint\'"\n                     popupHelpLink="rulenode/node-templatization-doc">\n    </tb-example-hint>\n    <div class="tb-standard-fields">\n      <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.function-name\' | translate}}</mat-label>\n        <input required matInput formControlName="functionName">\n        <mat-error *ngIf="lambdaConfigForm.get(\'functionName\').hasError(\'required\')">\n          {{\'tb.rulenode.function-name-required\' | translate}}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.qualifier\' | translate}}</mat-label>\n        <input required matInput formControlName="qualifier">\n        <mat-hint translate>tb.rulenode.qualifier-hint</mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <div class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings" expanded>\n      <mat-expansion-panel-header>\n        <mat-panel-title class="tb-form-panel-title tb-required" translate>tb.rulenode.aws-credentials</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-standard-fields">\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n          <input required matInput formControlName="accessKey">\n          <mat-error *ngIf="lambdaConfigForm.get(\'accessKey\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n          <input required matInput formControlName="secretKey">\n          <mat-error *ngIf="lambdaConfigForm.get(\'secretKey\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-region</mat-label>\n          <input required matInput formControlName="region">\n          <mat-error *ngIf="lambdaConfigForm.get(\'region\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-region-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n  </div>\n  <div class="tb-form-panel stroked no-padding">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header style="padding: 16px">\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-form-panel no-border no-padding no-gap" style="margin-top: 0">\n        <div class="tb-form-row no-border same-padding tb-standard-fields">\n          <mat-form-field class="flex">\n            <mat-label translate>tb.rulenode.connection-timeout</mat-label>\n            <input type="number" required min="0" matInput formControlName="connectionTimeout">\n            <mat-error *ngIf="lambdaConfigForm.get(\'connectionTimeout\').hasError(\'required\')">\n              {{ \'tb.rulenode.connection-timeout-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="lambdaConfigForm.get(\'connectionTimeout\').hasError(\'min\')">\n              {{ \'tb.rulenode.connection-timeout-min\' | translate }}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.connection-timeout-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n          <mat-form-field class="flex">\n            <mat-label translate>tb.rulenode.request-timeout</mat-label>\n            <input type="number" required min="0" matInput formControlName="requestTimeout">\n            <mat-error *ngIf="lambdaConfigForm.get(\'requestTimeout\').hasError(\'required\')">\n              {{ \'tb.rulenode.request-timeout-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="lambdaConfigForm.get(\'requestTimeout\').hasError(\'min\')">\n              {{ \'tb.rulenode.request-timeout-min\' | translate }}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.request-timeout-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n        </div>\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-aws-lambda-hint\' | translate }}"\n             class="tb-form-row no-border" style="margin-bottom: 16px">\n          <mat-slide-toggle class="mat-slide" formControlName="tellFailureIfFuncThrowsExc">\n            {{ \'tb.rulenode.tell-failure-aws-lambda\' | translate }}\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </mat-expansion-panel>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:or,decorators:[{type:n,args:[{selector:"tb-external-node-lambda-config",template:'<section [formGroup]="lambdaConfigForm" class="tb-form-panel no-padding no-border">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-row no-padding no-border">\n      <div class="tb-form-panel-title tb-required" translate>tb.rulenode.function-configuration</div>\n    </div>\n    <tb-example-hint [hintText]="\'tb.rulenode.template-rules-hint\'"\n                     popupHelpLink="rulenode/node-templatization-doc">\n    </tb-example-hint>\n    <div class="tb-standard-fields">\n      <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.function-name\' | translate}}</mat-label>\n        <input required matInput formControlName="functionName">\n        <mat-error *ngIf="lambdaConfigForm.get(\'functionName\').hasError(\'required\')">\n          {{\'tb.rulenode.function-name-required\' | translate}}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.qualifier\' | translate}}</mat-label>\n        <input required matInput formControlName="qualifier">\n        <mat-hint translate>tb.rulenode.qualifier-hint</mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <div class="tb-form-panel stroked">\n    <mat-expansion-panel class="tb-settings" expanded>\n      <mat-expansion-panel-header>\n        <mat-panel-title class="tb-form-panel-title tb-required" translate>tb.rulenode.aws-credentials</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-standard-fields">\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-access-key-id</mat-label>\n          <input required matInput formControlName="accessKey">\n          <mat-error *ngIf="lambdaConfigForm.get(\'accessKey\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-access-key-id-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-secret-access-key</mat-label>\n          <input required matInput formControlName="secretKey">\n          <mat-error *ngIf="lambdaConfigForm.get(\'secretKey\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-secret-access-key-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.aws-region</mat-label>\n          <input required matInput formControlName="region">\n          <mat-error *ngIf="lambdaConfigForm.get(\'region\').hasError(\'required\')">\n            {{ \'tb.rulenode.aws-region-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n  </div>\n  <div class="tb-form-panel stroked no-padding">\n    <mat-expansion-panel class="tb-settings">\n      <mat-expansion-panel-header style="padding: 16px">\n        <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class="tb-form-panel no-border no-padding no-gap" style="margin-top: 0">\n        <div class="tb-form-row no-border same-padding tb-standard-fields">\n          <mat-form-field class="flex">\n            <mat-label translate>tb.rulenode.connection-timeout</mat-label>\n            <input type="number" required min="0" matInput formControlName="connectionTimeout">\n            <mat-error *ngIf="lambdaConfigForm.get(\'connectionTimeout\').hasError(\'required\')">\n              {{ \'tb.rulenode.connection-timeout-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="lambdaConfigForm.get(\'connectionTimeout\').hasError(\'min\')">\n              {{ \'tb.rulenode.connection-timeout-min\' | translate }}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.connection-timeout-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n          <mat-form-field class="flex">\n            <mat-label translate>tb.rulenode.request-timeout</mat-label>\n            <input type="number" required min="0" matInput formControlName="requestTimeout">\n            <mat-error *ngIf="lambdaConfigForm.get(\'requestTimeout\').hasError(\'required\')">\n              {{ \'tb.rulenode.request-timeout-required\' | translate }}\n            </mat-error>\n            <mat-error *ngIf="lambdaConfigForm.get(\'requestTimeout\').hasError(\'min\')">\n              {{ \'tb.rulenode.request-timeout-min\' | translate }}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.request-timeout-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n        </div>\n        <div tb-hint-tooltip-icon="{{ \'tb.rulenode.tell-failure-aws-lambda-hint\' | translate }}"\n             class="tb-form-row no-border" style="margin-bottom: 16px">\n          <mat-slide-toggle class="mat-slide" formControlName="tellFailureIfFuncThrowsExc">\n            {{ \'tb.rulenode.tell-failure-aws-lambda\' | translate }}\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </mat-expansion-panel>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class rr{}e("RulenodeCoreConfigExternalModule",rr),rr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:rr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),rr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:rr,declarations:[tr,nr,or,Yo,jo,Qo,$o,Jo,Wo,Zo,zo,Xo,er],imports:[X,M,at,qo],exports:[tr,nr,or,Yo,jo,Qo,$o,Jo,Wo,Zo,zo,Xo,er]}),rr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:rr,imports:[X,M,at,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:rr,decorators:[{type:d,args:[{declarations:[tr,nr,or,Yo,jo,Qo,$o,Jo,Wo,Zo,zo,Xo,er],imports:[X,M,at,qo],exports:[tr,nr,or,Yo,jo,Qo,$o,Jo,Wo,Zo,zo,Xo,er]}]}]});class ar extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.searchText=""}configForm(){return this.alarmStatusConfigForm}prepareInputConfig(e){return{alarmStatusList:Ce(e?.alarmStatusList)?e.alarmStatusList:null}}onConfigurationSet(e){this.alarmStatusConfigForm=this.fb.group({alarmStatusList:[e.alarmStatusList,[K.required]]})}}e("CheckAlarmStatusComponent",ar),ar.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ar,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),ar.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ar,selector:"tb-filter-node-check-alarm-status-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="alarmStatusConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title tb-required" translate>tb.rulenode.alarm-status</div>\n    <div class="tb-form-panel-hint tb-error" translate [hidden]="alarmStatusConfigForm.get(\'alarmStatusList\').valid">\n      tb.rulenode.alarm-required\n    </div>\n  </div>\n  <tb-alarm-status-select formControlName="alarmStatusList"></tb-alarm-status-select>\n</section>\n\n\n\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:So,selector:"tb-alarm-status-select"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ar,decorators:[{type:n,args:[{selector:"tb-filter-node-check-alarm-status-config",template:'<section [formGroup]="alarmStatusConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title tb-required" translate>tb.rulenode.alarm-status</div>\n    <div class="tb-form-panel-hint tb-error" translate [hidden]="alarmStatusConfigForm.get(\'alarmStatusList\').valid">\n      tb.rulenode.alarm-required\n    </div>\n  </div>\n  <tb-alarm-status-select formControlName="alarmStatusList"></tb-alarm-status-select>\n</section>\n\n\n\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class ir extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.checkMessageConfigForm}prepareInputConfig(e){return{messageNames:Ce(e?.messageNames)?e.messageNames:[],metadataNames:Ce(e?.metadataNames)?e.metadataNames:[],checkAllKeys:!!Ce(e?.checkAllKeys)&&e.checkAllKeys}}prepareOutputConfig(e){return{messageNames:Ce(e?.messageNames)?e.messageNames:[],metadataNames:Ce(e?.metadataNames)?e.metadataNames:[],checkAllKeys:e.checkAllKeys}}atLeastOne(e,t=null){return n=>{t||(t=Object.keys(n.controls));return n?.controls&&t.some((t=>!e(n.controls[t])))?null:{atLeastOne:!0}}}onConfigurationSet(e){this.checkMessageConfigForm=this.fb.group({messageNames:[e.messageNames,[]],metadataNames:[e.metadataNames,[]],checkAllKeys:[e.checkAllKeys,[]]},{validators:this.atLeastOne(K.required,["messageNames","metadataNames"])})}get touchedValidationControl(){return["messageNames","metadataNames"].some((e=>this.checkMessageConfigForm.get(e).touched))}}e("CheckMessageConfigComponent",ir),ir.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ir,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),ir.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ir,selector:"tb-filter-node-check-message-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="checkMessageConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title tb-required" translate>tb.rulenode.fields-to-check</div>\n    <div class="tb-form-panel-hint tb-error" translate [hidden]="!(touchedValidationControl && checkMessageConfigForm.hasError(\'atLeastOne\'))">\n      tb.rulenode.at-least-one-field-required\n    </div>\n  </div>\n  <tb-string-items-list editable subscriptSizing="dynamic"\n                        [label]="\'tb.rulenode.data-keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-message-field\' | translate"\n                        formControlName="messageNames">\n    <mat-icon matSuffix color="primary" class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n  </tb-string-items-list>\n  <tb-string-items-list editable subscriptSizing="dynamic"\n                        [label]="\'tb.rulenode.metadata-keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-metadata-field\' | translate"\n                        formControlName="metadataNames">\n    <mat-icon matSuffix color="primary" class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n  </tb-string-items-list>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.check-all-keys-tooltip\' | translate }}"\n       class="tb-form-row no-border no-padding">\n    <mat-slide-toggle class="mat-slide" formControlName="checkAllKeys">\n      {{ \'tb.rulenode.check-all-keys\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ir,decorators:[{type:n,args:[{selector:"tb-filter-node-check-message-config",template:'<section [formGroup]="checkMessageConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-padding no-border space-between">\n    <div class="tb-form-panel-title tb-required" translate>tb.rulenode.fields-to-check</div>\n    <div class="tb-form-panel-hint tb-error" translate [hidden]="!(touchedValidationControl && checkMessageConfigForm.hasError(\'atLeastOne\'))">\n      tb.rulenode.at-least-one-field-required\n    </div>\n  </div>\n  <tb-string-items-list editable subscriptSizing="dynamic"\n                        [label]="\'tb.rulenode.data-keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-message-field\' | translate"\n                        formControlName="messageNames">\n    <mat-icon matSuffix color="primary" class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n  </tb-string-items-list>\n  <tb-string-items-list editable subscriptSizing="dynamic"\n                        [label]="\'tb.rulenode.metadata-keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-metadata-field\' | translate"\n                        formControlName="metadataNames">\n    <mat-icon matSuffix color="primary" class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.field-name\' | translate } }}">help</mat-icon>\n  </tb-string-items-list>\n  <div tb-hint-tooltip-icon="{{ \'tb.rulenode.check-all-keys-tooltip\' | translate }}"\n       class="tb-form-row no-border no-padding">\n    <mat-slide-toggle class="mat-slide" formControlName="checkAllKeys">\n      {{ \'tb.rulenode.check-all-keys\' | translate }}\n    </mat-slide-toggle>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class lr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.entitySearchDirection=Object.values(v),this.entitySearchDirectionTranslationsMap=S}configForm(){return this.checkRelationConfigForm}prepareInputConfig(e){return{checkForSingleEntity:!!Ce(e?.checkForSingleEntity)&&e.checkForSingleEntity,direction:Ce(e?.direction)?e.direction:null,entityType:Ce(e?.entityType)?e.entityType:null,entityId:Ce(e?.entityId)?e.entityId:null,relationType:Ce(e?.relationType)?e.relationType:null}}onConfigurationSet(e){this.checkRelationConfigForm=this.fb.group({checkForSingleEntity:[e.checkForSingleEntity,[]],direction:[e.direction,[]],entityType:[e.entityType,e&&e.checkForSingleEntity?[K.required]:[]],entityId:[e.entityId,e&&e.checkForSingleEntity?[K.required]:[]],relationType:[e.relationType,[K.required]]})}validatorTriggers(){return["checkForSingleEntity"]}updateValidators(e){const t=this.checkRelationConfigForm.get("checkForSingleEntity").value;this.checkRelationConfigForm.get("entityType").setValidators(t?[K.required]:[]),this.checkRelationConfigForm.get("entityType").updateValueAndValidity({emitEvent:e}),this.checkRelationConfigForm.get("entityId").setValidators(t?[K.required]:[]),this.checkRelationConfigForm.get("entityId").updateValueAndValidity({emitEvent:e})}}e("CheckRelationConfigComponent",lr),lr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:lr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),lr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:lr,selector:"tb-filter-node-check-relation-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="checkRelationConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.relation-search-parameters</div>\n  <div fxLayout="column">\n    <mat-form-field class="mat-block" hideRequiredMarker>\n      <mat-label>{{ \'relation.direction\' | translate }}</mat-label>\n      <mat-select formControlName="direction" required>\n        <mat-option *ngFor="let direction of entitySearchDirection" [value]="direction">\n          {{ entitySearchDirectionTranslationsMap.get(direction) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-relation-type-autocomplete\n      required\n      formControlName="relationType">\n    </tb-relation-type-autocomplete>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.check-relation-to-specific-entity-tooltip\' | translate }}"\n         class="tb-form-row no-border no-padding slide-toggle">\n      <mat-slide-toggle class="mat-slide" formControlName="checkForSingleEntity">\n        {{ \'tb.rulenode.check-relation-to-specific-entity\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div *ngIf="checkRelationConfigForm.get(\'checkForSingleEntity\').value" class="same-width-component-row">\n      <tb-entity-type-select\n        style="min-width: 100px; flex: 1;"\n        showLabel\n        required\n        formControlName="entityType">\n      </tb-entity-type-select>\n      <tb-entity-autocomplete\n        fxFlex\n        required\n        *ngIf="checkRelationConfigForm.get(\'entityType\').value"\n        [entityType]="checkRelationConfigForm.get(\'entityType\').value"\n        formControlName="entityId">\n      </tb-entity-autocomplete>\n    </div>\n  </div>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:rt.EntityAutocompleteComponent,selector:"tb-entity-autocomplete",inputs:["entityType","entitySubtype","excludeEntityIds","labelText","requiredText","useFullEntityId","appearance","required","disabled"],outputs:["entityChanged"]},{kind:"component",type:Ge.EntityTypeSelectComponent,selector:"tb-entity-type-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","filterAllowedEntityTypes","overrideEntityTypeTranslations","showLabel","required","disabled"]},{kind:"component",type:De.RelationTypeAutocompleteComponent,selector:"tb-relation-type-autocomplete",inputs:["showLabel","additionalClasses","appearance","required","disabled","subscriptSizing"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:lr,decorators:[{type:n,args:[{selector:"tb-filter-node-check-relation-config",template:'<section [formGroup]="checkRelationConfigForm" class="tb-form-panel stroked no-padding-bottom">\n  <div class="tb-form-panel-title" translate>tb.rulenode.relation-search-parameters</div>\n  <div fxLayout="column">\n    <mat-form-field class="mat-block" hideRequiredMarker>\n      <mat-label>{{ \'relation.direction\' | translate }}</mat-label>\n      <mat-select formControlName="direction" required>\n        <mat-option *ngFor="let direction of entitySearchDirection" [value]="direction">\n          {{ entitySearchDirectionTranslationsMap.get(direction) | translate }} <span translate>tb.rulenode.relations-query-config-direction-suffix</span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <tb-relation-type-autocomplete\n      required\n      formControlName="relationType">\n    </tb-relation-type-autocomplete>\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.check-relation-to-specific-entity-tooltip\' | translate }}"\n         class="tb-form-row no-border no-padding slide-toggle">\n      <mat-slide-toggle class="mat-slide" formControlName="checkForSingleEntity">\n        {{ \'tb.rulenode.check-relation-to-specific-entity\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <div *ngIf="checkRelationConfigForm.get(\'checkForSingleEntity\').value" class="same-width-component-row">\n      <tb-entity-type-select\n        style="min-width: 100px; flex: 1;"\n        showLabel\n        required\n        formControlName="entityType">\n      </tb-entity-type-select>\n      <tb-entity-autocomplete\n        fxFlex\n        required\n        *ngIf="checkRelationConfigForm.get(\'entityType\').value"\n        [entityType]="checkRelationConfigForm.get(\'entityType\').value"\n        formControlName="entityId">\n      </tb-entity-autocomplete>\n    </div>\n  </div>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class sr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.perimeterType=jt,this.perimeterTypes=Object.values(jt),this.perimeterTypeTranslationMap=Qt,this.rangeUnits=Object.values(Jt),this.rangeUnitTranslationMap=Wt,this.defaultPaddingEnable=!0}configForm(){return this.geoFilterConfigForm}prepareInputConfig(e){return{latitudeKeyName:Ce(e?.latitudeKeyName)?e.latitudeKeyName:null,longitudeKeyName:Ce(e?.longitudeKeyName)?e.longitudeKeyName:null,perimeterType:Ce(e?.perimeterType)?e.perimeterType:null,fetchPerimeterInfoFromMessageMetadata:!!Ce(e?.fetchPerimeterInfoFromMessageMetadata)&&e.fetchPerimeterInfoFromMessageMetadata,perimeterKeyName:Ce(e?.perimeterKeyName)?e.perimeterKeyName:null,centerLatitude:Ce(e?.centerLatitude)?e.centerLatitude:null,centerLongitude:Ce(e?.centerLongitude)?e.centerLongitude:null,range:Ce(e?.range)?e.range:null,rangeUnit:Ce(e?.rangeUnit)?e.rangeUnit:null,polygonsDefinition:Ce(e?.polygonsDefinition)?e.polygonsDefinition:null}}onConfigurationSet(e){this.geoFilterConfigForm=this.fb.group({latitudeKeyName:[e.latitudeKeyName,[K.required]],longitudeKeyName:[e.longitudeKeyName,[K.required]],perimeterType:[e.perimeterType,[K.required]],fetchPerimeterInfoFromMessageMetadata:[e.fetchPerimeterInfoFromMessageMetadata,[]],perimeterKeyName:[e.perimeterKeyName,[]],centerLatitude:[e.centerLatitude,[]],centerLongitude:[e.centerLongitude,[]],range:[e.range,[]],rangeUnit:[e.rangeUnit,[]],polygonsDefinition:[e.polygonsDefinition,[]]})}validatorTriggers(){return["fetchPerimeterInfoFromMessageMetadata","perimeterType"]}updateValidators(e){const t=this.geoFilterConfigForm.get("fetchPerimeterInfoFromMessageMetadata").value,n=this.geoFilterConfigForm.get("perimeterType").value;t?this.geoFilterConfigForm.get("perimeterKeyName").setValidators([K.required]):this.geoFilterConfigForm.get("perimeterKeyName").setValidators([]),t||n!==jt.CIRCLE?(this.geoFilterConfigForm.get("centerLatitude").setValidators([]),this.geoFilterConfigForm.get("centerLongitude").setValidators([]),this.geoFilterConfigForm.get("range").setValidators([]),this.geoFilterConfigForm.get("rangeUnit").setValidators([]),this.defaultPaddingEnable=!0):(this.geoFilterConfigForm.get("centerLatitude").setValidators([K.required,K.min(-90),K.max(90)]),this.geoFilterConfigForm.get("centerLongitude").setValidators([K.required,K.min(-180),K.max(180)]),this.geoFilterConfigForm.get("range").setValidators([K.required,K.min(0)]),this.geoFilterConfigForm.get("rangeUnit").setValidators([K.required]),this.defaultPaddingEnable=!1),t||n!==jt.POLYGON?this.geoFilterConfigForm.get("polygonsDefinition").setValidators([]):this.geoFilterConfigForm.get("polygonsDefinition").setValidators([K.required]),this.geoFilterConfigForm.get("perimeterKeyName").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("centerLatitude").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("centerLongitude").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("range").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("rangeUnit").updateValueAndValidity({emitEvent:e}),this.geoFilterConfigForm.get("polygonsDefinition").updateValueAndValidity({emitEvent:e})}}e("GpsGeoFilterConfigComponent",sr),sr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:sr,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),sr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:sr,selector:"tb-filter-node-gps-geofencing-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="geoFilterConfigForm" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.coordinate-field-names</div>\n    <section>\n      <div fxLayout="row" fxLayoutGap="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.latitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="latitudeKeyName" required>\n          <mat-error *ngIf="geoFilterConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.latitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.longitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="longitudeKeyName" required>\n          <mat-error *ngIf="geoFilterConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.longitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.coordinate-field-hint</div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked" [class.no-padding-bottom]="!defaultPaddingEnable">\n    <div class="tb-form-panel-title" translate>tb.rulenode.geofence-configuration</div>\n    <section fxLayout="column">\n      <mat-form-field fxFlex class="mat-block" hideRequiredMarker>\n        <mat-label>{{ \'tb.rulenode.perimeter-type\' | translate }}</mat-label>\n        <mat-select formControlName="perimeterType">\n          <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n            {{ perimeterTypeTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div tb-hint-tooltip-icon="{{ geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE\n        ? (\'tb.rulenode.fetch-circle-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoFilterConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoFilterConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'})\n        : (\'tb.rulenode.fetch-poligon-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoFilterConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoFilterConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'}) }}"\n           class="tb-form-row no-border no-padding slide-toggle">\n        <mat-slide-toggle class="mat-slide" formControlName="fetchPerimeterInfoFromMessageMetadata">\n          {{ \'tb.rulenode.fetch-perimeter-info-from-metadata\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field *ngIf="geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value" class="mat-block">\n        <mat-label>{{ \'tb.rulenode.perimeter-key-name\' | translate }}</mat-label>\n        <input matInput formControlName="perimeterKeyName" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'perimeterKeyName\').hasError(\'required\')">\n          {{ \'tb.rulenode.perimeter-key-name-required\' | translate }}\n        </mat-error>\n        <mat-hint>{{ \'tb.rulenode.perimeter-key-name-hint\' | translate }}</mat-hint>\n      </mat-form-field>\n      <div fxLayout="column"\n           *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n                    !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-latitude\' | translate }}</mat-label>\n            <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-longitude\' | translate }}</mat-label>\n            <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range\' | translate }}</mat-label>\n            <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'range\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range-units\' | translate }}</mat-label>\n            <mat-select formControlName="rangeUnit" required>\n              <mat-option *ngFor="let type of rangeUnits" [value]="type">\n                {{ rangeUnitTranslationMap.get(type) | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'rangeUnit\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-units-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <mat-form-field class="mat-block" subscriptSizing="dynamic"\n                      *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                         !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <mat-label>{{ \'tb.rulenode.polygon-definition\' | translate }}</mat-label>\n        <input matInput formControlName="polygonsDefinition" required>\n        <mat-hint>{{ \'tb.rulenode.polygon-definition-hint\' | translate }}</mat-hint>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n          {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </section>\n  </section>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:sr,decorators:[{type:n,args:[{selector:"tb-filter-node-gps-geofencing-config",template:'<section [formGroup]="geoFilterConfigForm" class="tb-form-panel no-border no-padding">\n  <section class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.coordinate-field-names</div>\n    <section>\n      <div fxLayout="row" fxLayoutGap="16px">\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.latitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="latitudeKeyName" required>\n          <mat-error *ngIf="geoFilterConfigForm.get(\'latitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.latitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex="50" class="mat-block">\n          <mat-label>{{ \'tb.rulenode.longitude-field-name\' | translate }}</mat-label>\n          <input matInput formControlName="longitudeKeyName" required>\n          <mat-error *ngIf="geoFilterConfigForm.get(\'longitudeKeyName\').hasError(\'required\')">\n            {{ \'tb.rulenode.longitude-field-name-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    <div class="tb-form-hint tb-primary-fill" translate>tb.rulenode.coordinate-field-hint</div>\n    </section>\n  </section>\n  <section class="tb-form-panel stroked" [class.no-padding-bottom]="!defaultPaddingEnable">\n    <div class="tb-form-panel-title" translate>tb.rulenode.geofence-configuration</div>\n    <section fxLayout="column">\n      <mat-form-field fxFlex class="mat-block" hideRequiredMarker>\n        <mat-label>{{ \'tb.rulenode.perimeter-type\' | translate }}</mat-label>\n        <mat-select formControlName="perimeterType">\n          <mat-option *ngFor="let type of perimeterTypes" [value]="type">\n            {{ perimeterTypeTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div tb-hint-tooltip-icon="{{ geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE\n        ? (\'tb.rulenode.fetch-circle-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoFilterConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoFilterConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'})\n        : (\'tb.rulenode.fetch-poligon-parameter-info-from-metadata-hint\'\n            | translate : { perimeterKeyName: geoFilterConfigForm.get(\'perimeterKeyName\').valid\n                              ? geoFilterConfigForm.get(\'perimeterKeyName\').value\n                              : \'ss_perimeter\'}) }}"\n           class="tb-form-row no-border no-padding slide-toggle">\n        <mat-slide-toggle class="mat-slide" formControlName="fetchPerimeterInfoFromMessageMetadata">\n          {{ \'tb.rulenode.fetch-perimeter-info-from-metadata\' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <mat-form-field *ngIf="geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value" class="mat-block">\n        <mat-label>{{ \'tb.rulenode.perimeter-key-name\' | translate }}</mat-label>\n        <input matInput formControlName="perimeterKeyName" required>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'perimeterKeyName\').hasError(\'required\')">\n          {{ \'tb.rulenode.perimeter-key-name-required\' | translate }}\n        </mat-error>\n        <mat-hint>{{ \'tb.rulenode.perimeter-key-name-hint\' | translate }}</mat-hint>\n      </mat-form-field>\n      <div fxLayout="column"\n           *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.CIRCLE &&\n                    !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-latitude\' | translate }}</mat-label>\n            <input type="number" min="-90" max="90" step="0.1" matInput formControlName="centerLatitude" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'centerLatitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-latitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.circle-center-longitude\' | translate }}</mat-label>\n            <input type="number" min="-180" max="180" step="0.1" matInput formControlName="centerLongitude" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'centerLongitude\').hasError(\'required\')">\n              {{ \'tb.rulenode.circle-center-longitude-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout="row" fxLayoutGap="16px">\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range\' | translate }}</mat-label>\n            <input type="number" min="0" step="0.1" matInput formControlName="range" required>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'range\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex>\n            <mat-label>{{ \'tb.rulenode.range-units\' | translate }}</mat-label>\n            <mat-select formControlName="rangeUnit" required>\n              <mat-option *ngFor="let type of rangeUnits" [value]="type">\n                {{ rangeUnitTranslationMap.get(type) | translate }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf="geoFilterConfigForm.get(\'rangeUnit\').hasError(\'required\')">\n              {{ \'tb.rulenode.range-units-required\' | translate }}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <mat-form-field class="mat-block" subscriptSizing="dynamic"\n                      *ngIf="geoFilterConfigForm.get(\'perimeterType\').value === perimeterType.POLYGON &&\n                         !geoFilterConfigForm.get(\'fetchPerimeterInfoFromMessageMetadata\').value">\n        <mat-label>{{ \'tb.rulenode.polygon-definition\' | translate }}</mat-label>\n        <input matInput formControlName="polygonsDefinition" required>\n        <mat-hint>{{ \'tb.rulenode.polygon-definition-hint\' | translate }}</mat-hint>\n        <mat-error *ngIf="geoFilterConfigForm.get(\'polygonsDefinition\').hasError(\'required\')">\n          {{ \'tb.rulenode.polygon-definition-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </section>\n  </section>\n</section>\n',styles:[":host .slide-toggle{margin-bottom:18px}\n",':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class mr extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.messageTypeConfigForm}prepareInputConfig(e){return{messageTypes:Ce(e?.messageTypes)?e.messageTypes:null}}onConfigurationSet(e){this.messageTypeConfigForm=this.fb.group({messageTypes:[e.messageTypes,[K.required]]})}}e("MessageTypeConfigComponent",mr),mr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:mr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),mr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:mr,selector:"tb-filter-node-message-type-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="messageTypeConfigForm">\n  <tb-message-types-config\n    required\n    [label]="\'tb.rulenode.select-message-types\' | translate"\n    formControlName="messageTypes">\n  </tb-message-types-config>\n</section>\n',dependencies:[{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Co,selector:"tb-message-types-config",inputs:["required","label","placeholder","disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:mr,decorators:[{type:n,args:[{selector:"tb-filter-node-message-type-config",template:'<section [formGroup]="messageTypeConfigForm">\n  <tb-message-types-config\n    required\n    [label]="\'tb.rulenode.select-message-types\' | translate"\n    formControlName="messageTypes">\n  </tb-message-types-config>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class pr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.allowedEntityTypes=[C.DEVICE,C.ASSET,C.ENTITY_VIEW,C.TENANT,C.CUSTOMER,C.USER,C.DASHBOARD,C.RULE_CHAIN,C.RULE_NODE,C.EDGE,C.ENTITY_GROUP,C.CONVERTER,C.INTEGRATION,C.SCHEDULER_EVENT,C.BLOB_ENTITY]}configForm(){return this.originatorTypeConfigForm}prepareInputConfig(e){return{originatorTypes:Ce(e?.originatorTypes)?e.originatorTypes:null}}onConfigurationSet(e){this.originatorTypeConfigForm=this.fb.group({originatorTypes:[e.originatorTypes,[K.required]]})}}e("OriginatorTypeConfigComponent",pr),pr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:pr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),pr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:pr,selector:"tb-filter-node-originator-type-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="originatorTypeConfigForm">\n  <tb-entity-type-list fxFlex\n                       formControlName="originatorTypes"\n                       [allowedEntityTypes]="allowedEntityTypes"\n                       [ignoreAuthorityFilter]="true"\n                       [emptyInputPlaceholder]="\'tb.rulenode.add-entity-type\' | translate"\n                       [filledInputPlaceholder]="\'tb.rulenode.add-entity-type\' | translate"\n                       [label]="\'tb.rulenode.select-entity-types\' | translate"\n                       required>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.entity-type\' | translate } }}">help</mat-icon>\n  </tb-entity-type-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:xt.EntityTypeListComponent,selector:"tb-entity-type-list",inputs:["required","additionalClasses","appearance","label","floatLabel","disabled","subscriptSizing","allowedEntityTypes","emptyInputPlaceholder","filledInputPlaceholder","ignoreAuthorityFilter"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:pr,decorators:[{type:n,args:[{selector:"tb-filter-node-originator-type-config",template:'<section [formGroup]="originatorTypeConfigForm">\n  <tb-entity-type-list fxFlex\n                       formControlName="originatorTypes"\n                       [allowedEntityTypes]="allowedEntityTypes"\n                       [ignoreAuthorityFilter]="true"\n                       [emptyInputPlaceholder]="\'tb.rulenode.add-entity-type\' | translate"\n                       [filledInputPlaceholder]="\'tb.rulenode.add-entity-type\' | translate"\n                       [label]="\'tb.rulenode.select-entity-types\' | translate"\n                       required>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.chip-help\' | translate: { inputName: \'tb.rulenode.entity-type\' | translate } }}">help</mat-icon>\n  </tb-entity-type-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class dr extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-filter-function"}configForm(){return this.scriptConfigForm}onConfigurationSet(e){this.scriptConfigForm=this.fb.group({scriptLang:[e.scriptLang,[K.required]],jsScript:[e.jsScript,[]],tbelScript:[e.tbelScript,[]]})}validatorTriggers(){return["scriptLang"]}updateValidators(e){let t=this.scriptConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.scriptConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.scriptConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.scriptConfigForm.get("jsScript").setValidators(t===x.JS?[K.required]:[]),this.scriptConfigForm.get("jsScript").updateValueAndValidity({emitEvent:e}),this.scriptConfigForm.get("tbelScript").setValidators(t===x.TBEL?[K.required]:[]),this.scriptConfigForm.get("tbelScript").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),{scriptLang:Ce(e?.scriptLang)?e.scriptLang:x.JS,jsScript:Ce(e?.jsScript)?e.jsScript:null,tbelScript:Ce(e?.tbelScript)?e.tbelScript:null}}testScript(e){const t=this.scriptConfigForm.get("scriptLang").value,n=t===x.JS?"jsScript":"tbelScript",o=t===x.JS?"rulenode/filter_node_script_fn":"rulenode/tbel/filter_node_script_fn",r=this.scriptConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"filter",this.translate.instant("tb.rulenode.filter"),"Filter",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.scriptConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.scriptConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("ScriptConfigComponent",dr),dr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:dr,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),dr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:dr,selector:"tb-filter-node-script-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="scriptConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Filter"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/filter_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Filter"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/filter_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <button mat-button mat-raised-button color="primary" (click)="testScript()">\n    {{ testScriptLabel | translate }}\n  </button>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:dr,decorators:[{type:n,args:[{selector:"tb-filter-node-script-config",template:'<section [formGroup]="scriptConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Filter"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/filter_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Filter"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/filter_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <button mat-button mat-raised-button color="primary" (click)="testScript()">\n    {{ testScriptLabel | translate }}\n  </button>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class ur extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-switch-function"}configForm(){return this.switchConfigForm}onConfigurationSet(e){this.switchConfigForm=this.fb.group({scriptLang:[e.scriptLang,[K.required]],jsScript:[e.jsScript,[]],tbelScript:[e.tbelScript,[]]})}validatorTriggers(){return["scriptLang"]}updateValidators(e){let t=this.switchConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.switchConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.switchConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.switchConfigForm.get("jsScript").setValidators(t===x.JS?[K.required]:[]),this.switchConfigForm.get("jsScript").updateValueAndValidity({emitEvent:e}),this.switchConfigForm.get("tbelScript").setValidators(t===x.TBEL?[K.required]:[]),this.switchConfigForm.get("tbelScript").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),{scriptLang:Ce(e?.scriptLang)?e.scriptLang:x.JS,jsScript:Ce(e?.jsScript)?e.jsScript:null,tbelScript:Ce(e?.tbelScript)?e.tbelScript:null}}testScript(e){const t=this.switchConfigForm.get("scriptLang").value,n=t===x.JS?"jsScript":"tbelScript",o=t===x.JS?"rulenode/switch_node_script_fn":"rulenode/tbel/switch_node_script_fn",r=this.switchConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"switch",this.translate.instant("tb.rulenode.switch"),"Switch",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.switchConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.switchConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("SwitchConfigComponent",ur),ur.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ur,deps:[{token:_.Store},{token:H.UntypedFormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),ur.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:ur,selector:"tb-filter-node-switch-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="switchConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="switchConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Switch"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/switch_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="switchConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Switch"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/switch_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <button mat-button mat-raised-button color="primary" (click)="testScript()">\n    {{ testScriptLabel | translate }}\n  </button>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:ur,decorators:[{type:n,args:[{selector:"tb-filter-node-switch-config",template:'<section [formGroup]="switchConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="switchConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Switch"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              helpId="rulenode/switch_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="switchConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Switch"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              helpId="rulenode/tbel/switch_node_script_fn"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <button mat-button mat-raised-button color="primary" (click)="testScript()">\n    {{ testScriptLabel | translate }}\n  </button>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});class cr{}e("RuleNodeCoreConfigFilterModule",cr),cr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:cr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),cr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:cr,declarations:[ir,lr,sr,mr,pr,dr,ur,ar],imports:[X,M,qo],exports:[ir,lr,sr,mr,pr,dr,ur,ar]}),cr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:cr,imports:[X,M,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:cr,decorators:[{type:d,args:[{declarations:[ir,lr,sr,mr,pr,dr,ur,ar],imports:[X,M,qo],exports:[ir,lr,sr,mr,pr,dr,ur,ar]}]}]});class gr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.originatorSource=Bt,this.originatorSources=Object.keys(Bt),this.originatorSourceTranslationMap=_t,this.originatorSourceDescTranslationMap=Ht,this.allowedEntityTypes=[C.DEVICE,C.ASSET,C.ENTITY_VIEW,C.USER,C.EDGE]}configForm(){return this.changeOriginatorConfigForm}onConfigurationSet(e){this.changeOriginatorConfigForm=this.fb.group({originatorSource:[e?e.originatorSource:null,[K.required]],preserveOriginatorIfCustomer:[!!e&&e?.preserveOriginatorIfCustomer,[]],entityType:[e?e.entityType:null,[]],entityNamePattern:[e?e.entityNamePattern:null,[]],relationsQuery:[e?e.relationsQuery:null,[]]})}validatorTriggers(){return["originatorSource"]}updateValidators(e){const t=this.changeOriginatorConfigForm.get("originatorSource").value;t===Bt.RELATED?this.changeOriginatorConfigForm.get("relationsQuery").setValidators([K.required]):this.changeOriginatorConfigForm.get("relationsQuery").setValidators([]),t===Bt.ENTITY?(this.changeOriginatorConfigForm.get("entityType").setValidators([K.required]),this.changeOriginatorConfigForm.get("entityNamePattern").setValidators([K.required,K.pattern(/.*\S.*/)])):(this.changeOriginatorConfigForm.get("entityType").patchValue(null,{emitEvent:e}),this.changeOriginatorConfigForm.get("entityNamePattern").patchValue(null,{emitEvent:e}),this.changeOriginatorConfigForm.get("entityType").setValidators([]),this.changeOriginatorConfigForm.get("entityNamePattern").setValidators([])),this.changeOriginatorConfigForm.get("relationsQuery").updateValueAndValidity({emitEvent:e}),this.changeOriginatorConfigForm.get("entityType").updateValueAndValidity({emitEvent:e}),this.changeOriginatorConfigForm.get("entityNamePattern").updateValueAndValidity({emitEvent:e})}}e("ChangeOriginatorConfigComponent",gr),gr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:gr,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),gr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:gr,selector:"tb-transformation-node-change-originator-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="changeOriginatorConfigForm" class="tb-form-panel no-border no-padding">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic" hideRequiredMarker>\n    <mat-label translate>tb.rulenode.new-originator</mat-label>\n    <mat-select formControlName="originatorSource" required>\n      <mat-select-trigger>\n        <span *ngIf="originatorSourceTranslationMap.get(changeOriginatorConfigForm.get(\'originatorSource\').value)">\n          {{ originatorSourceTranslationMap.get(changeOriginatorConfigForm.get(\'originatorSource\').value) | translate }}\n        </span>\n      </mat-select-trigger>\n      <mat-option *ngFor="let source of originatorSources" [value]="source">\n        <span matListItemTitle>\n          {{ originatorSourceTranslationMap.get(source) | translate }}\n        </span>\n        <br>\n        <small matListItemMeta style="color: inherit">\n          {{ originatorSourceDescTranslationMap.get(source) | translate }}\n        </small>\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.CUSTOMER"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.parse-originator-if-customer-hint\' | translate }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="preserveOriginatorIfCustomer">\n      {{ \'tb.rulenode.parse-originator-if-customer\' | translate }}\n    </mat-slide-toggle>\n  </div>\n\n  <div class="tb-form-panel stroked no-padding-bottom"\n        *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.ENTITY">\n    <tb-example-hint [hintText]="\'tb.rulenode.entity-name-pattern-hint\'"\n                      popupHelpLink="rulenode/change_originator_node_fields_templatization">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <tb-entity-type-select\n        showLabel\n        required\n        [allowedEntityTypes] = "allowedEntityTypes"\n        formControlName="entityType"\n        class="mat-mdc-form-field flex">\n      </tb-entity-type-select>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.entity-name-pattern</mat-label>\n        <input required matInput formControlName="entityNamePattern">\n        <mat-error *ngIf="changeOriginatorConfigForm.get(\'entityNamePattern\').hasError(\'required\') ||\n                          changeOriginatorConfigForm.get(\'entityNamePattern\').hasError(\'pattern\')">\n          {{ \'tb.rulenode.entity-name-pattern-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <tb-relations-query-config\n    required\n    *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.RELATED"\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n</section>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ge.EntityTypeSelectComponent,selector:"tb-entity-type-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","filterAllowedEntityTypes","overrideEntityTypeTranslations","showLabel","required","disabled"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"directive",type:le.MatSelectTrigger,selector:"mat-select-trigger"},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:Xe.MatListItemTitle,selector:"[matListItemTitle]"},{kind:"directive",type:Xe.MatListItemMeta,selector:"[matListItemMeta]"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:gr,decorators:[{type:n,args:[{selector:"tb-transformation-node-change-originator-config",template:'<section [formGroup]="changeOriginatorConfigForm" class="tb-form-panel no-border no-padding">\n  <mat-form-field class="mat-block" subscriptSizing="dynamic" hideRequiredMarker>\n    <mat-label translate>tb.rulenode.new-originator</mat-label>\n    <mat-select formControlName="originatorSource" required>\n      <mat-select-trigger>\n        <span *ngIf="originatorSourceTranslationMap.get(changeOriginatorConfigForm.get(\'originatorSource\').value)">\n          {{ originatorSourceTranslationMap.get(changeOriginatorConfigForm.get(\'originatorSource\').value) | translate }}\n        </span>\n      </mat-select-trigger>\n      <mat-option *ngFor="let source of originatorSources" [value]="source">\n        <span matListItemTitle>\n          {{ originatorSourceTranslationMap.get(source) | translate }}\n        </span>\n        <br>\n        <small matListItemMeta style="color: inherit">\n          {{ originatorSourceDescTranslationMap.get(source) | translate }}\n        </small>\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <div *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.CUSTOMER"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.parse-originator-if-customer-hint\' | translate }}"\n       class="tb-form-row same-padding">\n    <mat-slide-toggle class="mat-slide margin" formControlName="preserveOriginatorIfCustomer">\n      {{ \'tb.rulenode.parse-originator-if-customer\' | translate }}\n    </mat-slide-toggle>\n  </div>\n\n  <div class="tb-form-panel stroked no-padding-bottom"\n        *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.ENTITY">\n    <tb-example-hint [hintText]="\'tb.rulenode.entity-name-pattern-hint\'"\n                      popupHelpLink="rulenode/change_originator_node_fields_templatization">\n    </tb-example-hint>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <tb-entity-type-select\n        showLabel\n        required\n        [allowedEntityTypes] = "allowedEntityTypes"\n        formControlName="entityType"\n        class="mat-mdc-form-field flex">\n      </tb-entity-type-select>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.entity-name-pattern</mat-label>\n        <input required matInput formControlName="entityNamePattern">\n        <mat-error *ngIf="changeOriginatorConfigForm.get(\'entityNamePattern\').hasError(\'required\') ||\n                          changeOriginatorConfigForm.get(\'entityNamePattern\').hasError(\'pattern\')">\n          {{ \'tb.rulenode.entity-name-pattern-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <tb-relations-query-config\n    required\n    *ngIf="changeOriginatorConfigForm.get(\'originatorSource\').value === originatorSource.RELATED"\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class fr extends g{constructor(e,t,n,o){super(e),this.store=e,this.fb=t,this.nodeScriptTestService=n,this.translate=o,this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.changeScript=new l,this.hasScript=!0,this.testScriptLabel="tb.rulenode.test-transformer-function"}configForm(){return this.scriptConfigForm}onConfigurationSet(e){this.scriptConfigForm=this.fb.group({scriptLang:[e?e.scriptLang:x.JS,[K.required]],jsScript:[e?e.jsScript:null,[K.required]],tbelScript:[e?e.tbelScript:null,[]]})}validatorTriggers(){return["scriptLang"]}updateValidators(e){let t=this.scriptConfigForm.get("scriptLang").value;t!==x.TBEL||this.tbelEnabled||(t=x.JS,this.scriptConfigForm.get("scriptLang").patchValue(t,{emitEvent:!1}),setTimeout((()=>{this.scriptConfigForm.updateValueAndValidity({emitEvent:!0})}))),this.scriptConfigForm.get("jsScript").setValidators(t===x.JS?[K.required]:[]),this.scriptConfigForm.get("jsScript").updateValueAndValidity({emitEvent:e}),this.scriptConfigForm.get("tbelScript").setValidators(t===x.TBEL?[K.required]:[]),this.scriptConfigForm.get("tbelScript").updateValueAndValidity({emitEvent:e})}prepareInputConfig(e){return e&&(e.scriptLang||(e.scriptLang=x.JS)),e}testScript(e){const t=this.scriptConfigForm.get("scriptLang").value,n=t===x.JS?"jsScript":"tbelScript",o=t===x.JS?"rulenode/transformation_node_script_fn":"rulenode/tbel/transformation_node_script_fn",r=this.scriptConfigForm.get(n).value;this.nodeScriptTestService.testNodeScript(r,"update",this.translate.instant("tb.rulenode.transformer"),"Transform",["msg","metadata","msgType"],this.ruleNodeId,o,t,e).subscribe((e=>{e&&(this.scriptConfigForm.get(n).setValue(e),this.changeScript.emit())}))}onValidate(){this.scriptConfigForm.get("scriptLang").value===x.JS&&this.jsFuncComponent.validateOnSubmit()}}e("TransformScriptConfigComponent",fr),fr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:fr,deps:[{token:_.Store},{token:H.FormBuilder},{token:ve.NodeScriptTestService},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),fr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:fr,selector:"tb-transformation-node-script-config",viewQueries:[{propertyName:"jsFuncComponent",first:!0,predicate:["jsFuncComponent"],descendants:!0},{propertyName:"tbelFuncComponent",first:!0,predicate:["tbelFuncComponent"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'<section [formGroup]="scriptConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Transform"\n              helpId="rulenode/transformation_node_script_fn"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Transform"\n              helpId="rulenode/tbel/transformation_node_script_fn"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div>\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n',dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:fr,decorators:[{type:n,args:[{selector:"tb-transformation-node-script-config",template:'<section [formGroup]="scriptConfigForm">\n  <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled"></tb-script-lang>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.JS"\n              #jsFuncComponent\n              formControlName="jsScript"\n              functionName="Transform"\n              helpId="rulenode/transformation_node_script_fn"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <tb-js-func *ngIf="scriptConfigForm.get(\'scriptLang\').value === scriptLanguage.TBEL"\n              #tbelFuncComponent\n              formControlName="tbelScript"\n              functionName="Transform"\n              helpId="rulenode/tbel/transformation_node_script_fn"\n              [functionArgs]="[\'msg\', \'metadata\', \'msgType\']"\n              [disableUndefinedCheck]="true"\n              [scriptLanguage]="scriptLanguage.TBEL"\n              noValidate="true">\n    <button toolbarSuffixButton\n            mat-icon-button\n            matTooltip="{{ testScriptLabel | translate }}"\n            matTooltipPosition="above"\n            class="tb-mat-32"\n            (click)="testScript()">\n      <mat-icon class="material-icons" color="primary">bug_report</mat-icon>\n    </button>\n  </tb-js-func>\n  <div>\n    <button mat-button mat-raised-button color="primary" (click)="testScript()">\n      {{ testScriptLabel | translate }}\n    </button>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:ve.NodeScriptTestService},{type:re.TranslateService}]},propDecorators:{jsFuncComponent:[{type:u,args:["jsFuncComponent",{static:!1}]}],tbelFuncComponent:[{type:u,args:["tbelFuncComponent",{static:!1}]}]}});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const yr=bt({passive:!0});class xr{constructor(e,t){this._platform=e,this._ngZone=t,this._monitoredElements=new Map}monitor(e){if(!this._platform.isBrowser)return ge;const t=Ye(e),n=this._monitoredElements.get(t);if(n)return n.subject;const o=new de,r="cdk-text-field-autofilled",a=e=>{"cdk-text-field-autofill-start"!==e.animationName||t.classList.contains(r)?"cdk-text-field-autofill-end"===e.animationName&&t.classList.contains(r)&&(t.classList.remove(r),this._ngZone.run((()=>o.next({target:e.target,isAutofilled:!1})))):(t.classList.add(r),this._ngZone.run((()=>o.next({target:e.target,isAutofilled:!0}))))};return this._ngZone.runOutsideAngular((()=>{t.addEventListener("animationstart",a,yr),t.classList.add("cdk-text-field-autofill-monitored")})),this._monitoredElements.set(t,{subject:o,unlisten:()=>{t.removeEventListener("animationstart",a,yr)}}),o}stopMonitoring(e){const t=Ye(e),n=this._monitoredElements.get(t);n&&(n.unlisten(),n.subject.complete(),t.classList.remove("cdk-text-field-autofill-monitored"),t.classList.remove("cdk-text-field-autofilled"),this._monitoredElements.delete(t))}ngOnDestroy(){this._monitoredElements.forEach(((e,t)=>this.stopMonitoring(t)))}}xr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:xr,deps:[{token:ht.Platform},{token:t.NgZone}],target:t.ɵɵFactoryTarget.Injectable}),xr.ɵprov=t.ɵɵngDeclareInjectable({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:xr,providedIn:"root"}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:xr,decorators:[{type:r,args:[{providedIn:"root"}]}],ctorParameters:function(){return[{type:ht.Platform},{type:t.NgZone}]}});class br{constructor(e,t){this._elementRef=e,this._autofillMonitor=t,this.cdkAutofill=new l}ngOnInit(){this._autofillMonitor.monitor(this._elementRef).subscribe((e=>this.cdkAutofill.emit(e)))}ngOnDestroy(){this._autofillMonitor.stopMonitoring(this._elementRef)}}br.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:br,deps:[{token:t.ElementRef},{token:xr}],target:t.ɵɵFactoryTarget.Directive}),br.ɵdir=t.ɵɵngDeclareDirective({minVersion:"14.0.0",version:"15.2.0-rc.0",type:br,selector:"[cdkAutofill]",outputs:{cdkAutofill:"cdkAutofill"},ngImport:t}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:br,decorators:[{type:s,args:[{selector:"[cdkAutofill]"}]}],ctorParameters:function(){return[{type:t.ElementRef},{type:xr}]},propDecorators:{cdkAutofill:[{type:p}]}});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class hr{get minRows(){return this._minRows}set minRows(e){this._minRows=Je(e),this._setMinHeight()}get maxRows(){return this._maxRows}set maxRows(e){this._maxRows=Je(e),this._setMaxHeight()}get enabled(){return this._enabled}set enabled(e){e=$e(e),this._enabled!==e&&((this._enabled=e)?this.resizeToFitContent(!0):this.reset())}get placeholder(){return this._textareaElement.placeholder}set placeholder(e){this._cachedPlaceholderHeight=void 0,e?this._textareaElement.setAttribute("placeholder",e):this._textareaElement.removeAttribute("placeholder"),this._cacheTextareaPlaceholderHeight()}constructor(e,t,n,o){this._elementRef=e,this._platform=t,this._ngZone=n,this._destroyed=new de,this._enabled=!0,this._previousMinRows=-1,this._isViewInited=!1,this._handleFocusEvent=e=>{this._hasFocus="focus"===e.type},this._document=o,this._textareaElement=this._elementRef.nativeElement}_setMinHeight(){const e=this.minRows&&this._cachedLineHeight?this.minRows*this._cachedLineHeight+"px":null;e&&(this._textareaElement.style.minHeight=e)}_setMaxHeight(){const e=this.maxRows&&this._cachedLineHeight?this.maxRows*this._cachedLineHeight+"px":null;e&&(this._textareaElement.style.maxHeight=e)}ngAfterViewInit(){this._platform.isBrowser&&(this._initialHeight=this._textareaElement.style.height,this.resizeToFitContent(),this._ngZone.runOutsideAngular((()=>{const e=this._getWindow();fe(e,"resize").pipe(_e(16),Ve(this._destroyed)).subscribe((()=>this.resizeToFitContent(!0))),this._textareaElement.addEventListener("focus",this._handleFocusEvent),this._textareaElement.addEventListener("blur",this._handleFocusEvent)})),this._isViewInited=!0,this.resizeToFitContent(!0))}ngOnDestroy(){this._textareaElement.removeEventListener("focus",this._handleFocusEvent),this._textareaElement.removeEventListener("blur",this._handleFocusEvent),this._destroyed.next(),this._destroyed.complete()}_cacheTextareaLineHeight(){if(this._cachedLineHeight)return;let e=this._textareaElement.cloneNode(!1);e.rows=1,e.style.position="absolute",e.style.visibility="hidden",e.style.border="none",e.style.padding="0",e.style.height="",e.style.minHeight="",e.style.maxHeight="",e.style.overflow="hidden",this._textareaElement.parentNode.appendChild(e),this._cachedLineHeight=e.clientHeight,e.remove(),this._setMinHeight(),this._setMaxHeight()}_measureScrollHeight(){const e=this._textareaElement,t=e.style.marginBottom||"",n=this._platform.FIREFOX,o=n&&this._hasFocus,r=n?"cdk-textarea-autosize-measuring-firefox":"cdk-textarea-autosize-measuring";o&&(e.style.marginBottom=`${e.clientHeight}px`),e.classList.add(r);const a=e.scrollHeight-4;return e.classList.remove(r),o&&(e.style.marginBottom=t),a}_cacheTextareaPlaceholderHeight(){if(!this._isViewInited||null!=this._cachedPlaceholderHeight)return;if(!this.placeholder)return void(this._cachedPlaceholderHeight=0);const e=this._textareaElement.value;this._textareaElement.value=this._textareaElement.placeholder,this._cachedPlaceholderHeight=this._measureScrollHeight(),this._textareaElement.value=e}ngDoCheck(){this._platform.isBrowser&&this.resizeToFitContent()}resizeToFitContent(e=!1){if(!this._enabled)return;if(this._cacheTextareaLineHeight(),this._cacheTextareaPlaceholderHeight(),!this._cachedLineHeight)return;const t=this._elementRef.nativeElement,n=t.value;if(!e&&this._minRows===this._previousMinRows&&n===this._previousValue)return;const o=this._measureScrollHeight(),r=Math.max(o,this._cachedPlaceholderHeight||0);t.style.height=`${r}px`,this._ngZone.runOutsideAngular((()=>{"undefined"!=typeof requestAnimationFrame?requestAnimationFrame((()=>this._scrollToCaretPosition(t))):setTimeout((()=>this._scrollToCaretPosition(t)))})),this._previousValue=n,this._previousMinRows=this._minRows}reset(){void 0!==this._initialHeight&&(this._textareaElement.style.height=this._initialHeight)}_noopInputHandler(){}_getDocument(){return this._document||document}_getWindow(){return this._getDocument().defaultView||window}_scrollToCaretPosition(e){const{selectionStart:t,selectionEnd:n}=e;!this._destroyed.isStopped&&this._hasFocus&&e.setSelectionRange(t,n)}}hr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:hr,deps:[{token:t.ElementRef},{token:ht.Platform},{token:t.NgZone},{token:Z,optional:!0}],target:t.ɵɵFactoryTarget.Directive}),hr.ɵdir=t.ɵɵngDeclareDirective({minVersion:"14.0.0",version:"15.2.0-rc.0",type:hr,selector:"textarea[cdkTextareaAutosize]",inputs:{minRows:["cdkAutosizeMinRows","minRows"],maxRows:["cdkAutosizeMaxRows","maxRows"],enabled:["cdkTextareaAutosize","enabled"],placeholder:"placeholder"},host:{attributes:{rows:"1"},listeners:{input:"_noopInputHandler()"},classAttribute:"cdk-textarea-autosize"},exportAs:["cdkTextareaAutosize"],ngImport:t}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:hr,decorators:[{type:s,args:[{selector:"textarea[cdkTextareaAutosize]",exportAs:"cdkTextareaAutosize",host:{class:"cdk-textarea-autosize",rows:"1","(input)":"_noopInputHandler()"}}]}],ctorParameters:function(){return[{type:t.ElementRef},{type:ht.Platform},{type:t.NgZone},{type:void 0,decorators:[{type:i},{type:a,args:[Z]}]}]},propDecorators:{minRows:[{type:m,args:["cdkAutosizeMinRows"]}],maxRows:[{type:m,args:["cdkAutosizeMaxRows"]}],enabled:[{type:m,args:["cdkTextareaAutosize"]}],placeholder:[{type:m}]}});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class vr{}vr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:vr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),vr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.0-rc.0",ngImport:t,type:vr,declarations:[br,hr],exports:[br,hr]}),vr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:vr}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.0-rc.0",ngImport:t,type:vr,decorators:[{type:d,args:[{declarations:[br,hr],exports:[br,hr]}]}]});class Cr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.mailBodyTypes=[{name:"tb.mail-body-type.plain-text",description:"tb.mail-body-type.plain-text-description",value:"false"},{name:"tb.mail-body-type.html",description:"tb.mail-body-type.html-text-description",value:"true"},{name:"tb.mail-body-type.use-body-type-template",description:"tb.mail-body-type.dynamic-text-description",value:"dynamic"}]}configForm(){return this.toEmailConfigForm}onConfigurationSet(e){this.toEmailConfigForm=this.fb.group({fromTemplate:[e?e.fromTemplate:null,[]],toTemplate:[e?e.toTemplate:null,[K.required]],ccTemplate:[e?e.ccTemplate:null,[]],bccTemplate:[e?e.bccTemplate:null,[]],subjectTemplate:[e?e.subjectTemplate:null,[K.required]],mailBodyType:[e?e.mailBodyType:null],isHtmlTemplate:[e?e.isHtmlTemplate:null,[K.required]],bodyTemplate:[e?e.bodyTemplate:null,[K.required]]})}prepareInputConfig(e){return{fromTemplate:Ce(e?.fromTemplate)?e.fromTemplate:null,toTemplate:Ce(e?.toTemplate)?e.toTemplate:null,ccTemplate:Ce(e?.ccTemplate)?e.ccTemplate:null,bccTemplate:Ce(e?.bccTemplate)?e.bccTemplate:null,subjectTemplate:Ce(e?.subjectTemplate)?e.subjectTemplate:null,mailBodyType:Ce(e?.mailBodyType)?e.mailBodyType:null,isHtmlTemplate:Ce(e?.isHtmlTemplate)?e.isHtmlTemplate:null,bodyTemplate:Ce(e?.bodyTemplate)?e.bodyTemplate:null}}updateValidators(e){"dynamic"===this.toEmailConfigForm.get("mailBodyType").value?this.toEmailConfigForm.get("isHtmlTemplate").enable({emitEvent:!1}):this.toEmailConfigForm.get("isHtmlTemplate").disable({emitEvent:!1}),this.toEmailConfigForm.get("isHtmlTemplate").updateValueAndValidity({emitEvent:e})}validatorTriggers(){return["mailBodyType"]}getBodyTypeName(){return this.mailBodyTypes.find((e=>e.value===this.toEmailConfigForm.get("mailBodyType").value)).name}}e("ToEmailConfigComponent",Cr),Cr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Cr,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Cr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Cr,selector:"tb-transformation-node-to-email-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="toEmailConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.email-sender</div>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex" subscriptSizing="dynamic">\n        <mat-label translate>tb.rulenode.from-template</mat-label>\n        <input required matInput formControlName="fromTemplate">\n        <mat-hint align="start">\n          {{ \'tb.rulenode.email-from-template-hint\' | translate }}\n        </mat-hint>\n        <mat-hint align="end">\n          <div class="input-bottom-double-hint">\n            <div class="see-example"\n                hintMode\n                tb-help-popup="{{\'rulenode/to_email_node_fields_templatization\'}}"\n                tb-help-popup-placement="right"\n                trigger-style="letter-spacing:0.25px; font-size:12px;"\n                [tb-help-popup-style]="{maxWidth: \'820px\'}"\n                trigger-text="{{ \'tb.key-val.see-examples\' | translate }}"></div>\n          </div>\n        </mat-hint>\n        <mat-error *ngIf="toEmailConfigForm.get(\'fromTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.from-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel no-padding no-border">\n      <div class="tb-form-panel-title" translate>tb.rulenode.recipients</div>\n      <tb-example-hint [hintText]="\'tb.rulenode.recipients-block-main-hint\' | translate"\n                        popupHelpLink="rulenode/to_email_node_fields_templatization">\n      </tb-example-hint>\n    </div>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.to-template</mat-label>\n        <textarea required\n                  matInput\n                  class="tb-enable-vertical-resize"\n                  formControlName="toTemplate"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'toTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.to-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.cc-template</mat-label>\n        <textarea matInput\n                  formControlName="ccTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.bcc-template</mat-label>\n        <textarea matInput\n                  formControlName="bccTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.message-subject-and-content</div>\n    <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\' | translate"\n                      popupHelpLink="rulenode/to_email_node_fields_templatization">\n    </tb-example-hint>\n    <section>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.subject-template</mat-label>\n        <textarea required\n                  matInput\n                  formControlName="subjectTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'subjectTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.subject-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.mail-body-type</mat-label>\n        <mat-select formControlName="mailBodyType">\n          <mat-select-trigger>\n            <span *ngIf="toEmailConfigForm.get(\'mailBodyType\').value">\n              {{ getBodyTypeName() | translate }}\n            </span>\n          </mat-select-trigger>\n          <mat-option *ngFor="let type of mailBodyTypes" [value]="type.value">\n            <span matListItemTitle>\n              {{ type.name | translate }}\n            </span>\n            <br>\n            <small matListItemMeta style="color: inherit">\n              {{ type.description | translate }}\n            </small>\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="mat-block" *ngIf="toEmailConfigForm.get(\'mailBodyType\').value === \'dynamic\'">\n        <mat-label translate>tb.rulenode.body-type-template</mat-label>\n        <input required matInput formControlName="isHtmlTemplate">\n        <mat-hint translate>tb.mail-body-type.after-template-evaluation-hint</mat-hint>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.body-template</mat-label>\n        <textarea required\n                  matInput\n                  formControlName="bodyTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="2"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'bodyTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.body-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </section>\n  </div>\n</section>\n',styles:[":host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0;padding-right:16px}:host textarea.tb-enable-vertical-resize{resize:vertical}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:xe.HelpPopupComponent,selector:"[tb-help-popup], [tb-help-popup-content]",inputs:["tb-help-popup","tb-help-popup-content","trigger-text","trigger-style","tb-help-popup-placement","tb-help-popup-style","hintMode"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:hr,selector:"textarea[cdkTextareaAutosize]",inputs:["cdkAutosizeMinRows","cdkAutosizeMaxRows","cdkTextareaAutosize","placeholder"],exportAs:["cdkTextareaAutosize"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"directive",type:le.MatSelectTrigger,selector:"mat-select-trigger"},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:Xe.MatListItemTitle,selector:"[matListItemTitle]"},{kind:"directive",type:Xe.MatListItemMeta,selector:"[matListItemMeta]"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Cr,decorators:[{type:n,args:[{selector:"tb-transformation-node-to-email-config",template:'<section [formGroup]="toEmailConfigForm" class="tb-form-panel no-border no-padding">\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.email-sender</div>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex" subscriptSizing="dynamic">\n        <mat-label translate>tb.rulenode.from-template</mat-label>\n        <input required matInput formControlName="fromTemplate">\n        <mat-hint align="start">\n          {{ \'tb.rulenode.email-from-template-hint\' | translate }}\n        </mat-hint>\n        <mat-hint align="end">\n          <div class="input-bottom-double-hint">\n            <div class="see-example"\n                hintMode\n                tb-help-popup="{{\'rulenode/to_email_node_fields_templatization\'}}"\n                tb-help-popup-placement="right"\n                trigger-style="letter-spacing:0.25px; font-size:12px;"\n                [tb-help-popup-style]="{maxWidth: \'820px\'}"\n                trigger-text="{{ \'tb.key-val.see-examples\' | translate }}"></div>\n          </div>\n        </mat-hint>\n        <mat-error *ngIf="toEmailConfigForm.get(\'fromTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.from-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel no-padding no-border">\n      <div class="tb-form-panel-title" translate>tb.rulenode.recipients</div>\n      <tb-example-hint [hintText]="\'tb.rulenode.recipients-block-main-hint\' | translate"\n                        popupHelpLink="rulenode/to_email_node_fields_templatization">\n      </tb-example-hint>\n    </div>\n    <div class="tb-form-row no-border no-padding tb-standard-fields">\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.to-template</mat-label>\n        <textarea required\n                  matInput\n                  class="tb-enable-vertical-resize"\n                  formControlName="toTemplate"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'toTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.to-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.cc-template</mat-label>\n        <textarea matInput\n                  formControlName="ccTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n      </mat-form-field>\n      <mat-form-field class="flex">\n        <mat-label translate>tb.rulenode.bcc-template</mat-label>\n        <textarea matInput\n                  formControlName="bccTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class="tb-form-panel stroked">\n    <div class="tb-form-panel-title" translate>tb.rulenode.message-subject-and-content</div>\n    <tb-example-hint [hintText]="\'tb.rulenode.kv-map-pattern-hint\' | translate"\n                      popupHelpLink="rulenode/to_email_node_fields_templatization">\n    </tb-example-hint>\n    <section>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.subject-template</mat-label>\n        <textarea required\n                  matInput\n                  formControlName="subjectTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="1"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'subjectTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.subject-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.mail-body-type</mat-label>\n        <mat-select formControlName="mailBodyType">\n          <mat-select-trigger>\n            <span *ngIf="toEmailConfigForm.get(\'mailBodyType\').value">\n              {{ getBodyTypeName() | translate }}\n            </span>\n          </mat-select-trigger>\n          <mat-option *ngFor="let type of mailBodyTypes" [value]="type.value">\n            <span matListItemTitle>\n              {{ type.name | translate }}\n            </span>\n            <br>\n            <small matListItemMeta style="color: inherit">\n              {{ type.description | translate }}\n            </small>\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="mat-block" *ngIf="toEmailConfigForm.get(\'mailBodyType\').value === \'dynamic\'">\n        <mat-label translate>tb.rulenode.body-type-template</mat-label>\n        <input required matInput formControlName="isHtmlTemplate">\n        <mat-hint translate>tb.mail-body-type.after-template-evaluation-hint</mat-hint>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.body-template</mat-label>\n        <textarea required\n                  matInput\n                  formControlName="bodyTemplate"\n                  class="tb-enable-vertical-resize"\n                  cdkTextareaAutosize\n                  cdkAutosizeMinRows="2"></textarea>\n        <mat-error *ngIf="toEmailConfigForm.get(\'bodyTemplate\').hasError(\'required\')">\n          {{ \'tb.rulenode.body-template-required\' | translate }}\n        </mat-error>\n      </mat-form-field>\n    </section>\n  </div>\n</section>\n',styles:[":host .input-bottom-double-hint{display:inline-flex}:host .input-bottom-double-hint .see-example{flex-shrink:0;padding-right:16px}:host textarea.tb-enable-vertical-resize{resize:vertical}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class Fr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.isTypeSelected=!1,this.entityGroupTypes=vn}configForm(){return this.duplicateToGroupConfigForm}onConfigurationSet(e){this.duplicateToGroupConfigForm=this.fb.group({entityGroupIsMessageOriginator:[!!e&&e.entityGroupIsMessageOriginator,[]],entityGroupId:[e?e.entityGroupId:null,[]]})}validatorTriggers(){return["entityGroupIsMessageOriginator"]}updateValidators(e){const t=this.duplicateToGroupConfigForm.get("entityGroupIsMessageOriginator").value,n=this.duplicateToGroupConfigForm.get("entityGroupId").value;e&&t&&n&&this.duplicateToGroupConfigForm.get("entityGroupId").reset(null,{emitEvent:!1}),t?this.duplicateToGroupConfigForm.get("entityGroupId").setValidators([]):this.duplicateToGroupConfigForm.get("entityGroupId").setValidators([K.required]),this.duplicateToGroupConfigForm.get("entityGroupId").updateValueAndValidity({emitEvent:e})}}e("DuplicateToGroupConfigComponent",Fr),Fr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Fr,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Fr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Fr,selector:"tb-transformation-node-duplicate-to-group-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="duplicateToGroupConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-border no-padding"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.entity-group-is-message-originator-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="entityGroupIsMessageOriginator">\n      {{ \'tb.rulenode.entity-group-is-message-originator\' | translate }}\n    </mat-slide-toggle>\n  </div>\n    <tb-target-entity *ngIf="!duplicateToGroupConfigForm.get(\'entityGroupIsMessageOriginator\').value"\n    [isTypeSelected]="isTypeSelected" formControlName="entityGroupId"></tb-target-entity>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n',":host ::ng-deep tb-entity-group-select .tb-entity-group-select{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select{flex-direction:column;flex-wrap:wrap;gap:8px}}:host ::ng-deep tb-entity-group-select .tb-entity-group-select>*{flex:1}:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:calc(50% - 8px)}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:100%}}:host ::ng-deep tb-entity-group-select tb-entity-type-select{padding-right:0!important}\n"],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"component",type:Ao,selector:"tb-target-entity",inputs:["allowedGroupTypes","isTypeSelected"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Fr,decorators:[{type:n,args:[{selector:"tb-transformation-node-duplicate-to-group-config",template:'<section [formGroup]="duplicateToGroupConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-border no-padding"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.entity-group-is-message-originator-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="entityGroupIsMessageOriginator">\n      {{ \'tb.rulenode.entity-group-is-message-originator\' | translate }}\n    </mat-slide-toggle>\n  </div>\n    <tb-target-entity *ngIf="!duplicateToGroupConfigForm.get(\'entityGroupIsMessageOriginator\').value"\n    [isTypeSelected]="isTypeSelected" formControlName="entityGroupId"></tb-target-entity>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n',":host ::ng-deep tb-entity-group-select .tb-entity-group-select{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select{flex-direction:column;flex-wrap:wrap;gap:8px}}:host ::ng-deep tb-entity-group-select .tb-entity-group-select>*{flex:1}:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:calc(50% - 8px)}@media screen and (max-width: 599px){:host ::ng-deep tb-entity-group-select .tb-entity-group-select tb-entity-group-autocomplete{max-width:100%}}:host ::ng-deep tb-entity-group-select tb-entity-type-select{padding-right:0!important}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class kr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.entityGroupTypesList=R}configForm(){return this.duplicateToGroupByNameConfigForm}onConfigurationSet(e){this.duplicateToGroupByNameConfigForm=this.fb.group({searchEntityGroupForTenantOnly:[!!e&&e.searchEntityGroupForTenantOnly,[]],considerMessageOriginatorAsAGroupOwner:[!e||e.considerMessageOriginatorAsAGroupOwner,[]],groupType:[e?e.groupType:null,[K.required]],groupName:[e?e.groupName:null,[K.required]]}),this.duplicateToGroupByNameConfigForm.get("searchEntityGroupForTenantOnly").valueChanges.subscribe((e=>{let t=this.duplicateToGroupByNameConfigForm.get("considerMessageOriginatorAsAGroupOwner");e?(t.setValue(!1),t.disable({emitEvent:!1})):t.enable({emitEvent:!1})}))}updateValidators(e){!0===this.duplicateToGroupByNameConfigForm.get("searchEntityGroupForTenantOnly").value&&this.duplicateToGroupByNameConfigForm.get("considerMessageOriginatorAsAGroupOwner").disable({emitEvent:!1})}}e("DuplicateToGroupByNameConfigComponent",kr),kr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:kr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),kr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:kr,selector:"tb-transformation-node-duplicate-to-group-by-name-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="duplicateToGroupByNameConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-border no-padding" tb-hint-tooltip-icon="{{ \'tb.rulenode.search-entity-group-for-tenant-only-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="searchEntityGroupForTenantOnly">\n      {{ \'tb.rulenode.search-entity-group-for-tenant-only\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div class="tb-form-row no-border no-padding"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.consider-message-originator-as-a-group-owner-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="considerMessageOriginatorAsAGroupOwner">\n      {{ \'tb.rulenode.consider-message-originator-as-a-group-owner\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div class="same-width-component-row">\n    <tb-entity-type-select\n      required\n      showLabel\n      [allowedEntityTypes]="entityGroupTypesList"\n      formControlName="groupType">\n    </tb-entity-type-select>\n    <mat-form-field subscriptSizing="dynamic">\n      <mat-label translate>entity-group.entity-group-name</mat-label>\n      <input matInput formControlName="groupName" required>\n      <mat-error *ngIf="duplicateToGroupByNameConfigForm.get(\'groupName\').hasError(\'required\')">\n        {{ \'entity-group.name-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:Ge.EntityTypeSelectComponent,selector:"tb-entity-type-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","filterAllowedEntityTypes","overrideEntityTypeTranslations","showLabel","required","disabled"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:kr,decorators:[{type:n,args:[{selector:"tb-transformation-node-duplicate-to-group-by-name-config",template:'<section [formGroup]="duplicateToGroupByNameConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-row no-border no-padding" tb-hint-tooltip-icon="{{ \'tb.rulenode.search-entity-group-for-tenant-only-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="searchEntityGroupForTenantOnly">\n      {{ \'tb.rulenode.search-entity-group-for-tenant-only\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div class="tb-form-row no-border no-padding"\n       tb-hint-tooltip-icon="{{ \'tb.rulenode.consider-message-originator-as-a-group-owner-hint\' | translate }}">\n    <mat-slide-toggle class="mat-slide" formControlName="considerMessageOriginatorAsAGroupOwner">\n      {{ \'tb.rulenode.consider-message-originator-as-a-group-owner\' | translate }}\n    </mat-slide-toggle>\n  </div>\n  <div class="same-width-component-row">\n    <tb-entity-type-select\n      required\n      showLabel\n      [allowedEntityTypes]="entityGroupTypesList"\n      formControlName="groupType">\n    </tb-entity-type-select>\n    <mat-form-field subscriptSizing="dynamic">\n      <mat-label translate>entity-group.entity-group-name</mat-label>\n      <input matInput formControlName="groupName" required>\n      <mat-error *ngIf="duplicateToGroupByNameConfigForm.get(\'groupName\').hasError(\'required\')">\n        {{ \'entity-group.name-required\' | translate }}\n      </mat-error>\n      <mat-hint translate>tb.rulenode.general-pattern-hint</mat-hint>\n    </mat-form-field>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Tr extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.duplicateToRelatedConfigForm}onConfigurationSet(e){this.duplicateToRelatedConfigForm=this.fb.group({relationsQuery:[e?e.relationsQuery:null,[K.required]]})}}e("DuplicateToRelatedConfigComponent",Tr),Tr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Tr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Tr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Tr,selector:"tb-transformation-node-duplicate-to-related-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="duplicateToRelatedConfigForm" fxLayout="column">\n  <tb-relations-query-config\n    required\n    style="padding-bottom: 15px;"\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n</section>\n',dependencies:[{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Tr,decorators:[{type:n,args:[{selector:"tb-transformation-node-duplicate-to-related-config",template:'<section [formGroup]="duplicateToRelatedConfigForm" fxLayout="column">\n  <tb-relations-query-config\n    required\n    style="padding-bottom: 15px;"\n    formControlName="relationsQuery">\n  </tb-relations-query-config>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Lr extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.copyFrom=[],this.translation=Vn;for(const e of this.translation.keys())this.copyFrom.push({value:e,name:this.translate.instant(this.translation.get(e))})}onConfigurationSet(e){this.copyKeysConfigForm=this.fb.group({copyFrom:[e.copyFrom,[K.required]],keys:[e?e.keys:null,[K.required]]})}configForm(){return this.copyKeysConfigForm}prepareInputConfig(e){let t;return t=Ce(e?.fromMetadata)?e.copyFrom?Dn.METADATA:Dn.DATA:Ce(e?.copyFrom)?e.copyFrom:Dn.DATA,{keys:Ce(e?.keys)?e.keys:null,copyFrom:t}}}e("CopyKeysConfigComponent",Lr),Lr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Lr,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Lr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Lr,selector:"tb-transformation-node-copy-keys-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="copyKeysConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-msg-metadata-chip\n    [labelText]="(\'tb.key-val.copy-key-values-from\' | translate)"\n    [translation]="translation"\n    formControlName="copyFrom">\n  </tb-msg-metadata-chip>\n  <tb-string-items-list class="mat-block"\n                        required\n                        [label]="\'tb.rulenode.keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-key\' | translate"\n                        [requiredText]="\'tb.key-val.at-least-one-key-error\' | translate"\n                        formControlName="keys">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.use-regular-expression-hint\' | translate }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Lr,decorators:[{type:n,args:[{selector:"tb-transformation-node-copy-keys-config",template:'<section [formGroup]="copyKeysConfigForm" class="tb-form-panel no-padding no-border">\n  <tb-msg-metadata-chip\n    [labelText]="(\'tb.key-val.copy-key-values-from\' | translate)"\n    [translation]="translation"\n    formControlName="copyFrom">\n  </tb-msg-metadata-chip>\n  <tb-string-items-list class="mat-block"\n                        required\n                        [label]="\'tb.rulenode.keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-key\' | translate"\n                        [requiredText]="\'tb.key-val.at-least-one-key-error\' | translate"\n                        formControlName="keys">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.use-regular-expression-hint\' | translate }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Ir extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.renameIn=[],this.translation=Rn;for(const e of this.translation.keys())this.renameIn.push({value:e,name:this.translate.instant(this.translation.get(e))})}configForm(){return this.renameKeysConfigForm}onConfigurationSet(e){this.renameKeysConfigForm=this.fb.group({renameIn:[e?e.renameIn:null,[K.required]],renameKeysMapping:[e?e.renameKeysMapping:null,[K.required]]})}prepareInputConfig(e){let t;return t=Ce(e?.fromMetadata)?e.fromMetadata?Dn.METADATA:Dn.DATA:Ce(e?.renameIn)?e?.renameIn:Dn.DATA,{renameKeysMapping:Ce(e?.renameKeysMapping)?e.renameKeysMapping:null,renameIn:t}}}e("RenameKeysConfigComponent",Ir),Ir.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ir,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Ir.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ir,selector:"tb-transformation-node-rename-keys-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="renameKeysConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.rename-keys-in</div>\n  <div class="fx-centered">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="renameIn" appearance="fill">\n        <tb-toggle-option *ngFor="let data of renameIn" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    labelText="{{ translation.get(renameKeysConfigForm.get(\'renameIn\').value) | translate }} {{\'tb.rulenode.keys-mapping\' | translate}}"\n    formControlName="renameKeysMapping"\n    uniqueKeyValuePairValidator\n    requiredText="{{\'tb.rulenode.attr-mapping-required\' | translate}}"\n    keyText="{{\'tb.rulenode.current-key-name\' | translate}}"\n    keyRequiredText="{{\'tb.rulenode.key-name-required\' | translate}}"\n    valText="{{\'tb.rulenode.new-key-name\' | translate}}"\n    valRequiredText="{{\'tb.rulenode.new-key-name-required\' | translate}}">\n  </tb-kv-map-config>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}:host .fx-centered{display:flex;width:100%;justify-content:space-around}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:bo,selector:"tb-kv-map-config",inputs:["disabled","uniqueKeyValuePairValidator","labelText","requiredText","keyText","keyRequiredText","valText","valRequiredText","hintText","popupHelpLink","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ir,decorators:[{type:n,args:[{selector:"tb-transformation-node-rename-keys-config",template:'<section [formGroup]="renameKeysConfigForm" class="tb-form-panel stroked">\n  <div class="tb-form-panel-title" translate>tb.rulenode.rename-keys-in</div>\n  <div class="fx-centered">\n    <div class="fetch-to-data-toggle">\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="renameIn" appearance="fill">\n        <tb-toggle-option *ngFor="let data of renameIn" [value]="data.value">\n          {{ data.name }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n    </div>\n  </div>\n  <tb-kv-map-config\n    required\n    labelText="{{ translation.get(renameKeysConfigForm.get(\'renameIn\').value) | translate }} {{\'tb.rulenode.keys-mapping\' | translate}}"\n    formControlName="renameKeysMapping"\n    uniqueKeyValuePairValidator\n    requiredText="{{\'tb.rulenode.attr-mapping-required\' | translate}}"\n    keyText="{{\'tb.rulenode.current-key-name\' | translate}}"\n    keyRequiredText="{{\'tb.rulenode.key-name-required\' | translate}}"\n    valText="{{\'tb.rulenode.new-key-name\' | translate}}"\n    valRequiredText="{{\'tb.rulenode.new-key-name-required\' | translate}}">\n  </tb-kv-map-config>\n</section>\n',styles:[":host .fetch-to-data-toggle{max-width:420px;width:100%}:host .fx-centered{display:flex;width:100%;justify-content:space-around}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Nr extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.jsonPathConfigForm}onConfigurationSet(e){this.jsonPathConfigForm=this.fb.group({jsonPath:[e?e.jsonPath:null,[K.required]]})}}e("NodeJsonPathConfigComponent",Nr),Nr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Nr,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Nr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Nr,selector:"tb-transformation-node-json-path-config",usesInheritance:!0,ngImport:t,template:"<section [formGroup]=\"jsonPathConfigForm\">\n  <mat-form-field subscriptSizing=\"dynamic\" class=\"mat-block\">\n    <mat-label>{{ 'tb.rulenode.json-path-expression' | translate }}</mat-label>\n    <input matInput formControlName=\"jsonPath\" required/>\n    <mat-hint>{{ 'tb.rulenode.json-path-expression-hint' | translate }}</mat-hint>\n    <mat-error *ngIf=\"jsonPathConfigForm.get('jsonPath').hasError('required')\">{{ 'tb.rulenode.json-path-expression-required' | translate }}</mat-error>\n  </mat-form-field>\n</section>\n",dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatHint,selector:"mat-hint",inputs:["align","id"]},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Nr,decorators:[{type:n,args:[{selector:"tb-transformation-node-json-path-config",template:"<section [formGroup]=\"jsonPathConfigForm\">\n  <mat-form-field subscriptSizing=\"dynamic\" class=\"mat-block\">\n    <mat-label>{{ 'tb.rulenode.json-path-expression' | translate }}</mat-label>\n    <input matInput formControlName=\"jsonPath\" required/>\n    <mat-hint>{{ 'tb.rulenode.json-path-expression-hint' | translate }}</mat-hint>\n    <mat-error *ngIf=\"jsonPathConfigForm.get('jsonPath').hasError('required')\">{{ 'tb.rulenode.json-path-expression-required' | translate }}</mat-error>\n  </mat-form-field>\n</section>\n"}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class Sr extends g{constructor(e,t,n){super(e),this.store=e,this.fb=t,this.translate=n,this.deleteFrom=[],this.translation=Pn;for(const e of this.translation.keys())this.deleteFrom.push({value:e,name:this.translate.instant(this.translation.get(e))})}onConfigurationSet(e){this.deleteKeysConfigForm=this.fb.group({deleteFrom:[e.deleteFrom,[K.required]],keys:[e?e.keys:null,[K.required]]})}prepareInputConfig(e){let t;return t=Ce(e?.fromMetadata)?e.fromMetadata?Dn.METADATA:Dn.DATA:Ce(e?.deleteFrom)?e?.deleteFrom:Dn.DATA,{keys:Ce(e?.keys)?e.keys:null,deleteFrom:t}}configForm(){return this.deleteKeysConfigForm}}e("DeleteKeysConfigComponent",Sr),Sr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Sr,deps:[{token:_.Store},{token:H.FormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Sr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Sr,selector:"tb-transformation-node-delete-keys-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deleteKeysConfigForm" class="tb-form-panel no-border no-padding">\n  <tb-msg-metadata-chip\n    [labelText]="(\'tb.key-val.delete-key-values-from\' | translate)"\n    formControlName="deleteFrom">\n  </tb-msg-metadata-chip>\n  <tb-string-items-list class="mat-block"\n                        required\n                        [label]="\'tb.rulenode.keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-key\' | translate"\n                        [requiredText]="\'tb.key-val.at-least-one-key-error\' | translate"\n                        formControlName="keys">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.use-regular-expression-delete-hint\' | translate }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"component",type:dt.StringItemsListComponent,selector:"tb-string-items-list",inputs:["required","disabled","label","placeholder","hint","requiredText","floatLabel","appearance","editable","subscriptSizing","predefinedValues"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:To,selector:"tb-msg-metadata-chip",inputs:["labelText","translation"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Sr,decorators:[{type:n,args:[{selector:"tb-transformation-node-delete-keys-config",template:'<section [formGroup]="deleteKeysConfigForm" class="tb-form-panel no-border no-padding">\n  <tb-msg-metadata-chip\n    [labelText]="(\'tb.key-val.delete-key-values-from\' | translate)"\n    formControlName="deleteFrom">\n  </tb-msg-metadata-chip>\n  <tb-string-items-list class="mat-block"\n                        required\n                        [label]="\'tb.rulenode.keys\' | translate"\n                        [placeholder]="\'tb.rulenode.add-key\' | translate"\n                        [requiredText]="\'tb.key-val.at-least-one-key-error\' | translate"\n                        formControlName="keys">\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.use-regular-expression-delete-hint\' | translate }}">\n      help\n    </mat-icon>\n  </tb-string-items-list>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder},{type:re.TranslateService}]}});class Ar extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.deduplicationStrategie=en,this.deduplicationStrategies=Object.keys(this.deduplicationStrategie),this.deduplicationStrategiesTranslations=tn}configForm(){return this.deduplicationConfigForm}onConfigurationSet(e){this.deduplicationConfigForm=this.fb.group({interval:[Ce(e?.interval)?e.interval:null,[K.required,K.min(1)]],strategy:[Ce(e?.strategy)?e.strategy:null,[K.required]],outMsgType:[Ce(e?.outMsgType)?e.outMsgType:null,[K.required]],maxPendingMsgs:[Ce(e?.maxPendingMsgs)?e.maxPendingMsgs:null,[K.required,K.min(1),K.max(1e3)]],maxRetries:[Ce(e?.maxRetries)?e.maxRetries:null,[K.required,K.min(0),K.max(100)]]})}prepareInputConfig(e){return e||(e={}),e.outMsgType||(e.outMsgType="POST_TELEMETRY_REQUEST"),super.prepareInputConfig(e)}updateValidators(e){this.deduplicationConfigForm.get("strategy").value===this.deduplicationStrategie.ALL?this.deduplicationConfigForm.get("outMsgType").enable({emitEvent:!1}):this.deduplicationConfigForm.get("outMsgType").disable({emitEvent:!1}),this.deduplicationConfigForm.get("outMsgType").updateValueAndValidity({emitEvent:e})}validatorTriggers(){return["strategy"]}}e("DeduplicationConfigComponent",Ar),Ar.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ar,deps:[{token:_.Store},{token:H.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),Ar.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ar,selector:"tb-action-node-msg-deduplication-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="deduplicationConfigForm">\n  <mat-form-field class="mat-block">\n    <mat-label>{{\'tb.rulenode.interval\' | translate}}</mat-label>\n    <input type=\'number\' required matInput formControlName="interval">\n    <mat-error *ngIf="deduplicationConfigForm.get(\'interval\').hasError(\'required\')">\n      {{\'tb.rulenode.interval-required\' | translate}}\n    </mat-error>\n    <mat-error *ngIf="deduplicationConfigForm.get(\'interval\').hasError(\'min\')">\n      {{\'tb.rulenode.interval-min-error\' | translate}}\n    </mat-error>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.interval-hint\' | translate }}">help</mat-icon>\n  </mat-form-field>\n  <div class="tb-form-panel no-padding no-border">\n    <div class="tb-form-panel stroked">\n      <div class="tb-form-panel-title  tb-required" translate>tb.rulenode.strategy</div>\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="strategy" appearance="fill">\n        <tb-toggle-option *ngFor="let strategy of deduplicationStrategies" [value]="strategy">\n          {{ deduplicationStrategiesTranslations.get(strategy) | translate }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-all-hint\' | translate"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'ALL\'">\n      </tb-example-hint>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-first-hint\' | translate"\n                        textAlign="\'center\'"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'FIRST\'">\n      </tb-example-hint>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-last-hint\' | translate"\n                        textAlign="\'center\'"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'LAST\'">\n      </tb-example-hint>\n      <div *ngIf="deduplicationConfigForm.get(\'strategy\').value === deduplicationStrategie.ALL">\n        <tb-output-message-type-autocomplete\n          required\n          formControlName="outMsgType">\n        </tb-output-message-type-autocomplete>\n      </div>\n    </div>\n    <section class="tb-form-panel stroked">\n      <mat-expansion-panel class="tb-settings">\n        <mat-expansion-panel-header>\n          <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class="tb-form-row no-border no-padding tb-standard-fields">\n          <mat-form-field class="flex">\n            <mat-label>{{\'tb.rulenode.max-pending-msgs\' | translate}}</mat-label>\n            <input type = \'number\' required matInput formControlName="maxPendingMsgs">\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'required\')">\n              {{\'tb.rulenode.max-pending-msgs-required\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'max\')">\n              {{\'tb.rulenode.max-pending-msgs-max-error\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'min\')">\n              {{\'tb.rulenode.max-pending-msgs-min-error\' | translate}}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.max-pending-msgs-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n          <mat-form-field class="flex">\n            <mat-label>{{\'tb.rulenode.max-retries\' | translate}}</mat-label>\n            <input type = \'number\' required matInput formControlName="maxRetries">\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'required\')">\n              {{\'tb.rulenode.max-retries-required\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'max\')">\n              {{\'tb.rulenode.max-retries-max-error\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'min\')">\n              {{\'tb.rulenode.max-retries-min-error\' | translate}}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.max-retries-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n        </div>\n      </mat-expansion-panel>\n    </section>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n'],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"directive",type:te.MatSuffix,selector:"[matSuffix], [matIconSuffix], [matTextSuffix]",inputs:["matTextSuffix"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"directive",type:je.ToggleOption,selector:"tb-toggle-option",inputs:["value"]},{kind:"component",type:Qe.ToggleSelectComponent,selector:"tb-toggle-select",inputs:["disabled","selectMediaBreakpoint","appearance","disablePagination"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"component",type:Gt,selector:"tb-example-hint",inputs:["hintText","popupHelpLink","textAlign"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ar,decorators:[{type:n,args:[{selector:"tb-action-node-msg-deduplication-config",template:'<section [formGroup]="deduplicationConfigForm">\n  <mat-form-field class="mat-block">\n    <mat-label>{{\'tb.rulenode.interval\' | translate}}</mat-label>\n    <input type=\'number\' required matInput formControlName="interval">\n    <mat-error *ngIf="deduplicationConfigForm.get(\'interval\').hasError(\'required\')">\n      {{\'tb.rulenode.interval-required\' | translate}}\n    </mat-error>\n    <mat-error *ngIf="deduplicationConfigForm.get(\'interval\').hasError(\'min\')">\n      {{\'tb.rulenode.interval-min-error\' | translate}}\n    </mat-error>\n    <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n              color="primary"\n              matTooltip="{{ \'tb.rulenode.interval-hint\' | translate }}">help</mat-icon>\n  </mat-form-field>\n  <div class="tb-form-panel no-padding no-border">\n    <div class="tb-form-panel stroked">\n      <div class="tb-form-panel-title  tb-required" translate>tb.rulenode.strategy</div>\n      <tb-toggle-select class="fetch-to-data-toggle" formControlName="strategy" appearance="fill">\n        <tb-toggle-option *ngFor="let strategy of deduplicationStrategies" [value]="strategy">\n          {{ deduplicationStrategiesTranslations.get(strategy) | translate }}\n        </tb-toggle-option>\n      </tb-toggle-select>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-all-hint\' | translate"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'ALL\'">\n      </tb-example-hint>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-first-hint\' | translate"\n                        textAlign="\'center\'"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'FIRST\'">\n      </tb-example-hint>\n      <tb-example-hint [hintText]="\'tb.rulenode.strategy-last-hint\' | translate"\n                        textAlign="\'center\'"\n                       *ngIf="deduplicationConfigForm.get(\'strategy\').value === \'LAST\'">\n      </tb-example-hint>\n      <div *ngIf="deduplicationConfigForm.get(\'strategy\').value === deduplicationStrategie.ALL">\n        <tb-output-message-type-autocomplete\n          required\n          formControlName="outMsgType">\n        </tb-output-message-type-autocomplete>\n      </div>\n    </div>\n    <section class="tb-form-panel stroked">\n      <mat-expansion-panel class="tb-settings">\n        <mat-expansion-panel-header>\n          <mat-panel-title translate>tb.rulenode.advanced-settings</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class="tb-form-row no-border no-padding tb-standard-fields">\n          <mat-form-field class="flex">\n            <mat-label>{{\'tb.rulenode.max-pending-msgs\' | translate}}</mat-label>\n            <input type = \'number\' required matInput formControlName="maxPendingMsgs">\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'required\')">\n              {{\'tb.rulenode.max-pending-msgs-required\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'max\')">\n              {{\'tb.rulenode.max-pending-msgs-max-error\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxPendingMsgs\').hasError(\'min\')">\n              {{\'tb.rulenode.max-pending-msgs-min-error\' | translate}}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.max-pending-msgs-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n          <mat-form-field class="flex">\n            <mat-label>{{\'tb.rulenode.max-retries\' | translate}}</mat-label>\n            <input type = \'number\' required matInput formControlName="maxRetries">\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'required\')">\n              {{\'tb.rulenode.max-retries-required\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'max\')">\n              {{\'tb.rulenode.max-retries-max-error\' | translate}}\n            </mat-error>\n            <mat-error *ngIf="deduplicationConfigForm.get(\'maxRetries\').hasError(\'min\')">\n              {{\'tb.rulenode.max-retries-min-error\' | translate}}\n            </mat-error>\n            <mat-icon matSuffix class="help-icon margin-8 cursor-pointer" aria-hidden="false" aria-label="help-icon"\n                      color="primary"\n                      matTooltip="{{ \'tb.rulenode.max-retries-hint\' | translate }}">help</mat-icon>\n          </mat-form-field>\n        </div>\n      </mat-expansion-panel>\n    </section>\n  </div>\n</section>\n',styles:[':host .margin-8{margin:8px}:host .tb-error{letter-spacing:.25px;color:var(--mdc-theme-error, #f44336)}:host .tb-required:after{content:"*";font-size:16px;color:#000000de}:host .help-icon{color:#000;opacity:.38;padding:unset}:host .help-icon:hover{color:var(--tb-primary-500);opacity:unset}:host .same-width-component-row{display:flex;flex-direction:row;flex-wrap:nowrap;gap:16px}@media screen and (max-width: 599px){:host .same-width-component-row{flex-direction:column;flex-wrap:wrap;gap:8px}}:host .same-width-component-row>*{flex:1}:host .same-width-component-row .flex-2{flex:2}:host .same-width-component-row .third-width{max-width:32%}@media screen and (max-width: 599px){:host .same-width-component-row .third-width{max-width:100%}}\n']}]}],ctorParameters:function(){return[{type:_.Store},{type:H.FormBuilder}]}});class qr{}e("RulenodeCoreConfigTransformModule",qr),qr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),qr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:qr,declarations:[gr,fr,Cr,Fr,Tr,kr,Lr,Ir,Nr,Sr,Ar],imports:[X,M,qo],exports:[gr,fr,Cr,Fr,Tr,kr,Lr,Ir,Nr,Sr,Ar]}),qr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qr,imports:[X,M,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:qr,decorators:[{type:d,args:[{declarations:[gr,fr,Cr,Fr,Tr,kr,Lr,Ir,Nr,Sr,Ar],imports:[X,M,qo],exports:[gr,fr,Cr,Fr,Tr,kr,Lr,Ir,Nr,Sr,Ar]}]}]});const wr=[K.required,K.min(1),K.max(2147483647)];class Mr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.aggPeriodTimeUnits=[$t.MINUTES,$t.HOURS,$t.DAYS],this.timeUnitsTranslationMap=Yt,this.mathFunctions=Object.keys(bn),this.mathFunctionsTranslationMap=hn,this.aggIntervalType=Cn,this.aggIntervalTypes=Object.keys(Cn),this.aggIntervalTypesTranslationMap=Fn,this.intervalPersistPolicies=Object.keys(kn),this.intervalPersistPolicyTranslationMap=Tn,this.statePersistPolicies=Object.keys(Ln),this.statePersistPolicyTranslationMap=In,this.StatePersistPolicy=Ln}configForm(){return this.aggregateIncomingConfigForm}onConfigurationSet(e){this.aggregateIncomingConfigForm=this.fb.group({inputValueKey:[e?e.inputValueKey:null,[K.required]],outputValueKey:[e?e.outputValueKey:null,[K.required]],mathFunction:[{value:e?e.mathFunction:null,disabled:this.ruleNodeId},[K.required]],aggIntervalType:[{value:e&&e.aggIntervalType?e.aggIntervalType:Cn.CUSTOM,disabled:this.ruleNodeId},[K.required]],timeZoneId:[{value:e?e.timeZoneId:null,disabled:this.ruleNodeId},[]],aggIntervalValue:[e?e.aggIntervalValue:null,[]],aggIntervalTimeUnit:[e?e.aggIntervalValue:null,[]],intervalPersistencePolicy:[e?e.intervalPersistencePolicy:null,[K.required]],outMsgType:[e?e.outMsgType:null,[K.required]],intervalCheckValue:[e?e.intervalCheckValue:null,wr],intervalCheckTimeUnit:[e?e.intervalCheckTimeUnit:null,[K.required]],statePersistencePolicy:[e?e.statePersistencePolicy:null,[K.required]],statePersistenceValue:[e?e.statePersistenceValue:null,wr],statePersistenceTimeUnit:[e?e.statePersistenceTimeUnit:null,[K.required]],autoCreateIntervals:[!!e&&e.autoCreateIntervals,[]],periodValue:[e?e.periodValue:null,[]],periodTimeUnit:[e?e.periodTimeUnit:null,[]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[K.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]]})})}validatorTriggers(){return["aggIntervalType","parentEntitiesQuery.type","autoCreateIntervals"]}updateValidators(e,t){const n=this.aggregateIncomingConfigForm.get("parentEntitiesQuery"),o=n.get("type").value;if(e&&"parentEntitiesQuery.type"===t){const e={type:o};"relationsQuery"===o?(e.rootEntityId=null,e.relationsQuery=Ie(An)):"single"===o?e.entityId=null:"group"===o&&(e.entityGroupId=null),n.reset(e,{emitEvent:!1})}this.aggregateIncomingConfigForm.get("aggIntervalType").value===Cn.CUSTOM?(this.aggregateIncomingConfigForm.get("timeZoneId").setValidators([]),this.aggregateIncomingConfigForm.get("aggIntervalValue").setValidators(wr),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").setValidators([K.required])):(this.aggregateIncomingConfigForm.get("timeZoneId").setValidators([K.required]),this.aggregateIncomingConfigForm.get("aggIntervalValue").setValidators([]),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").setValidators([])),this.aggregateIncomingConfigForm.get("timeZoneId").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("aggIntervalValue").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("aggIntervalTimeUnit").updateValueAndValidity({emitEvent:e});const r=this.aggregateIncomingConfigForm.get("autoCreateIntervals").value;n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),r?(this.aggregateIncomingConfigForm.get("periodValue").setValidators(wr),this.aggregateIncomingConfigForm.get("periodTimeUnit").setValidators([K.required]),"relationsQuery"===o?(n.get("rootEntityId").setValidators([K.required]),n.get("relationsQuery").setValidators([K.required])):"single"===o?n.get("entityId").setValidators([K.required]):"group"===o&&n.get("entityGroupId").setValidators([K.required])):(this.aggregateIncomingConfigForm.get("periodValue").setValidators([]),this.aggregateIncomingConfigForm.get("periodTimeUnit").setValidators([])),this.aggregateIncomingConfigForm.get("periodValue").updateValueAndValidity({emitEvent:e}),this.aggregateIncomingConfigForm.get("periodTimeUnit").updateValueAndValidity({emitEvent:e}),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(){const e=this.configForm().getRawValue();return e.parentEntitiesQuery=qn(e.parentEntitiesQuery),e}}e("AggregateIncomingConfigComponent",Mr),Mr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Mr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Mr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Mr,selector:"tb-analytics-node-aggregate-incoming-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="aggregateIncomingConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.input-value-key</mat-label>\n      <input required matInput formControlName="inputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'inputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.input-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.output-value-key</mat-label>\n      <input required matInput formControlName="outputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'outputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.output-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-accordion multi>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.aggregation</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.math-function</mat-label>\n        <mat-select formControlName="mathFunction" required>\n          <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n            {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.aggregate-interval-type</mat-label>\n        <mat-select formControlName="aggIntervalType" required>\n          <mat-option *ngFor="let type of aggIntervalTypes" [value]="type">\n            {{ aggIntervalTypesTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-timezone-select\n        *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value !== aggIntervalType.CUSTOM"\n        required\n        userTimezoneByDefault\n        formControlName="timeZoneId">\n      </tb-timezone-select>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px"\n           *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value === aggIntervalType.CUSTOM">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.agg-interval-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="aggIntervalValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.agg-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.agg-interval-time-unit</mat-label>\n          <mat-select formControlName="aggIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.interval-persistence</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.interval-persistence-policy</mat-label>\n        <mat-select formControlName="intervalPersistencePolicy" required>\n          <mat-option *ngFor="let policy of intervalPersistPolicies" [value]="policy">\n            {{ intervalPersistPolicyTranslationMap.get(policy) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.interval-check-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="intervalCheckValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.interval-check-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.interval-check-time-unit</mat-label>\n          <mat-select formControlName="intervalCheckTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.state-persistence</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.state-persistence-policy</mat-label>\n        <mat-select formControlName="statePersistencePolicy" required>\n          <mat-option *ngFor="let policy of statePersistPolicies" [value]="policy">\n            {{ statePersistPolicyTranslationMap.get(policy) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px"\n           *ngIf="aggregateIncomingConfigForm.get(\'statePersistencePolicy\').value === StatePersistPolicy.PERIODICALLY">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.state-persistence-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="statePersistenceValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.state-persistence-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.state-persistence-time-unit</mat-label>\n          <mat-select formControlName="statePersistenceTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n  </mat-accordion>\n  <mat-checkbox fxFlex formControlName="autoCreateIntervals" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.auto-create-intervals\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel *ngIf="aggregateIncomingConfigForm.get(\'autoCreateIntervals\').value"\n    [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.interval-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n        <mat-select formControlName="periodTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div formGroupName="parentEntitiesQuery" fxLayout="column">\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n      </div>\n    </mat-expansion-panel>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 0 16px}:host .mat-accordion{margin:0 0 16px}:host .mat-accordion .mat-expansion-panel{margin:0}:host .mat-accordion .mat-expansion-panel.mat-expanded{margin:0 0 16px}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:vt.TimezoneSelectComponent,selector:"tb-timezone-select",inputs:["appearance","defaultTimezone","required","userTimezoneByDefault","localBrowserTimezonePlaceholderOnEmpty","disabled"]},{kind:"component",type:He.EntitySelectComponent,selector:"tb-entity-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","required","disabled"]},{kind:"component",type:ze.EntityGroupSelectComponent,selector:"tb-entity-group-select",inputs:["allowedGroupTypes","excludeGroupTypes","defaultGroupType","excludeGroupIds","excludeGroupAll","placeholderText","notFoundText","requiredText","ownerId","originator","required","disabled"],outputs:["currentGroupType","currentGroupInfo"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:ft.MatRadioGroup,selector:"mat-radio-group",exportAs:["matRadioGroup"]},{kind:"component",type:ft.MatRadioButton,selector:"mat-radio-button",inputs:["disableRipple","tabIndex"],exportAs:["matRadioButton"]},{kind:"directive",type:pe.MatAccordion,selector:"mat-accordion",inputs:["multi","hideToggle","displayMode","togglePosition"],exportAs:["matAccordion"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Mr,decorators:[{type:n,args:[{selector:"tb-analytics-node-aggregate-incoming-config",template:'<section [formGroup]="aggregateIncomingConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.input-value-key</mat-label>\n      <input required matInput formControlName="inputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'inputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.input-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.output-value-key</mat-label>\n      <input required matInput formControlName="outputValueKey">\n      <mat-error *ngIf="aggregateIncomingConfigForm.get(\'outputValueKey\').hasError(\'required\')">\n        {{ \'tb.rulenode.output-value-key-required\' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <mat-accordion multi>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.aggregation</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.math-function</mat-label>\n        <mat-select formControlName="mathFunction" required>\n          <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n            {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.aggregate-interval-type</mat-label>\n        <mat-select formControlName="aggIntervalType" required>\n          <mat-option *ngFor="let type of aggIntervalTypes" [value]="type">\n            {{ aggIntervalTypesTranslationMap.get(type) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <tb-timezone-select\n        *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value !== aggIntervalType.CUSTOM"\n        required\n        userTimezoneByDefault\n        formControlName="timeZoneId">\n      </tb-timezone-select>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px"\n           *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalType\').value === aggIntervalType.CUSTOM">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.agg-interval-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="aggIntervalValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.agg-interval-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'aggIntervalValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.agg-interval-time-unit</mat-label>\n          <mat-select formControlName="aggIntervalTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.interval-persistence</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.interval-persistence-policy</mat-label>\n        <mat-select formControlName="intervalPersistencePolicy" required>\n          <mat-option *ngFor="let policy of intervalPersistPolicies" [value]="policy">\n            {{ intervalPersistPolicyTranslationMap.get(policy) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.interval-check-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="intervalCheckValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.interval-check-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'intervalCheckValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.interval-check-time-unit</mat-label>\n          <mat-select formControlName="intervalCheckTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.state-persistence</mat-panel-title>\n      </mat-expansion-panel-header>\n      <mat-form-field class="mat-block">\n        <mat-label translate>tb.rulenode.state-persistence-policy</mat-label>\n        <mat-select formControlName="statePersistencePolicy" required>\n          <mat-option *ngFor="let policy of statePersistPolicies" [value]="policy">\n            {{ statePersistPolicyTranslationMap.get(policy) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px"\n           *ngIf="aggregateIncomingConfigForm.get(\'statePersistencePolicy\').value === StatePersistPolicy.PERIODICALLY">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.state-persistence-value</mat-label>\n          <input type="number" step="1" min="1" max="2147483647" matInput formControlName="statePersistenceValue" required>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.state-persistence-value-required\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'min\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n          <mat-error *ngIf="aggregateIncomingConfigForm.get(\'statePersistenceValue\').hasError(\'max\')">\n            {{ \'tb.rulenode.time-value-range\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.state-persistence-time-unit</mat-label>\n          <mat-select formControlName="statePersistenceTimeUnit" required>\n            <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n              {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-expansion-panel>\n  </mat-accordion>\n  <mat-checkbox fxFlex formControlName="autoCreateIntervals" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.auto-create-intervals\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel *ngIf="aggregateIncomingConfigForm.get(\'autoCreateIntervals\').value"\n    [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.interval-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n        <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'required\')">\n          {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'min\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n        <mat-error *ngIf="aggregateIncomingConfigForm.get(\'periodValue\').hasError(\'max\')">\n          {{ \'tb.rulenode.time-value-range\' | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex class="mat-block">\n        <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n        <mat-select formControlName="periodTimeUnit" required>\n          <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n            {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div formGroupName="parentEntitiesQuery" fxLayout="column">\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateIncomingConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n      </div>\n    </mat-expansion-panel>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 0 16px}:host .mat-accordion{margin:0 0 16px}:host .mat-accordion .mat-expansion-panel{margin:0}:host .mat-accordion .mat-expansion-panel.mat-expanded{margin:0 0 16px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Er extends O{constructor(e,t,n,o,r,a){super(e,t,o),this.store=e,this.router=t,this.data=n,this.dialogRef=o,this.fb=r,this.translate=a,this.latestTelemetry=U,this.attributeScope=f,this.attributeScopes=Object.keys(f),this.telemetryTypeTranslationMap=y,this.mathFunctions=Object.keys(bn),this.mathFunctionsTranslationMap=hn,this.separatorKeysCodes=[Ae,qe,we],this.tbelEnabled=he(this.store).tbelEnabled,this.scriptLanguage=x,this.isAdd=n.isAdd,this.mapping=n.mapping,this.tbelFilterFunctionOnly=n.tbelFilterFunctionOnly,this.isAdd&&!this.mapping&&(this.mapping={source:"",sourceScope:U.LATEST_TELEMETRY,defaultValue:0,target:"",aggFunction:bn.AVG}),this.filterEntities=!!this.mapping.filter}ngOnInit(){let e=this.mapping.filter?.scriptLang;e||(e=this.mapping.filter?.filterFunction&&!this.mapping.filter?.tbelFilterFunction?x.JS:x.TBEL),this.tbelEnabled||e!==x.TBEL||this.tbelFilterFunctionOnly?this.tbelEnabled&&this.tbelFilterFunctionOnly&&e!==x.TBEL&&(e=x.TBEL,this.mapping.filter&&!this.mapping.filter.tbelFilterFunction&&(this.mapping.filter.tbelFilterFunction="return true;")):(e=x.JS,this.mapping.filter&&!this.mapping.filter.filterFunction&&(this.mapping.filter.filterFunction="return true;")),this.aggLatestMappingFormGroup=this.fb.group({sourceScope:[this.mapping.sourceScope,[]],source:[this.mapping.source,[]],defaultValue:[this.mapping.defaultValue,[K.required]],aggFunction:[this.mapping.aggFunction,[]],target:[this.mapping.target,[K.required]],filter:this.fb.group({clientAttributeNames:[this.mapping.filter?this.mapping.filter.clientAttributeNames:[],[]],sharedAttributeNames:[this.mapping.filter?this.mapping.filter.sharedAttributeNames:[],[]],serverAttributeNames:[this.mapping.filter?this.mapping.filter.serverAttributeNames:[],[]],latestTsKeyNames:[this.mapping.filter?this.mapping.filter.latestTsKeyNames:[],[]],scriptLang:[e,[]],filterFunction:[this.mapping.filter?this.mapping.filter.filterFunction:null,[]],tbelFilterFunction:[this.mapping.filter?this.mapping.filter.tbelFilterFunction:null,[]]})}),this.filterEntities||this.aggLatestMappingFormGroup.get("filter").disable({emitEvent:!1})}filterEntitiesChange(){this.filterEntities?(this.aggLatestMappingFormGroup.get("filter").setValue({clientAttributeNames:[],sharedAttributeNames:[],serverAttributeNames:[],latestTsKeyNames:[],scriptLang:this.tbelEnabled||this.tbelFilterFunctionOnly?x.TBEL:x.JS,filterFunction:"return true;",tbelFilterFunction:"return true;"},{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").enable({emitEvent:!0})):this.aggLatestMappingFormGroup.get("filter").disable({emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").markAsDirty()}removeKey(e,t){const n=this.aggLatestMappingFormGroup.get("filter").get(t).value,o=n.indexOf(e);o>=0&&(n.splice(o,1),this.aggLatestMappingFormGroup.get("filter").get(t).setValue(n,{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").get(t).markAsDirty())}addKey(e,t){const n=e.input;let o=e.value;if((o||"").trim()){o=o.trim();let e=this.aggLatestMappingFormGroup.get("filter").get(t).value;e&&-1!==e.indexOf(o)||(e||(e=[]),e.push(o),this.aggLatestMappingFormGroup.get("filter").get(t).setValue(e,{emitEvent:!0}),this.aggLatestMappingFormGroup.get("filter").get(t).markAsDirty())}n&&(n.value="")}cancel(){this.dialogRef.close()}save(){this.mapping=this.aggLatestMappingFormGroup.value,this.dialogRef.close(this.mapping)}}Er.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Er,deps:[{token:_.Store},{token:kt.Router},{token:Ct},{token:Ft.MatDialogRef},{token:H.UntypedFormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Er.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Er,selector:"tb-agg-latest-mapping-dialog",usesInheritance:!0,ngImport:t,template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="aggLatestMappingFormGroup" (ngSubmit)="save()" style="width: 700px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <tb-checkbox\n        [trueValue]="latestTelemetry.LATEST_TELEMETRY"\n        [falseValue]="attributeScope.SERVER_SCOPE"\n        formControlName="sourceScope" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.latest-telemetry\' | translate }}\n      </tb-checkbox>\n      <div fxLayout="row" fxLayout.xs="column" fxLayoutGap="8px">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{(aggLatestMappingFormGroup.get(\'sourceScope\').value ===\n                   latestTelemetry.LATEST_TELEMETRY ? \'tb.rulenode.source-telemetry\'\n                            : \'tb.rulenode.source-attribute\') | translate}}</mat-label>\n          <input matInput formControlName="source">\n        </mat-form-field>\n        <mat-form-field class="mat-block"\n                        *ngIf="aggLatestMappingFormGroup.get(\'sourceScope\').value !== latestTelemetry.LATEST_TELEMETRY"\n                        fxFlex.xs\n                        style.gt-xs="max-width: 200px;">\n          <mat-label translate>tb.rulenode.attribute-scope</mat-label>\n          <mat-select formControlName="sourceScope">\n            <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n              {{ telemetryTypeTranslationMap.get(scope) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.default-value</mat-label>\n          <input required type="number" matInput formControlName="defaultValue">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'defaultValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.default-value-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxLayout="row" fxLayout.xs="column" fxLayoutGap="8px">\n        <mat-form-field class="mat-block" fxFlex.xs style.gt-xs="max-width: 200px;">\n          <mat-label translate>tb.rulenode.math-function</mat-label>\n          <mat-select formControlName="aggFunction" required>\n            <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n              {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-checkbox\n        [(ngModel)]="filterEntities"\n        [ngModelOptions]="{ standalone: true}"\n        (ngModelChange)="filterEntitiesChange()" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.filter-entities\' | translate }}\n      </mat-checkbox>\n      <mat-expansion-panel *ngIf="filterEntities"\n        [expanded]="true" formGroupName="filter">\n        <mat-expansion-panel-header>\n          <mat-panel-title translate>tb.rulenode.entity-filter</mat-panel-title>\n        </mat-expansion-panel-header>\n        <section fxLayout="column">\n          <label translate class="tb-title no-padding" style="padding-bottom: 10px;">tb.rulenode.fetch-entity-attributes</label>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.client-attributes</mat-label>\n            <mat-chip-grid #clientAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'clientAttributeNames\').value;"\n                (removed)="removeKey(key, \'clientAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.client-attributes\' | translate}}"\n                     [matChipInputFor]="clientAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'clientAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.shared-attributes</mat-label>\n            <mat-chip-grid #sharedAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'sharedAttributeNames\').value;"\n                (removed)="removeKey(key, \'sharedAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.shared-attributes\' | translate}}"\n                     [matChipInputFor]="sharedAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'sharedAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.server-attributes</mat-label>\n            <mat-chip-grid #serverAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'serverAttributeNames\').value;"\n                (removed)="removeKey(key, \'serverAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.server-attributes\' | translate}}"\n                     [matChipInputFor]="serverAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'serverAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.latest-timeseries</mat-label>\n            <mat-chip-grid #latestTimeseriesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'latestTsKeyNames\').value;"\n                (removed)="removeKey(key, \'latestTsKeyNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n                     [matChipInputFor]="latestTimeseriesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled && !tbelFilterFunctionOnly"></tb-script-lang>\n          <tb-js-func *ngIf="aggLatestMappingFormGroup.get(\'filter\').get(\'scriptLang\').value === scriptLanguage.JS"\n            formControlName="filterFunction"\n            functionName="Filter"\n            [functionArgs]="[\'attributes\']"\n            helpId="rulenode/agg_latest_entity_filter_fn"\n            noValidate>\n          </tb-js-func>\n          <tb-js-func *ngIf="aggLatestMappingFormGroup.get(\'filter\').get(\'scriptLang\').value === scriptLanguage.TBEL"\n            formControlName="tbelFilterFunction"\n            functionName="Filter"\n            [functionArgs]="[\'attributes\']"\n            [disableUndefinedCheck]="true"\n            [scriptLanguage]="scriptLanguage.TBEL"\n            helpId="rulenode/tbel/agg_latest_entity_filter_fn"\n            noValidate>\n          </tb-js-func>\n        </section>\n      </mat-expansion-panel>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || aggLatestMappingFormGroup.invalid || !aggLatestMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:gt.TbCheckboxComponent,selector:"tb-checkbox",inputs:["disabled","trueValue","falseValue"],outputs:["valueChange"]},{kind:"component",type:Ne.JsFuncComponent,selector:"tb-js-func",inputs:["functionTitle","functionName","functionArgs","validationArgs","resultType","disabled","fillHeight","minHeight","editorCompleter","globalVariables","disableUndefinedCheck","helpId","scriptLanguage","hideBrackets","noValidate","required"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"component",type:Tt.MatProgressBar,selector:"mat-progress-bar",inputs:["color","value","bufferValue","mode"],outputs:["animationEnd"],exportAs:["matProgressBar"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:Lt.MatToolbar,selector:"mat-toolbar",inputs:["color"],exportAs:["matToolbar"]},{kind:"directive",type:Ft.MatDialogContent,selector:"[mat-dialog-content], mat-dialog-content, [matDialogContent]"},{kind:"directive",type:Ft.MatDialogActions,selector:"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]",inputs:["align"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"component",type:Ee.MatChipGrid,selector:"mat-chip-grid",inputs:["tabIndex","disabled","placeholder","required","value","errorStateMatcher"],outputs:["change","valueChange"]},{kind:"directive",type:Ee.MatChipInput,selector:"input[matChipInputFor]",inputs:["matChipInputFor","matChipInputAddOnBlur","matChipInputSeparatorKeyCodes","placeholder","id","disabled"],outputs:["matChipInputTokenEnd"],exportAs:["matChipInput","matChipInputFor"]},{kind:"directive",type:Ee.MatChipRemove,selector:"[matChipRemove]"},{kind:"component",type:Ee.MatChipRow,selector:"mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]",inputs:["color","disabled","disableRipple","tabIndex","editable"],outputs:["edited"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.ɵNgNoValidate,selector:"form:not([ngNoForm]):not([ngNativeValidate])"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:Se.TbScriptLangComponent,selector:"tb-script-lang",inputs:["disabled"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Er,decorators:[{type:n,args:[{selector:"tb-agg-latest-mapping-dialog",template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="aggLatestMappingFormGroup" (ngSubmit)="save()" style="width: 700px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <tb-checkbox\n        [trueValue]="latestTelemetry.LATEST_TELEMETRY"\n        [falseValue]="attributeScope.SERVER_SCOPE"\n        formControlName="sourceScope" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.latest-telemetry\' | translate }}\n      </tb-checkbox>\n      <div fxLayout="row" fxLayout.xs="column" fxLayoutGap="8px">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label>{{(aggLatestMappingFormGroup.get(\'sourceScope\').value ===\n                   latestTelemetry.LATEST_TELEMETRY ? \'tb.rulenode.source-telemetry\'\n                            : \'tb.rulenode.source-attribute\') | translate}}</mat-label>\n          <input matInput formControlName="source">\n        </mat-form-field>\n        <mat-form-field class="mat-block"\n                        *ngIf="aggLatestMappingFormGroup.get(\'sourceScope\').value !== latestTelemetry.LATEST_TELEMETRY"\n                        fxFlex.xs\n                        style.gt-xs="max-width: 200px;">\n          <mat-label translate>tb.rulenode.attribute-scope</mat-label>\n          <mat-select formControlName="sourceScope">\n            <mat-option *ngFor="let scope of attributeScopes" [value]="scope">\n              {{ telemetryTypeTranslationMap.get(scope) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.default-value</mat-label>\n          <input required type="number" matInput formControlName="defaultValue">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'defaultValue\').hasError(\'required\')">\n            {{ \'tb.rulenode.default-value-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxLayout="row" fxLayout.xs="column" fxLayoutGap="8px">\n        <mat-form-field class="mat-block" fxFlex.xs style.gt-xs="max-width: 200px;">\n          <mat-label translate>tb.rulenode.math-function</mat-label>\n          <mat-select formControlName="aggFunction" required>\n            <mat-option *ngFor="let mathFunction of mathFunctions" [value]="mathFunction">\n              {{ mathFunctionsTranslationMap.get(mathFunction) | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="aggLatestMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <mat-checkbox\n        [(ngModel)]="filterEntities"\n        [ngModelOptions]="{ standalone: true}"\n        (ngModelChange)="filterEntitiesChange()" style="display: block; margin-bottom: 16px;">\n        {{ \'tb.rulenode.filter-entities\' | translate }}\n      </mat-checkbox>\n      <mat-expansion-panel *ngIf="filterEntities"\n        [expanded]="true" formGroupName="filter">\n        <mat-expansion-panel-header>\n          <mat-panel-title translate>tb.rulenode.entity-filter</mat-panel-title>\n        </mat-expansion-panel-header>\n        <section fxLayout="column">\n          <label translate class="tb-title no-padding" style="padding-bottom: 10px;">tb.rulenode.fetch-entity-attributes</label>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.client-attributes</mat-label>\n            <mat-chip-grid #clientAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'clientAttributeNames\').value;"\n                (removed)="removeKey(key, \'clientAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.client-attributes\' | translate}}"\n                     [matChipInputFor]="clientAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'clientAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.shared-attributes</mat-label>\n            <mat-chip-grid #sharedAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'sharedAttributeNames\').value;"\n                (removed)="removeKey(key, \'sharedAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.shared-attributes\' | translate}}"\n                     [matChipInputFor]="sharedAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'sharedAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.server-attributes</mat-label>\n            <mat-chip-grid #serverAttributesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'serverAttributeNames\').value;"\n                (removed)="removeKey(key, \'serverAttributeNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.server-attributes\' | translate}}"\n                     [matChipInputFor]="serverAttributesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'serverAttributeNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <mat-form-field class="mat-block">\n            <mat-label translate>tb.rulenode.latest-timeseries</mat-label>\n            <mat-chip-grid #latestTimeseriesChipList>\n              <mat-chip-row\n                *ngFor="let key of aggLatestMappingFormGroup.get(\'filter\').get(\'latestTsKeyNames\').value;"\n                (removed)="removeKey(key, \'latestTsKeyNames\')">\n                {{key}}\n                <mat-icon matChipRemove>close</mat-icon>\n              </mat-chip-row>\n              <input matInput type="text" placeholder="{{\'tb.rulenode.latest-timeseries\' | translate}}"\n                     [matChipInputFor]="latestTimeseriesChipList"\n                     [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                     (matChipInputTokenEnd)="addKey($event, \'latestTsKeyNames\')"\n                     [matChipInputAddOnBlur]="true">\n            </mat-chip-grid>\n          </mat-form-field>\n          <tb-script-lang formControlName="scriptLang" *ngIf="tbelEnabled && !tbelFilterFunctionOnly"></tb-script-lang>\n          <tb-js-func *ngIf="aggLatestMappingFormGroup.get(\'filter\').get(\'scriptLang\').value === scriptLanguage.JS"\n            formControlName="filterFunction"\n            functionName="Filter"\n            [functionArgs]="[\'attributes\']"\n            helpId="rulenode/agg_latest_entity_filter_fn"\n            noValidate>\n          </tb-js-func>\n          <tb-js-func *ngIf="aggLatestMappingFormGroup.get(\'filter\').get(\'scriptLang\').value === scriptLanguage.TBEL"\n            formControlName="tbelFilterFunction"\n            functionName="Filter"\n            [functionArgs]="[\'attributes\']"\n            [disableUndefinedCheck]="true"\n            [scriptLanguage]="scriptLanguage.TBEL"\n            helpId="rulenode/tbel/agg_latest_entity_filter_fn"\n            noValidate>\n          </tb-js-func>\n        </section>\n      </mat-expansion-panel>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || aggLatestMappingFormGroup.invalid || !aggLatestMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:kt.Router},{type:void 0,decorators:[{type:a,args:[Ct]}]},{type:Ft.MatDialogRef},{type:H.UntypedFormBuilder},{type:re.TranslateService}]}});class Gr extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t,n,o){super(e),this.store=e,this.translate=t,this.injector=n,this.dialog=o,this.tbelFilterFunctionOnly=!1,this.propagateChange=null}ngOnInit(){}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e}writeValue(e){this.mappings=e||[]}mappingDisplayValue(e){let t="";return e.filter&&(t+=this.translate.instant("tb.rulenode.filter-entities")+" -> "),t+=this.translate.instant(hn.get(e.aggFunction)),e.aggFunction!==bn.COUNT&&(t+="("+e.source+")"),t+=" -> "+e.target,t}removeAggMapping(e){e>-1&&(this.mappings.splice(e,1),this.updateModel())}addAggMapping(e){this.openAggMappingDialog(e)}editAggMapping(e,t){this.openAggMappingDialog(e,t)}openAggMappingDialog(e,t){e&&e.stopPropagation();const n=!t;let o;n||(o=this.mappings.indexOf(t)),this.dialog.open(Er,{disableClose:!0,panelClass:["tb-dialog","tb-fullscreen-dialog"],data:{isAdd:n,mapping:n?null:Ie(t),tbelFilterFunctionOnly:this.tbelFilterFunctionOnly}}).afterClosed().subscribe((e=>{e&&(n?this.mappings.push(e):this.mappings[o]=e,this.updateModel())}))}updateModel(){this.required&&!this.mappings.length?this.propagateChange(null):this.propagateChange(this.mappings)}}Gr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Gr,deps:[{token:_.Store},{token:re.TranslateService},{token:t.Injector},{token:Ft.MatDialog}],target:t.ɵɵFactoryTarget.Component}),Gr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Gr,selector:"tb-agg-latest-mapping-table",inputs:{tbelFilterFunctionOnly:"tbelFilterFunctionOnly",disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>Gr)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section class="tb-agg-latest-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let aggMapping of mappings; let $index = index">\n      <span class="cell tb-agg-mapping-display-value" fxFlex>{{ mappingDisplayValue(aggMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAggMapping($event, aggMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAggMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAggMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-agg-latest-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-agg-latest-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0;max-height:48px}:host .tb-agg-latest-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-agg-latest-mapping-table .body .cell.tb-agg-mapping-display-value{font-size:14px;line-height:16px;color:#000000b3}:host .tb-agg-latest-mapping-table span.no-data-found{position:relative;height:48px;text-transform:uppercase;display:flex}:host .tb-agg-latest-mapping-table span.no-data-found.disabled{color:#00000061}:host .tb-agg-latest-mapping-table span.no-data-found.required{color:#dd2c00}\n"],dependencies:[{kind:"directive",type:W.NgClass,selector:"[ngClass]",inputs:["class","ngClass"]},{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:Ze.DefaultShowHideDirective,selector:"  [fxShow], [fxShow.print],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide], [fxHide.print],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]",inputs:["fxShow","fxShow.print","fxShow.xs","fxShow.sm","fxShow.md","fxShow.lg","fxShow.xl","fxShow.lt-sm","fxShow.lt-md","fxShow.lt-lg","fxShow.lt-xl","fxShow.gt-xs","fxShow.gt-sm","fxShow.gt-md","fxShow.gt-lg","fxHide","fxHide.print","fxHide.xs","fxHide.sm","fxHide.md","fxHide.lg","fxHide.xl","fxHide.lt-sm","fxHide.lt-md","fxHide.lt-lg","fxHide.lt-xl","fxHide.gt-xs","fxHide.gt-sm","fxHide.gt-md","fxHide.gt-lg"]},{kind:"directive",type:Ze.DefaultClassDirective,selector:"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]",inputs:["ngClass","ngClass.xs","ngClass.sm","ngClass.md","ngClass.lg","ngClass.xl","ngClass.lt-sm","ngClass.lt-md","ngClass.lt-lg","ngClass.lt-xl","ngClass.gt-xs","ngClass.gt-sm","ngClass.gt-md","ngClass.gt-lg"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Gr,decorators:[{type:n,args:[{selector:"tb-agg-latest-mapping-table",providers:[{provide:j,useExisting:c((()=>Gr)),multi:!0}],template:'<section class="tb-agg-latest-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let aggMapping of mappings; let $index = index">\n      <span class="cell tb-agg-mapping-display-value" fxFlex>{{ mappingDisplayValue(aggMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAggMapping($event, aggMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAggMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAggMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-agg-latest-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-agg-latest-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0;max-height:48px}:host .tb-agg-latest-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-agg-latest-mapping-table .body .cell.tb-agg-mapping-display-value{font-size:14px;line-height:16px;color:#000000b3}:host .tb-agg-latest-mapping-table span.no-data-found{position:relative;height:48px;text-transform:uppercase;display:flex}:host .tb-agg-latest-mapping-table span.no-data-found.disabled{color:#00000061}:host .tb-agg-latest-mapping-table span.no-data-found.required{color:#dd2c00}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:t.Injector},{type:Ft.MatDialog}]},propDecorators:{tbelFilterFunctionOnly:[{type:m}],disabled:[{type:m}],required:[{type:m}]}});const Dr=[K.required,K.min(1),K.max(2147483647)];class Vr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.aggPeriodTimeUnits=[$t.MINUTES,$t.HOURS,$t.DAYS],this.timeUnitsTranslationMap=Yt}configForm(){return this.aggregateLatestConfigForm}onConfigurationSet(e){this.aggregateLatestConfigForm=this.fb.group({periodValue:[e?e.periodValue:null,Dr],periodTimeUnit:[e?e.periodTimeUnit:null,[K.required]],outMsgType:[e?e.outMsgType:null,[K.required]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[K.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],includeRootEntity:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.includeRootEntity:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]],childRelationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.childRelationsQuery:null,[]]}),aggMappings:[e?e.aggMappings:null,[K.required]]})}validatorTriggers(){return["parentEntitiesQuery.type"]}updateValidators(e,t){const n=this.aggregateLatestConfigForm.get("parentEntitiesQuery"),o=n.get("type").value;if(e&&"parentEntitiesQuery.type"===t){const e={type:o};"relationsQuery"===o?(e.rootEntityId=null,e.relationsQuery=Ie(An),e.childRelationsQuery=Ie(An)):"single"===o?(e.entityId=null,e.childRelationsQuery=Ie(An)):"group"===o&&(e.entityGroupId=null),n.reset(e,{emitEvent:!1})}n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),n.get("childRelationsQuery").setValidators([]),"relationsQuery"===o?(n.get("rootEntityId").setValidators([K.required]),n.get("relationsQuery").setValidators([K.required]),n.get("childRelationsQuery").setValidators([K.required])):"single"===o?(n.get("entityId").setValidators([K.required]),n.get("childRelationsQuery").setValidators([K.required])):"group"===o&&n.get("entityGroupId").setValidators([K.required]),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e}),n.get("childRelationsQuery").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.parentEntitiesQuery=qn(e.parentEntitiesQuery),e}}e("AggregateLatestConfigComponent",Vr),Vr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Vr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Vr,selector:"tb-analytics-node-aggregate-latest-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="aggregateLatestConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div formGroupName="parentEntitiesQuery">\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.parent-entity</mat-panel-title>\n      </mat-expansion-panel-header>\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <mat-checkbox formControlName="includeRootEntity" style="padding-bottom: 16px;">\n            {{ \'tb.rulenode.include-root-entity-to-parent-entities\' | translate }}\n          </mat-checkbox>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n    </mat-expansion-panel>\n    <mat-expansion-panel *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                                aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n                         [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="childRelationsQuery">\n      </tb-relations-query-config>\n    </mat-expansion-panel>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.agg-latest-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-agg-latest-mapping-table\n      required\n      formControlName="aggMappings"\n      style="padding-bottom: 15px;">\n    </tb-agg-latest-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:He.EntitySelectComponent,selector:"tb-entity-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","required","disabled"]},{kind:"component",type:ze.EntityGroupSelectComponent,selector:"tb-entity-group-select",inputs:["allowedGroupTypes","excludeGroupTypes","defaultGroupType","excludeGroupIds","excludeGroupAll","placeholderText","notFoundText","requiredText","ownerId","originator","required","disabled"],outputs:["currentGroupType","currentGroupInfo"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:ft.MatRadioGroup,selector:"mat-radio-group",exportAs:["matRadioGroup"]},{kind:"component",type:ft.MatRadioButton,selector:"mat-radio-button",inputs:["disableRipple","tabIndex"],exportAs:["matRadioButton"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"component",type:Gr,selector:"tb-agg-latest-mapping-table",inputs:["tbelFilterFunctionOnly","disabled","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Vr,decorators:[{type:n,args:[{selector:"tb-analytics-node-aggregate-latest-config",template:'<section [formGroup]="aggregateLatestConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="aggregateLatestConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div formGroupName="parentEntitiesQuery">\n    <mat-expansion-panel [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.parent-entity</mat-panel-title>\n      </mat-expansion-panel-header>\n        <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                         style="padding-top: 16px; padding-bottom: 16px;">\n          <mat-radio-button [value]="\'single\'" color="primary">\n            <span translate>tb.rulenode.single-entity</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'group\'" color="primary">\n            <span translate>tb.rulenode.group-of-entities</span>\n          </mat-radio-button>\n          <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n            <span translate>tb.rulenode.relations-query</span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <section *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n                 fxLayout="column">\n          <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n          <tb-entity-select\n            required\n            formControlName="rootEntityId">\n          </tb-entity-select>\n          <mat-checkbox formControlName="includeRootEntity" style="padding-bottom: 16px;">\n            {{ \'tb.rulenode.include-root-entity-to-parent-entities\' | translate }}\n          </mat-checkbox>\n          <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n          <tb-relations-query-config\n            style="padding-bottom: 15px;"\n            formControlName="relationsQuery">\n          </tb-relations-query-config>\n        </section>\n        <tb-entity-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n          required\n          formControlName="entityId">\n        </tb-entity-select>\n        <tb-entity-group-select\n          *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n          required\n          formControlName="entityGroupId"\n          placeholderText="entity-group.select-entity-group"\n          notFoundText="entity-group.no-entity-groups-matching"\n          requiredText="entity-group.target-entity-group-required">\n        </tb-entity-group-select>\n    </mat-expansion-panel>\n    <mat-expansion-panel *ngIf="aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                                aggregateLatestConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n                         [expanded]="true">\n      <mat-expansion-panel-header>\n        <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n      </mat-expansion-panel-header>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="childRelationsQuery">\n      </tb-relations-query-config>\n    </mat-expansion-panel>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.agg-latest-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-agg-latest-mapping-table\n      required\n      formControlName="aggMappings"\n      style="padding-bottom: 15px;">\n    </tb-agg-latest-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Pr extends O{constructor(e,t,n,o,r,a){super(e,t,o),this.store=e,this.router=t,this.data=n,this.dialogRef=o,this.fb=r,this.translate=a,this.separatorKeysCodes=[Ae,qe,we],this.alarmStatusTranslationsMap=w,this.alarmSeverityTranslationsMap=h,this.displayStatusFn=this.displayStatus.bind(this),this.alarmStatusList=[],this.alarmStatusSearchText="",this.displaySeverityFn=this.displaySeverity.bind(this),this.alarmSeverityList=[],this.alarmSeveritySearchText="",this.isAdd=n.isAdd,this.mapping=n.mapping,this.isAdd&&!this.mapping&&(this.mapping={latestInterval:0,target:""}),this.specifyInterval=this.mapping.latestInterval>0;for(const e of Object.keys(q))this.alarmStatusList.push(q[e]);for(const e of Object.keys(b))this.alarmSeverityList.push(b[e]);this.statusFormControl=new J(""),this.severityFormControl=new J(""),this.filteredAlarmStatus=this.statusFormControl.valueChanges.pipe(Oe(""),Re((e=>e||"")),Ue((e=>this.fetchAlarmStatus(e))),Be()),this.filteredAlarmSeverity=this.severityFormControl.valueChanges.pipe(Oe(""),Re((e=>e||"")),Ue((e=>this.fetchAlarmSeverity(e))),Be())}ngOnInit(){this.alarmsCountMappingFormGroup=this.fb.group({target:[this.mapping.target,[K.required]],latestInterval:[this.mapping.latestInterval,[]],typesList:[this.mapping.typesList?this.mapping.typesList:[],[]],severityList:[this.mapping.severityList?this.mapping.severityList:[],[]],statusList:[this.mapping.statusList?this.mapping.statusList:[],[]]}),this.specifyInterval||this.alarmsCountMappingFormGroup.get("latestInterval").disable({emitEvent:!1})}specifyIntervalChange(){this.specifyInterval?(this.alarmsCountMappingFormGroup.get("latestInterval").setValue(B,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get("latestInterval").enable({emitEvent:!0})):(this.alarmsCountMappingFormGroup.get("latestInterval").setValue(0,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get("latestInterval").disable({emitEvent:!0})),this.alarmsCountMappingFormGroup.get("latestInterval").markAsDirty()}removeKey(e,t){const n=this.alarmsCountMappingFormGroup.get(t).value,o=n.indexOf(e);o>=0&&(n.splice(o,1),this.alarmsCountMappingFormGroup.get(t).setValue(n,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get(t).markAsDirty())}addKey(e,t){const n=e.input;let o=e.value;if((o||"").trim()){o=o.trim();let e=this.alarmsCountMappingFormGroup.get(t).value;e&&-1!==e.indexOf(o)||(e||(e=[]),e.push(o),this.alarmsCountMappingFormGroup.get(t).setValue(e,{emitEvent:!0}),this.alarmsCountMappingFormGroup.get(t).markAsDirty())}n&&(n.value="")}displayStatus(e){return e?this.translate.instant(w.get(e)):void 0}onAlarmStatusInputFocus(){this.statusFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})}getAlarmStatusList(){return this.alarmStatusList.filter((e=>-1===this.alarmsCountMappingFormGroup.get("statusList").value.indexOf(e)))}fetchAlarmStatus(e){const t=this.getAlarmStatusList();if(this.alarmStatusSearchText=e,this.alarmStatusSearchText&&this.alarmStatusSearchText.length){const e=this.alarmStatusSearchText.toUpperCase();return ce(t.filter((t=>this.translate.instant(w.get(q[t])).toUpperCase().includes(e))))}return ce(t)}alarmStatusSelected(e){this.addAlarmStatus(e.option.value),this.clearAlarmStatus("")}addAlarmStatus(e){let t=this.alarmsCountMappingFormGroup.get("statusList").value;t||(t=[]);-1===t.indexOf(e)&&(t.push(e),this.alarmsCountMappingFormGroup.get("statusList").setValue(t),this.alarmsCountMappingFormGroup.get("statusList").markAsDirty())}clearAlarmStatus(e=""){this.alarmStatusInput.nativeElement.value=e,this.statusFormControl.patchValue(null,{emitEvent:!0}),setTimeout((()=>{this.alarmStatusInput.nativeElement.blur(),this.alarmStatusInput.nativeElement.focus()}),0)}displaySeverity(e){return e?this.translate.instant(h.get(e)):void 0}onAlarmSeverityInputFocus(){this.severityFormControl.updateValueAndValidity({onlySelf:!0,emitEvent:!0})}getAlarmSeverityList(){return this.alarmSeverityList.filter((e=>-1===this.alarmsCountMappingFormGroup.get("severityList").value.indexOf(e)))}fetchAlarmSeverity(e){const t=this.getAlarmSeverityList();if(this.alarmSeveritySearchText=e,this.alarmSeveritySearchText&&this.alarmSeveritySearchText.length){const e=this.alarmSeveritySearchText.toUpperCase();return ce(t.filter((t=>this.translate.instant(h.get(b[t])).toUpperCase().includes(e))))}return ce(t)}alarmSeveritySelected(e){this.addAlarmSeverity(e.option.value),this.clearAlarmSeverity("")}addAlarmSeverity(e){let t=this.alarmsCountMappingFormGroup.get("severityList").value;t||(t=[]);-1===t.indexOf(e)&&(t.push(e),this.alarmsCountMappingFormGroup.get("severityList").setValue(t),this.alarmsCountMappingFormGroup.get("severityList").markAsDirty())}clearAlarmSeverity(e=""){this.alarmSeverityInput.nativeElement.value=e,this.severityFormControl.patchValue(null,{emitEvent:!0}),setTimeout((()=>{this.alarmSeverityInput.nativeElement.blur(),this.alarmSeverityInput.nativeElement.focus()}),0)}cancel(){this.dialogRef.close()}save(){this.mapping=this.alarmsCountMappingFormGroup.value,this.dialogRef.close(this.mapping)}}Pr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Pr,deps:[{token:_.Store},{token:kt.Router},{token:Ct},{token:Ft.MatDialogRef},{token:H.UntypedFormBuilder},{token:re.TranslateService}],target:t.ɵɵFactoryTarget.Component}),Pr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Pr,selector:"tb-alarms-count-mapping-dialog",viewQueries:[{propertyName:"alarmStatusInput",first:!0,predicate:["alarmStatusInput"],descendants:!0},{propertyName:"alarmSeverityInput",first:!0,predicate:["alarmSeverityInput"],descendants:!0}],usesInheritance:!0,ngImport:t,template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="alarmsCountMappingFormGroup" (ngSubmit)="save()" style="width: 650px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <div fxFlex fxLayout="column">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="alarmsCountMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.status-filter</mat-label>\n          <mat-chip-grid #alarmStatusChipList>\n            <mat-chip-row\n              *ngFor="let alarmStatus of alarmsCountMappingFormGroup.get(\'statusList\').value;"\n              (removed)="removeKey(alarmStatus, \'statusList\')">\n                <span>\n                  <strong>{{alarmStatusTranslationsMap.get(alarmStatus) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'statusList\').value.length ?\n                                   \'tb.rulenode.add-alarm-status\' : \'tb.rulenode.all-statuses\') | translate}}"\n                   #alarmStatusInput\n                   (focusin)="onAlarmStatusInputFocus()"\n                   [formControl]="statusFormControl"\n                   matAutocompleteOrigin\n                   #originAlarmStatus="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="originAlarmStatus"\n                   [matAutocomplete]="alarmStatusAutocomplete"\n                   [matChipInputFor]="alarmStatusChipList">\n          </mat-chip-grid>\n          <mat-autocomplete #alarmStatusAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmStatusSelected($event)"\n                            [displayWith]="displayStatusFn">\n            <mat-option *ngFor="let status of filteredAlarmStatus | async" [value]="status">\n              <span [innerHTML]="alarmStatusTranslationsMap.get(status) | translate | highlight:alarmStatusSearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmStatus | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-status-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.severity-filter</mat-label>\n          <mat-chip-grid #alarmSeverityChipList>\n            <mat-chip-row\n              *ngFor="let alarmSeverity of alarmsCountMappingFormGroup.get(\'severityList\').value;"\n              (removed)="removeKey(alarmSeverity, \'severityList\')">\n                <span>\n                  <strong>{{alarmSeverityTranslationsMap.get(alarmSeverity) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'severityList\').value.length ?\n                                   \'tb.rulenode.add-alarm-severity\' : \'tb.rulenode.all-severities\') | translate}}"\n                   #alarmSeverityInput\n                   (focusin)="onAlarmSeverityInputFocus()"\n                   [formControl]="severityFormControl"\n                   matAutocompleteOrigin\n                   #originAlarmSeverity="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="originAlarmSeverity"\n                   [matAutocomplete]="alarmSeverityAutocomplete"\n                   [matChipInputFor]="alarmSeverityChipList">\n          </mat-chip-grid>\n          <mat-autocomplete #alarmSeverityAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmSeveritySelected($event)"\n                            [displayWith]="displaySeverityFn">\n            <mat-option *ngFor="let severity of filteredAlarmSeverity | async" [value]="severity">\n              <span [innerHTML]="alarmSeverityTranslationsMap.get(severity) | translate | highlight:alarmSeveritySearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmSeverity | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-severity-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.type-filter</mat-label>\n          <mat-chip-grid #typesChipList>\n            <mat-chip-row\n              *ngFor="let key of alarmsCountMappingFormGroup.get(\'typesList\').value;"\n              (removed)="removeKey(key, \'typesList\')">\n              {{key}}\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'typesList\').value.length ?\n                                   \'tb.rulenode.add-alarm-type\' : \'tb.rulenode.all-types\') | translate}}"\n                   [matChipInputFor]="typesChipList"\n                   [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                   (matChipInputTokenEnd)="addKey($event, \'typesList\')"\n                   [matChipInputAddOnBlur]="true">\n          </mat-chip-grid>\n        </mat-form-field>\n        <mat-checkbox\n          [(ngModel)]="specifyInterval"\n          [ngModelOptions]="{ standalone: true}"\n          (ngModelChange)="specifyIntervalChange()" style="display: block; margin-bottom: 16px;">\n          {{ \'tb.rulenode.specify-interval\' | translate }}\n        </mat-checkbox>\n        <tb-timeinterval\n          *ngIf="specifyInterval"\n          predefinedName="timewindow.last"\n          formControlName="latestInterval"\n          style="padding-top: 8px">\n        </tb-timeinterval>\n      </div>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || alarmsCountMappingFormGroup.invalid || !alarmsCountMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n',dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:It.TimeintervalComponent,selector:"tb-timeinterval",inputs:["min","max","predefinedName","isEdit","hideFlag","disabledAdvanced","useCalendarIntervals","disabled","subscriptSizing"],outputs:["hideFlagChange"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"component",type:Tt.MatProgressBar,selector:"mat-progress-bar",inputs:["color","value","bufferValue","mode"],outputs:["animationEnd"],exportAs:["matProgressBar"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:Lt.MatToolbar,selector:"mat-toolbar",inputs:["color"],exportAs:["matToolbar"]},{kind:"directive",type:Ft.MatDialogContent,selector:"[mat-dialog-content], mat-dialog-content, [matDialogContent]"},{kind:"directive",type:Ft.MatDialogActions,selector:"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]",inputs:["align"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:tt.MatAutocomplete,selector:"mat-autocomplete",inputs:["disableRipple","hideSingleSelectionIndicator"],exportAs:["matAutocomplete"]},{kind:"directive",type:tt.MatAutocompleteTrigger,selector:"input[matAutocomplete], textarea[matAutocomplete]",exportAs:["matAutocompleteTrigger"]},{kind:"directive",type:tt.MatAutocompleteOrigin,selector:"[matAutocompleteOrigin]",exportAs:["matAutocompleteOrigin"]},{kind:"component",type:Ee.MatChipGrid,selector:"mat-chip-grid",inputs:["tabIndex","disabled","placeholder","required","value","errorStateMatcher"],outputs:["change","valueChange"]},{kind:"directive",type:Ee.MatChipInput,selector:"input[matChipInputFor]",inputs:["matChipInputFor","matChipInputAddOnBlur","matChipInputSeparatorKeyCodes","placeholder","id","disabled"],outputs:["matChipInputTokenEnd"],exportAs:["matChipInput","matChipInputFor"]},{kind:"directive",type:Ee.MatChipRemove,selector:"[matChipRemove]"},{kind:"component",type:Ee.MatChipRow,selector:"mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]",inputs:["color","disabled","disableRipple","tabIndex","editable"],outputs:["edited"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.ɵNgNoValidate,selector:"form:not([ngNoForm]):not([ngNativeValidate])"},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.NgModel,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{kind:"directive",type:H.FormControlDirective,selector:"[formControl]",inputs:["formControl","disabled","ngModel"],outputs:["ngModelChange"],exportAs:["ngForm"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:nt.HighlightPipe,name:"highlight"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Pr,decorators:[{type:n,args:[{selector:"tb-alarms-count-mapping-dialog",template:'\x3c!--\n\n    ThingsBoard, Inc. ("COMPANY") CONFIDENTIAL\n\n    Copyright © 2016-2020 ThingsBoard, Inc. All Rights Reserved.\n\n    NOTICE: All information contained herein is, and remains\n    the property of ThingsBoard, Inc. and its suppliers,\n    if any.  The intellectual and technical concepts contained\n    herein are proprietary to ThingsBoard, Inc.\n    and its suppliers and may be covered by U.S. and Foreign Patents,\n    patents in process, and are protected by trade secret or copyright law.\n\n    Dissemination of this information or reproduction of this material is strictly forbidden\n    unless prior written permission is obtained from COMPANY.\n\n    Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n    managers or contractors who have executed Confidentiality and Non-disclosure agreements\n    explicitly covering such access.\n\n    The copyright notice above does not evidence any actual or intended publication\n    or disclosure  of  this source code, which includes\n    information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n    ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n    OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n    THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n    AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n    THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n    DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n    OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n\n--\x3e\n<form [formGroup]="alarmsCountMappingFormGroup" (ngSubmit)="save()" style="width: 650px;">\n  <mat-toolbar fxLayout="row" color="primary">\n    <h2>{{ (isAdd ? \'tb.rulenode.add-mapping\' : \'tb.rulenode.edit-mapping\') | translate }}</h2>\n    <span fxFlex></span>\n    <button mat-icon-button\n            (click)="cancel()"\n            type="button">\n      <mat-icon class="material-icons">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color="warn" mode="indeterminate" *ngIf="isLoading$ | async">\n  </mat-progress-bar>\n  <div style="height: 4px;" *ngIf="!(isLoading$ | async)"></div>\n  <div mat-dialog-content>\n    <fieldset [disabled]="isLoading$ | async">\n      <div fxFlex fxLayout="column">\n        <mat-form-field fxFlex class="mat-block">\n          <mat-label translate>tb.rulenode.target-telemetry</mat-label>\n          <input required matInput formControlName="target">\n          <mat-error *ngIf="alarmsCountMappingFormGroup.get(\'target\').hasError(\'required\')">\n            {{ \'tb.rulenode.target-telemetry-required\' | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.status-filter</mat-label>\n          <mat-chip-grid #alarmStatusChipList>\n            <mat-chip-row\n              *ngFor="let alarmStatus of alarmsCountMappingFormGroup.get(\'statusList\').value;"\n              (removed)="removeKey(alarmStatus, \'statusList\')">\n                <span>\n                  <strong>{{alarmStatusTranslationsMap.get(alarmStatus) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'statusList\').value.length ?\n                                   \'tb.rulenode.add-alarm-status\' : \'tb.rulenode.all-statuses\') | translate}}"\n                   #alarmStatusInput\n                   (focusin)="onAlarmStatusInputFocus()"\n                   [formControl]="statusFormControl"\n                   matAutocompleteOrigin\n                   #originAlarmStatus="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="originAlarmStatus"\n                   [matAutocomplete]="alarmStatusAutocomplete"\n                   [matChipInputFor]="alarmStatusChipList">\n          </mat-chip-grid>\n          <mat-autocomplete #alarmStatusAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmStatusSelected($event)"\n                            [displayWith]="displayStatusFn">\n            <mat-option *ngFor="let status of filteredAlarmStatus | async" [value]="status">\n              <span [innerHTML]="alarmStatusTranslationsMap.get(status) | translate | highlight:alarmStatusSearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmStatus | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-status-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.severity-filter</mat-label>\n          <mat-chip-grid #alarmSeverityChipList>\n            <mat-chip-row\n              *ngFor="let alarmSeverity of alarmsCountMappingFormGroup.get(\'severityList\').value;"\n              (removed)="removeKey(alarmSeverity, \'severityList\')">\n                <span>\n                  <strong>{{alarmSeverityTranslationsMap.get(alarmSeverity) | translate}}</strong>\n                </span>\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'severityList\').value.length ?\n                                   \'tb.rulenode.add-alarm-severity\' : \'tb.rulenode.all-severities\') | translate}}"\n                   #alarmSeverityInput\n                   (focusin)="onAlarmSeverityInputFocus()"\n                   [formControl]="severityFormControl"\n                   matAutocompleteOrigin\n                   #originAlarmSeverity="matAutocompleteOrigin"\n                   [matAutocompleteConnectedTo]="originAlarmSeverity"\n                   [matAutocomplete]="alarmSeverityAutocomplete"\n                   [matChipInputFor]="alarmSeverityChipList">\n          </mat-chip-grid>\n          <mat-autocomplete #alarmSeverityAutocomplete="matAutocomplete"\n                            class="tb-autocomplete"\n                            (optionSelected)="alarmSeveritySelected($event)"\n                            [displayWith]="displaySeverityFn">\n            <mat-option *ngFor="let severity of filteredAlarmSeverity | async" [value]="severity">\n              <span [innerHTML]="alarmSeverityTranslationsMap.get(severity) | translate | highlight:alarmSeveritySearchText"></span>\n            </mat-option>\n            <mat-option *ngIf="(filteredAlarmSeverity | async)?.length === 0" [value]="null" class="tb-not-found">\n              <div class="tb-not-found-content" (click)="$event.stopPropagation()">\n                <div>\n                  <span translate>tb.rulenode.no-alarm-severity-matching</span>\n                </div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n        <mat-form-field class="mat-block">\n          <mat-label translate>tb.rulenode.type-filter</mat-label>\n          <mat-chip-grid #typesChipList>\n            <mat-chip-row\n              *ngFor="let key of alarmsCountMappingFormGroup.get(\'typesList\').value;"\n              (removed)="removeKey(key, \'typesList\')">\n              {{key}}\n              <mat-icon matChipRemove>close</mat-icon>\n            </mat-chip-row>\n            <input matInput type="text"\n                   placeholder="{{(alarmsCountMappingFormGroup.get(\'typesList\').value.length ?\n                                   \'tb.rulenode.add-alarm-type\' : \'tb.rulenode.all-types\') | translate}}"\n                   [matChipInputFor]="typesChipList"\n                   [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                   (matChipInputTokenEnd)="addKey($event, \'typesList\')"\n                   [matChipInputAddOnBlur]="true">\n          </mat-chip-grid>\n        </mat-form-field>\n        <mat-checkbox\n          [(ngModel)]="specifyInterval"\n          [ngModelOptions]="{ standalone: true}"\n          (ngModelChange)="specifyIntervalChange()" style="display: block; margin-bottom: 16px;">\n          {{ \'tb.rulenode.specify-interval\' | translate }}\n        </mat-checkbox>\n        <tb-timeinterval\n          *ngIf="specifyInterval"\n          predefinedName="timewindow.last"\n          formControlName="latestInterval"\n          style="padding-top: 8px">\n        </tb-timeinterval>\n      </div>\n    </fieldset>\n  </div>\n  <div mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <span fxFlex></span>\n    <button mat-button mat-raised-button color="primary"\n            type="submit"\n            [disabled]="(isLoading$ | async) || alarmsCountMappingFormGroup.invalid || !alarmsCountMappingFormGroup.dirty">\n      {{ (isAdd ? \'action.add\' : \'action.save\') | translate }}\n    </button>\n    <button mat-button color="primary"\n            style="margin-right: 20px;"\n            type="button"\n            [disabled]="(isLoading$ | async)"\n            (click)="cancel()" cdkFocusInitial>\n      {{ \'action.cancel\' | translate }}\n    </button>\n  </div>\n</form>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:kt.Router},{type:void 0,decorators:[{type:a,args:[Ct]}]},{type:Ft.MatDialogRef},{type:H.UntypedFormBuilder},{type:re.TranslateService}]},propDecorators:{alarmStatusInput:[{type:u,args:["alarmStatusInput",{static:!1}]}],alarmSeverityInput:[{type:u,args:["alarmSeverityInput",{static:!1}]}]}});class Rr extends T{get required(){return this.requiredValue}set required(e){this.requiredValue=$e(e)}constructor(e,t,n,o,r){super(e),this.store=e,this.translate=t,this.injector=n,this.millisecondsToTimeStringPipe=o,this.dialog=r,this.propagateChange=null}ngOnInit(){}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){this.disabled=e}writeValue(e){this.mappings=e||[]}mappingDisplayValue(e){let t=this.translate.instant("tb.rulenode.func-count")+"("+this.filterText(e);return e.latestInterval>0&&(t+=" "+this.translate.instant("tb.rulenode.for")+" "+this.translate.instant("timewindow.last-prefix")+" "+this.millisecondsToTimeStringPipe.transform(e.latestInterval)),t=t.trim(),t+=")",t+=" -> "+e.target,t}filterText(e){let t="";return t=this.statusFilterText(e.statusList,t),t=this.severityFilterText(e.severityList,t),t=this.typeFilterText(e.typesList,t),t.length||(t=this.translate.instant("tb.rulenode.all-alarms")+""),t}statusFilterText(e,t){const n=[];return e&&e.length&&e.forEach((e=>n.push(this.translate.instant(w.get(e))))),this.updateFilterText(n,t)}severityFilterText(e,t){const n=[];return e&&e.length&&e.forEach((e=>n.push(this.translate.instant(h.get(e))))),this.updateFilterText(n,t)}typeFilterText(e,t){const n=[];return e&&e.length&&e.forEach((e=>n.push(e))),this.updateFilterText(n,t)}updateFilterText(e,t){const n=e.join(", ");return n&&n.length&&(t.length&&(t+=" "+this.translate.instant("tb.rulenode.and")+" "),t+=n),t}removeAlarmsCountMapping(e){e>-1&&(this.mappings.splice(e,1),this.updateModel())}addAlarmsCountMapping(e){this.openAlarmsCountMappingDialog(e)}editAlarmsCountMapping(e,t){this.openAlarmsCountMappingDialog(e,t)}openAlarmsCountMappingDialog(e,t){e&&e.stopPropagation();const n=!t;let o;n||(o=this.mappings.indexOf(t)),this.dialog.open(Pr,{disableClose:!0,panelClass:["tb-dialog","tb-fullscreen-dialog"],data:{isAdd:n,mapping:n?null:Ie(t)}}).afterClosed().subscribe((e=>{e&&(n?this.mappings.push(e):this.mappings[o]=e,this.updateModel())}))}updateModel(){this.required&&!this.mappings.length?this.propagateChange(null):this.propagateChange(this.mappings)}}Rr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Rr,deps:[{token:_.Store},{token:re.TranslateService},{token:t.Injector},{token:A.MillisecondsToTimeStringPipe},{token:Ft.MatDialog}],target:t.ɵɵFactoryTarget.Component}),Rr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Rr,selector:"tb-alarms-count-mapping-table",inputs:{disabled:"disabled",required:"required"},providers:[{provide:j,useExisting:c((()=>Rr)),multi:!0}],usesInheritance:!0,ngImport:t,template:'<section class="tb-alarms-count-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let alarmsCountMapping of mappings; let $index = index">\n      <span class="cell tb-alarms-count-mapping-display-value" fxFlex>{{ mappingDisplayValue(alarmsCountMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAlarmsCountMapping($event, alarmsCountMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAlarmsCountMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAlarmsCountMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-alarms-count-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-alarms-count-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0}:host .tb-alarms-count-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-alarms-count-mapping-table .body .cell.tb-alarms-count-mapping-display-value{font-size:14px;line-height:16px;color:#000000b3}:host .tb-alarms-count-mapping-table span.no-data-found{position:relative;height:40px;text-transform:uppercase;display:flex}:host .tb-alarms-count-mapping-table span.no-data-found.disabled{color:#00000061}:host .tb-alarms-count-mapping-table span.no-data-found.required{color:#dd2c00}\n"],dependencies:[{kind:"directive",type:W.NgClass,selector:"[ngClass]",inputs:["class","ngClass"]},{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"component",type:ae.MatButton,selector:"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ae.MatIconButton,selector:"button[mat-icon-button]",inputs:["disabled","disableRipple","color"],exportAs:["matButton"]},{kind:"component",type:ie.MatIcon,selector:"mat-icon",inputs:["color","inline","svgIcon","fontSet","fontIcon"],exportAs:["matIcon"]},{kind:"directive",type:me.MatTooltip,selector:"[matTooltip]",exportAs:["matTooltip"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutAlignDirective,selector:"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]",inputs:["fxLayoutAlign","fxLayoutAlign.xs","fxLayoutAlign.sm","fxLayoutAlign.md","fxLayoutAlign.lg","fxLayoutAlign.xl","fxLayoutAlign.lt-sm","fxLayoutAlign.lt-md","fxLayoutAlign.lt-lg","fxLayoutAlign.lt-xl","fxLayoutAlign.gt-xs","fxLayoutAlign.gt-sm","fxLayoutAlign.gt-md","fxLayoutAlign.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:Ze.DefaultShowHideDirective,selector:"  [fxShow], [fxShow.print],  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],  [fxHide], [fxHide.print],  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]",inputs:["fxShow","fxShow.print","fxShow.xs","fxShow.sm","fxShow.md","fxShow.lg","fxShow.xl","fxShow.lt-sm","fxShow.lt-md","fxShow.lt-lg","fxShow.lt-xl","fxShow.gt-xs","fxShow.gt-sm","fxShow.gt-md","fxShow.gt-lg","fxHide","fxHide.print","fxHide.xs","fxHide.sm","fxHide.md","fxHide.lg","fxHide.xl","fxHide.lt-sm","fxHide.lt-md","fxHide.lt-lg","fxHide.lt-xl","fxHide.gt-xs","fxHide.gt-sm","fxHide.gt-md","fxHide.gt-lg"]},{kind:"directive",type:Ze.DefaultClassDirective,selector:"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]",inputs:["ngClass","ngClass.xs","ngClass.sm","ngClass.md","ngClass.lg","ngClass.xl","ngClass.lt-sm","ngClass.lt-md","ngClass.lt-lg","ngClass.lt-xl","ngClass.gt-xs","ngClass.gt-sm","ngClass.gt-md","ngClass.gt-lg"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"pipe",type:W.AsyncPipe,name:"async"},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Rr,decorators:[{type:n,args:[{selector:"tb-alarms-count-mapping-table",providers:[{provide:j,useExisting:c((()=>Rr)),multi:!0}],template:'<section class="tb-alarms-count-mapping-table" fxLayout="column">\n  <label translate class="tb-title no-padding">tb.rulenode.mappings</label>\n  <div class="body">\n    <div class="row mat-elevation-z1" fxFlex fxLayout="row" fxLayoutAlign="start center"\n         *ngFor="let alarmsCountMapping of mappings; let $index = index">\n      <span class="cell tb-alarms-count-mapping-display-value" fxFlex>{{ mappingDisplayValue(alarmsCountMapping)}}</span>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="editAlarmsCountMapping($event, alarmsCountMapping)"\n              matTooltip="{{\'tb.rulenode.edit-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button [fxShow]="!disabled"\n              [disabled]="isLoading$ | async"\n              mat-icon-button color="primary" type="button"\n              (click)="removeAlarmsCountMapping($index)"\n              matTooltip="{{\'tb.rulenode.remove-mapping\' | translate}}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <span [fxShow]="!mappings.length"\n        fxLayoutAlign="center center" [ngClass]="{\'disabled\': disabled, \'required\': required}"\n        class="no-data-found" translate>tb.rulenode.add-mapping-prompt</span>\n  <div style="padding-top: 20px;">\n    <button [fxShow]="!disabled" [disabled]="isLoading$ | async" type="button"\n            mat-raised-button color="primary" (click)="addAlarmsCountMapping($event)"\n            matTooltip="{{ \'tb.rulenode.add-mapping\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',styles:[":host .tb-alarms-count-mapping-table .body{padding-left:5px;padding-right:5px;max-height:300px;overflow:auto}:host .tb-alarms-count-mapping-table .body .row{padding:0 0 0 5px;margin:5px 5px 5px 0}:host .tb-alarms-count-mapping-table .body .cell{padding-left:5px;padding-right:5px}:host .tb-alarms-count-mapping-table .body .cell.tb-alarms-count-mapping-display-value{font-size:14px;line-height:16px;color:#000000b3}:host .tb-alarms-count-mapping-table span.no-data-found{position:relative;height:40px;text-transform:uppercase;display:flex}:host .tb-alarms-count-mapping-table span.no-data-found.disabled{color:#00000061}:host .tb-alarms-count-mapping-table span.no-data-found.required{color:#dd2c00}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:re.TranslateService},{type:t.Injector},{type:A.MillisecondsToTimeStringPipe},{type:Ft.MatDialog}]},propDecorators:{disabled:[{type:m}],required:[{type:m}]}});const Or=[K.required,K.min(1),K.max(2147483647)];class Ur extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.aggPeriodTimeUnits=[$t.MINUTES,$t.HOURS,$t.DAYS],this.timeUnits=Object.keys($t),this.timeUnitsTranslationMap=Yt}configForm(){return this.alarmsCountConfigForm}onConfigurationSet(e){this.alarmsCountConfigForm=this.fb.group({periodValue:[e?e.periodValue:null,Or],periodTimeUnit:[e?e.periodTimeUnit:null,[K.required]],outMsgType:[e?e.outMsgType:null,[K.required]],countAlarmsForChildEntities:[e?e.countAlarmsForChildEntities:null,[]],parentEntitiesQuery:this.fb.group({type:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.type:null,[K.required]],rootEntityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.rootEntityId:null,[]],relationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.relationsQuery:null,[]],entityId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityId:null,[]],entityGroupId:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.entityGroupId:null,[]],childRelationsQuery:[e&&e.parentEntitiesQuery?e.parentEntitiesQuery.childRelationsQuery:null,[]]}),alarmsCountMappings:[e?e.alarmsCountMappings:null,[K.required]]})}validatorTriggers(){return["parentEntitiesQuery.type","countAlarmsForChildEntities"]}updateValidators(e,t){const n=this.alarmsCountConfigForm.get("parentEntitiesQuery"),o=n.get("type").value,r=this.alarmsCountConfigForm.get("countAlarmsForChildEntities").value;if(e&&"parentEntitiesQuery.type"===t){const e={type:o};"relationsQuery"===o?(e.rootEntityId=null,e.relationsQuery=Ie(An),r&&(e.childRelationsQuery=Ie(An))):"single"===o?(e.entityId=null,r&&(e.childRelationsQuery=Ie(An))):"group"===o&&(e.entityGroupId=null),n.reset(e,{emitEvent:!1})}n.get("rootEntityId").setValidators([]),n.get("relationsQuery").setValidators([]),n.get("entityId").setValidators([]),n.get("entityGroupId").setValidators([]),n.get("childRelationsQuery").setValidators([]),"relationsQuery"===o?(n.get("rootEntityId").setValidators([K.required]),n.get("relationsQuery").setValidators([K.required]),r&&n.get("childRelationsQuery").setValidators([K.required])):"single"===o?(n.get("entityId").setValidators([K.required]),r&&n.get("childRelationsQuery").setValidators([K.required])):"group"===o&&n.get("entityGroupId").setValidators([K.required]),n.get("rootEntityId").updateValueAndValidity({emitEvent:e}),n.get("relationsQuery").updateValueAndValidity({emitEvent:e}),n.get("entityId").updateValueAndValidity({emitEvent:e}),n.get("entityGroupId").updateValueAndValidity({emitEvent:e}),n.get("childRelationsQuery").updateValueAndValidity({emitEvent:e})}prepareOutputConfig(e){return e.parentEntitiesQuery=qn(e.parentEntitiesQuery),e}}e("AlarmsCountConfigComponent",Ur),Ur.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ur,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Ur.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Ur,selector:"tb-analytics-node-alarms-count-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="alarmsCountConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery" [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                     style="padding-top: 16px; padding-bottom: 16px;">\n      <mat-radio-button [value]="\'single\'" color="primary">\n        <span translate>tb.rulenode.single-entity</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'group\'" color="primary">\n        <span translate>tb.rulenode.group-of-entities</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n        <span translate>tb.rulenode.relations-query</span>\n      </mat-radio-button>\n    </mat-radio-group>\n    <section *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n             fxLayout="column">\n      <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n      <tb-entity-select\n        required\n        formControlName="rootEntityId">\n      </tb-entity-select>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="relationsQuery">\n      </tb-relations-query-config>\n    </section>\n    <tb-entity-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n      required\n      formControlName="entityId">\n    </tb-entity-select>\n    <tb-entity-group-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n      required\n      formControlName="entityGroupId"\n      placeholderText="entity-group.select-entity-group"\n      notFoundText="entity-group.no-entity-groups-matching"\n      requiredText="entity-group.target-entity-group-required">\n    </tb-entity-group-select>\n  </mat-expansion-panel>\n  <mat-checkbox formControlName="countAlarmsForChildEntities" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.count-alarms-for-child-entities\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery"\n                       *ngIf="alarmsCountConfigForm.get(\'countAlarmsForChildEntities\').value &&\n                              (alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                               alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\')"\n                       [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n    <tb-relations-query-config\n      style="padding-bottom: 15px;"\n      formControlName="childRelationsQuery">\n    </tb-relations-query-config>\n  </mat-expansion-panel>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.alarms-count-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-alarms-count-mapping-table\n      required\n      formControlName="alarmsCountMappings"\n      style="padding-bottom: 15px;">\n    </tb-alarms-count-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:He.EntitySelectComponent,selector:"tb-entity-select",inputs:["allowedEntityTypes","useAliasEntityTypes","operation","required","disabled"]},{kind:"component",type:ze.EntityGroupSelectComponent,selector:"tb-entity-group-select",inputs:["allowedGroupTypes","excludeGroupTypes","defaultGroupType","excludeGroupIds","excludeGroupAll","placeholderText","notFoundText","requiredText","ownerId","originator","required","disabled"],outputs:["currentGroupType","currentGroupInfo"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"directive",type:ft.MatRadioGroup,selector:"mat-radio-group",exportAs:["matRadioGroup"]},{kind:"component",type:ft.MatRadioButton,selector:"mat-radio-button",inputs:["disableRipple","tabIndex"],exportAs:["matRadioButton"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:H.FormGroupName,selector:"[formGroupName]",inputs:["formGroupName"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:vo,selector:"tb-relations-query-config",inputs:["disabled","required"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"component",type:Rr,selector:"tb-alarms-count-mapping-table",inputs:["disabled","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Ur,decorators:[{type:n,args:[{selector:"tb-analytics-node-alarms-count-config",template:'<section [formGroup]="alarmsCountConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="alarmsCountConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery" [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-radio-group formControlName="type" fxLayout="row" fxLayoutGap="8px"\n                     style="padding-top: 16px; padding-bottom: 16px;">\n      <mat-radio-button [value]="\'single\'" color="primary">\n        <span translate>tb.rulenode.single-entity</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'group\'" color="primary">\n        <span translate>tb.rulenode.group-of-entities</span>\n      </mat-radio-button>\n      <mat-radio-button [value]="\'relationsQuery\'" color="primary">\n        <span translate>tb.rulenode.relations-query</span>\n      </mat-radio-button>\n    </mat-radio-group>\n    <section *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\'"\n             fxLayout="column">\n      <label translate class="tb-title tb-required">tb.rulenode.root-entity</label>\n      <tb-entity-select\n        required\n        formControlName="rootEntityId">\n      </tb-entity-select>\n      <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n      <tb-relations-query-config\n        style="padding-bottom: 15px;"\n        formControlName="relationsQuery">\n      </tb-relations-query-config>\n    </section>\n    <tb-entity-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\'"\n      required\n      formControlName="entityId">\n    </tb-entity-select>\n    <tb-entity-group-select\n      *ngIf="alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'group\'"\n      required\n      formControlName="entityGroupId"\n      placeholderText="entity-group.select-entity-group"\n      notFoundText="entity-group.no-entity-groups-matching"\n      requiredText="entity-group.target-entity-group-required">\n    </tb-entity-group-select>\n  </mat-expansion-panel>\n  <mat-checkbox formControlName="countAlarmsForChildEntities" style="padding-bottom: 16px;">\n    {{ \'tb.rulenode.count-alarms-for-child-entities\' | translate }}\n  </mat-checkbox>\n  <mat-expansion-panel formGroupName="parentEntitiesQuery"\n                       *ngIf="alarmsCountConfigForm.get(\'countAlarmsForChildEntities\').value &&\n                              (alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'relationsQuery\' ||\n                               alarmsCountConfigForm.get(\'parentEntitiesQuery.type\').value === \'single\')"\n                       [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.child-entities</mat-panel-title>\n    </mat-expansion-panel-header>\n    <label translate class="tb-title tb-required">tb.rulenode.relations-query</label>\n    <tb-relations-query-config\n      style="padding-bottom: 15px;"\n      formControlName="childRelationsQuery">\n    </tb-relations-query-config>\n  </mat-expansion-panel>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.alarms-count-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-alarms-count-mapping-table\n      required\n      formControlName="alarmsCountMappings"\n      style="padding-bottom: 15px;">\n    </tb-alarms-count-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Br extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.aggPeriodTimeUnits=[$t.MINUTES,$t.HOURS,$t.DAYS],this.timeUnits=Object.keys($t),this.timeUnitsTranslationMap=Yt,this.propagationEntityTypes=[C.DEVICE,C.ASSET,C.ENTITY_VIEW,C.TENANT,C.CUSTOMER,C.USER,C.DASHBOARD,C.RULE_CHAIN,C.RULE_NODE,C.ENTITY_GROUP,C.CONVERTER,C.INTEGRATION,C.SCHEDULER_EVENT,C.BLOB_ENTITY]}configForm(){return this.alarmsCountConfigForm}onConfigurationSet(e){this.alarmsCountConfigForm=this.fb.group({alarmsCountMappings:[e?e.alarmsCountMappings:null,[K.required]],countAlarmsForPropagationEntities:[!e||e.alarmsCountMappings,[K.required]],propagationEntityTypes:[e&&e.propagationEntityTypes?e.propagationEntityTypes:[],[]],outMsgType:[e?e.outMsgType:null,[K.required]]})}}e("AlarmsCountV2ConfigComponent",Br),Br.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Br,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Br.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Br,selector:"tb-analytics-node-alarms-count-v2-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="alarmsCountConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <mat-checkbox formControlName="countAlarmsForPropagationEntities">\n    {{ \'tb.rulenode.count-alarms-for-propagation-entities\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.count-alarms-for-propagation-entities-info</div>\n  <div fxFlex *ngIf="alarmsCountConfigForm.get(\'countAlarmsForPropagationEntities\').value">\n    <label class="tb-title no-padding">{{ \'tb.rulenode.propagation-entity-types\' | translate }}</label>\n    <tb-entity-type-list fxFlex\n                         formControlName="propagationEntityTypes"\n                         [allowedEntityTypes]="propagationEntityTypes"\n                         [ignoreAuthorityFilter]="true"\n    >\n    </tb-entity-type-list>\n    <div class="tb-hint" translate>tb.rulenode.propagation-entity-types-info</div>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.alarms-count-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-alarms-count-mapping-table\n      required\n      formControlName="alarmsCountMappings"\n      style="padding-bottom: 15px;">\n    </tb-alarms-count-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"],dependencies:[{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:xt.EntityTypeListComponent,selector:"tb-entity-type-list",inputs:["required","additionalClasses","appearance","label","floatLabel","disabled","subscriptSizing","allowedEntityTypes","emptyInputPlaceholder","filledInputPlaceholder","ignoreAuthorityFilter"]},{kind:"component",type:Me.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"component",type:Rr,selector:"tb-alarms-count-mapping-table",inputs:["disabled","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Br,decorators:[{type:n,args:[{selector:"tb-analytics-node-alarms-count-v2-config",template:'<section [formGroup]="alarmsCountConfigForm" fxLayout="column">\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n  <mat-checkbox formControlName="countAlarmsForPropagationEntities">\n    {{ \'tb.rulenode.count-alarms-for-propagation-entities\' | translate }}\n  </mat-checkbox>\n  <div class="tb-hint" translate>tb.rulenode.count-alarms-for-propagation-entities-info</div>\n  <div fxFlex *ngIf="alarmsCountConfigForm.get(\'countAlarmsForPropagationEntities\').value">\n    <label class="tb-title no-padding">{{ \'tb.rulenode.propagation-entity-types\' | translate }}</label>\n    <tb-entity-type-list fxFlex\n                         formControlName="propagationEntityTypes"\n                         [allowedEntityTypes]="propagationEntityTypes"\n                         [ignoreAuthorityFilter]="true"\n    >\n    </tb-entity-type-list>\n    <div class="tb-hint" translate>tb.rulenode.propagation-entity-types-info</div>\n  </div>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.alarms-count-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-alarms-count-mapping-table\n      required\n      formControlName="alarmsCountMappings"\n      style="padding-bottom: 15px;">\n    </tb-alarms-count-mapping-table>\n  </mat-expansion-panel>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class _r extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.directionTypes=Object.keys(v),this.directionTypeTranslations=S}configForm(){return this.aggregateLatestV2ConfigForm}onConfigurationSet(e){this.aggregateLatestV2ConfigForm=this.fb.group({direction:[e?e.direction:null,[K.required]],relationType:[e?e.relationType:null,[K.required]],deduplicationInSec:[e?e.deduplicationInSec:null,[K.required,K.min(10),K.max(2147483647)]],aggMappings:[e?e.aggMappings:null,[K.required]],outMsgType:[e?e.outMsgType:null,[K.required]]})}}e("AggregateLatestV2ConfigComponent",_r),_r.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:_r,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),_r.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:_r,selector:"tb-analytics-node-aggregate-latest-v2-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="aggregateLatestV2ConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="min-width: 100px;">\n    <mat-label translate>relation.direction</mat-label>\n    <mat-select formControlName="direction" required>\n      <mat-option *ngFor="let direction of directionTypes" [value]="direction">\n        {{ directionTypeTranslations.get(direction) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <tb-relation-type-autocomplete\n    required\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.deduplication-period-sec</mat-label>\n    <input type="number" step="1" min="10" max="2147483647" matInput formControlName="deduplicationInSec" required>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'required\')">\n      {{ \'tb.rulenode.deduplication-period-sec-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'min\')">\n      {{ \'tb.rulenode.deduplication-period-sec-range\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'max\')">\n      {{ \'tb.rulenode.deduplication-period-sec-range\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.agg-latest-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-agg-latest-mapping-table\n      required\n      formControlName="aggMappings"\n      [tbelFilterFunctionOnly]="true"\n      style="padding-bottom: 15px;">\n    </tb-agg-latest-mapping-table>\n  </mat-expansion-panel>\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"],dependencies:[{kind:"directive",type:W.NgForOf,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{kind:"directive",type:W.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:De.RelationTypeAutocompleteComponent,selector:"tb-relation-type-autocomplete",inputs:["showLabel","additionalClasses","appearance","required","disabled","subscriptSizing"]},{kind:"directive",type:ee.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:te.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:te.MatLabel,selector:"mat-label"},{kind:"directive",type:te.MatError,selector:"mat-error, [matError]",inputs:["id"]},{kind:"component",type:le.MatSelect,selector:"mat-select",inputs:["disabled","disableRipple","tabIndex","hideSingleSelectionIndicator"],exportAs:["matSelect"]},{kind:"component",type:se.MatOption,selector:"mat-option",exportAs:["matOption"]},{kind:"component",type:pe.MatExpansionPanel,selector:"mat-expansion-panel",inputs:["disabled","expanded","hideToggle","togglePosition"],outputs:["opened","closed","expandedChange","afterExpand","afterCollapse"],exportAs:["matExpansionPanel"]},{kind:"component",type:pe.MatExpansionPanelHeader,selector:"mat-expansion-panel-header",inputs:["tabIndex","expandedHeight","collapsedHeight"]},{kind:"directive",type:pe.MatExpansionPanelTitle,selector:"mat-panel-title"},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:oe.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:H.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:H.NumberValueAccessor,selector:"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]"},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.MinValidator,selector:"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",inputs:["min"]},{kind:"directive",type:H.MaxValidator,selector:"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",inputs:["max"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:re.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]},{kind:"component",type:ko,selector:"tb-output-message-type-autocomplete",inputs:["subscriptSizing","disabled","required"]},{kind:"component",type:Gr,selector:"tb-agg-latest-mapping-table",inputs:["tbelFilterFunctionOnly","disabled","required"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:_r,decorators:[{type:n,args:[{selector:"tb-analytics-node-aggregate-latest-v2-config",template:'<section [formGroup]="aggregateLatestV2ConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block" style="min-width: 100px;">\n    <mat-label translate>relation.direction</mat-label>\n    <mat-select formControlName="direction" required>\n      <mat-option *ngFor="let direction of directionTypes" [value]="direction">\n        {{ directionTypeTranslations.get(direction) | translate }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <tb-relation-type-autocomplete\n    required\n    formControlName="relationType">\n  </tb-relation-type-autocomplete>\n  <mat-form-field fxFlex class="mat-block">\n    <mat-label translate>tb.rulenode.deduplication-period-sec</mat-label>\n    <input type="number" step="1" min="10" max="2147483647" matInput formControlName="deduplicationInSec" required>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'required\')">\n      {{ \'tb.rulenode.deduplication-period-sec-required\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'min\')">\n      {{ \'tb.rulenode.deduplication-period-sec-range\' | translate }}\n    </mat-error>\n    <mat-error *ngIf="aggregateLatestV2ConfigForm.get(\'deduplicationInSec\').hasError(\'max\')">\n      {{ \'tb.rulenode.deduplication-period-sec-range\' | translate }}\n    </mat-error>\n  </mat-form-field>\n  <mat-expansion-panel [expanded]="true">\n    <mat-expansion-panel-header>\n      <mat-panel-title translate>tb.rulenode.agg-latest-mappings</mat-panel-title>\n    </mat-expansion-panel-header>\n    <tb-agg-latest-mapping-table\n      required\n      formControlName="aggMappings"\n      [tbelFilterFunctionOnly]="true"\n      style="padding-bottom: 15px;">\n    </tb-agg-latest-mapping-table>\n  </mat-expansion-panel>\n  <tb-output-message-type-autocomplete required formControlName="outMsgType"></tb-output-message-type-autocomplete>\n</section>\n',styles:[":host .mat-expansion-panel{margin:0 6px 16px}\n"]}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class Hr{}e("RulenodeCoreConfigAnalyticsModule",Hr),Hr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Hr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),Hr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:Hr,declarations:[Mr,Er,Gr,Vr,Pr,Rr,Ur,Br,_r],imports:[X,M,qo],exports:[Mr,Vr,Ur,Br,_r]}),Hr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Hr,imports:[X,M,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Hr,decorators:[{type:d,args:[{declarations:[Mr,Er,Gr,Vr,Pr,Rr,Ur,Br,_r],imports:[X,M,qo],exports:[Mr,Vr,Ur,Br,_r]}]}]});class Kr extends g{constructor(e,t){super(e),this.store=e,this.fb=t,this.entityType=C}configForm(){return this.ruleChainInputConfigForm}onConfigurationSet(e){this.ruleChainInputConfigForm=this.fb.group({forwardMsgToDefaultRuleChain:[!!e&&e?.forwardMsgToDefaultRuleChain,[]],ruleChainId:[e?e.ruleChainId:null,[K.required]]})}}e("RuleChainInputComponent",Kr),Kr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Kr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),Kr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:Kr,selector:"tb-flow-node-rule-chain-input-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="ruleChainInputConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.forward-msg-default-rule-chain-tooltip\' | translate }}"\n         class="tb-form-row no-border">\n      <mat-slide-toggle class="mat-slide" formControlName="forwardMsgToDefaultRuleChain">\n        {{ \'tb.rulenode.forward-msg-default-rule-chain\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <tb-entity-autocomplete required\n                            [excludeEntityIds]="[ruleChainId]"\n                            [entityType]="entityType.RULE_CHAIN"\n                            [entitySubtype]="ruleChainType"\n                            formControlName="ruleChainId">\n    </tb-entity-autocomplete>\n  </div>\n</section>\n',dependencies:[{kind:"component",type:rt.EntityAutocompleteComponent,selector:"tb-entity-autocomplete",inputs:["entityType","entitySubtype","excludeEntityIds","labelText","requiredText","useFullEntityId","appearance","required","disabled"],outputs:["entityChanged"]},{kind:"component",type:ne.MatSlideToggle,selector:"mat-slide-toggle",inputs:["disabled","disableRipple","color","tabIndex"],exportAs:["matSlideToggle"]},{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:H.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"component",type:ye.HintTooltipIconComponent,selector:"[tb-hint-tooltip-icon]",inputs:["tb-hint-tooltip-icon","tooltipPosition","hintIcon"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Kr,decorators:[{type:n,args:[{selector:"tb-flow-node-rule-chain-input-config",template:'<section [formGroup]="ruleChainInputConfigForm" fxLayout="column">\n  <div class="tb-form-panel no-padding no-border">\n    <div tb-hint-tooltip-icon="{{ \'tb.rulenode.forward-msg-default-rule-chain-tooltip\' | translate }}"\n         class="tb-form-row no-border">\n      <mat-slide-toggle class="mat-slide" formControlName="forwardMsgToDefaultRuleChain">\n        {{ \'tb.rulenode.forward-msg-default-rule-chain\' | translate }}\n      </mat-slide-toggle>\n    </div>\n    <tb-entity-autocomplete required\n                            [excludeEntityIds]="[ruleChainId]"\n                            [entityType]="entityType.RULE_CHAIN"\n                            [entitySubtype]="ruleChainType"\n                            formControlName="ruleChainId">\n    </tb-entity-autocomplete>\n  </div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class zr extends g{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.ruleChainOutputConfigForm}onConfigurationSet(e){this.ruleChainOutputConfigForm=this.fb.group({})}}e("RuleChainOutputComponent",zr),zr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:zr,deps:[{token:_.Store},{token:H.UntypedFormBuilder}],target:t.ɵɵFactoryTarget.Component}),zr.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:zr,selector:"tb-flow-node-rule-chain-output-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="ruleChainOutputConfigForm" fxLayout="column">\n  <div innerHTML="{{ \'tb.rulenode.output-node-name-hint\' | translate }}"></div>\n</section>\n',dependencies:[{kind:"directive",type:oe.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:H.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:H.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"pipe",type:re.TranslatePipe,name:"translate"}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:zr,decorators:[{type:n,args:[{selector:"tb-flow-node-rule-chain-output-config",template:'<section [formGroup]="ruleChainOutputConfigForm" fxLayout="column">\n  <div innerHTML="{{ \'tb.rulenode.output-node-name-hint\' | translate }}"></div>\n</section>\n'}]}],ctorParameters:function(){return[{type:_.Store},{type:H.UntypedFormBuilder}]}});class jr{}e("RuleNodeCoreConfigFlowModule",jr),jr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:jr,deps:[],target:t.ɵɵFactoryTarget.NgModule}),jr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:jr,declarations:[Kr,zr],imports:[X,M,qo],exports:[Kr,zr]}),jr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:jr,imports:[X,M,qo]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:jr,decorators:[{type:d,args:[{declarations:[Kr,zr],imports:[X,M,qo],exports:[Kr,zr]}]}]});class Qr{constructor(e){!function(e){e.setTranslation("en_US",{tb:{rulenode:{id:"Id","additional-info":"Additional Info","advanced-settings":"Advanced settings","create-entity-if-not-exists":"Create new entity if it doesn't exist","create-entity-if-not-exists-hint":"If enabled, a new entity with specified parameters will be created unless it already exists. Existing entities will be used as is for relation.","select-device-connectivity-event":"Select device connectivity event","entity-name-pattern":"Name pattern","device-name-pattern":"Device name","asset-name-pattern":"Asset name","entity-view-name-pattern":"Entity view name","customer-title-pattern":"Customer title","dashboard-name-pattern":"Dashboard title","user-name-pattern":"User email","edge-name-pattern":"Edge name","entity-name-pattern-required":"Name pattern is required","entity-name-pattern-hint":"Name pattern field support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","copy-message-type":"Copy message type","entity-type-pattern":"Type pattern","entity-type-pattern-required":"Type pattern is required","message-type-value":"Message type value","message-type-value-required":"Message type value is required","message-type-value-max-length":"Message type value should be less than 256","output-message-type":"Output message type","entity-cache-expiration":"Entities cache expiration time (sec)","entity-cache-expiration-hint":"Specifies maximum time interval allowed to store found entity records. 0 value means that records will never expire.","entity-cache-expiration-required":"Entities cache expiration time is required.","entity-cache-expiration-range":"Entities cache expiration time should be greater than or equal to 0.","customer-name-pattern":"Customer title","customer-name-pattern-required":"Customer title is required","customer-name-pattern-hint":"Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","create-customer-if-not-exists":"Create new customer if it doesn't exist","unassign-from-customer":"Unassign from specific customer if originator is dashboard","unassign-from-customer-tooltip":"Only dashboards can be assigned to multiple customers at once. \nIf the message originator is a dashboard, you need to explicitly specify the customer's title to unassign from.","customer-cache-expiration":"Customers cache expiration time (sec)","customer-cache-expiration-hint":"Specifies maximum time interval allowed to store found customer records. 0 value means that records will never expire.","customer-cache-expiration-required":"Customers cache expiration time is required.","customer-cache-expiration-range":"Customers cache expiration time should be greater than or equal to 0.","interval-start":"Interval start","interval-end":"Interval end","time-unit":"Time unit","fetch-mode":"Fetch mode","order-by-timestamp":"Order by timestamp",limit:"Limit","limit-hint":"Min limit value is 2, max - 1000. If you want to fetch a single entry, select fetch mode 'First' or 'Last'.","limit-required":"Limit is required.","limit-range":"Limit should be in a range from 2 to 1000.","time-unit-milliseconds":"Milliseconds","time-unit-seconds":"Seconds","time-unit-minutes":"Minutes","time-unit-hours":"Hours","time-unit-days":"Days","time-value-range":"Allowing range from 1 to 2147483647.","start-interval-value-required":"Interval start is required.","end-interval-value-required":"Interval end is required.",filter:"Filter",switch:"Switch","math-templatization-tooltip":"This field support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","add-message-type":"Add message type","select-message-types-required":"At least one message type should be selected.","select-message-types":"Select message types","no-message-types-found":"No message types found","no-message-type-matching":"'{{messageType}}' not found.","create-new-message-type":"Create a new one.","message-types-required":"Message types are required.","client-attributes":"Client attributes","shared-attributes":"Shared attributes","server-attributes":"Server attributes","attributes-keys":"Attributes keys","attributes-keys-required":"Attributes keys are required","attributes-scope":"Attributes scope","attributes-scope-value":"Attributes scope value","attributes-scope-value-copy":"Copy attributes scope value","attributes-scope-hint":"Use the 'scope' metadata key to dynamically set the attribute scope per message. If provided, this overrides the scope set in the configuration.","notify-device":"Force notification to the device","send-attributes-updated-notification":"Send attributes updated notification","send-attributes-updated-notification-hint":"Send notification about updated attributes as a separate message to the rule engine queue.","send-attributes-deleted-notification":"Send attributes deleted notification","send-attributes-deleted-notification-hint":"Send notification about deleted attributes as a separate message to the rule engine queue.","update-attributes-only-on-value-change":"Save attributes only if the value changes","update-attributes-only-on-value-change-hint":"Updates the attributes on every incoming message disregarding if their value has changed. Increases API usage and reduces performance.","update-attributes-only-on-value-change-hint-enabled":"Updates the attributes only if their value has changed. If the value is not changed, no update to the attribute timestamp nor attribute change notification will be sent.","fetch-credentials-to-metadata":"Fetch credentials to metadata","notify-device-on-update-hint":"If enabled, force notification to the device about shared attributes update. If disabled, the notification behavior is controlled by the 'notifyDevice' parameter from the incoming message metadata. To turn off the notification, the message metadata must contain the 'notifyDevice' parameter set to 'false'. Any other case will trigger the notification to the device.","notify-device-on-delete-hint":"If enabled, force notification to the device about shared attributes removal. If disabled, the notification behavior is controlled by the 'notifyDevice' parameter from the incoming message metadata. To turn on the notification, the message metadata must contain the 'notifyDevice' parameter set to 'true'. In any other case, the notification will not be triggered to the device.","latest-timeseries":"Latest time series data keys","timeseries-keys":"Time series keys","timeseries-keys-required":"At least one time series key should be selected.","add-timeseries-key":"Add time series key","add-message-field":"Add message field","relation-search-parameters":"Relation search parameters","relation-parameters":"Relation parameters","add-metadata-field":"Add metadata field","data-keys":"Message field names","copy-from":"Copy from","data-to-metadata":"Data to metadata","metadata-to-data":"Metadata to data","use-regular-expression-hint":"Use regular expression to copy keys by pattern.\n\nTips & tricks:\nPress 'Enter' to complete field name input.\nPress 'Backspace' to delete field name. Multiple field names supported.",interval:"Interval","interval-required":"Interval is required","interval-hint":"Deduplication interval in seconds.","interval-min-error":"Min allowed value is 1","max-pending-msgs":"Max pending messages","max-pending-msgs-hint":"Maximum number of messages that are stored in memory for each unique deduplication id.","max-pending-msgs-required":"Max pending messages is required","max-pending-msgs-max-error":"Max allowed value is 1000","max-pending-msgs-min-error":"Min allowed value is 1","max-retries":"Max retries","max-retries-required":"Max retries is required","max-retries-hint":"Maximum number of retries to push the deduplicated messages into the queue. 10 seconds delay is used between retries","max-retries-max-error":"Max allowed value is 100","max-retries-min-error":"Min allowed value is 0",strategy:"Strategy","strategy-required":"Strategy is required","strategy-all-hint":"Return all messages that arrived during deduplication period as a single JSON array message. Where each element represents object with msg and metadata inner properties.","strategy-first-hint":"Return first message that arrived during deduplication period.","strategy-last-hint":"Return last message that arrived during deduplication period.",first:"First",last:"Last",all:"All","output-msg-type-hint":"The message type of the deduplication result.","queue-name-hint":"The queue name where the deduplication result will be published.",keys:"Keys","keys-required":"Keys are required","rename-keys-in":"Rename keys in",data:"Data",message:"Message",metadata:"Metadata","current-key-name":"Current key name","key-name-required":"Key name is required","new-key-name":"New key name","new-key-name-required":"New key name is required","metadata-keys":"Metadata field names","json-path-expression":"JSON path expression","json-path-expression-required":"JSON path expression is required","json-path-expression-hint":"JSONPath specifies a path to an element or a set of elements in a JSON structure. '$' represents the root object or array.","relations-query":"Relations query","device-relations-query":"Device relations query","max-relation-level":"Max relation level","max-relation-level-error":"Value should be greater than 0 or unspecified.","relation-type":"Relation type","relation-type-pattern":"Relation type pattern","relation-type-pattern-required":"Relation type pattern is required","relation-types-list":"Relation types to propagate","relation-types-list-hint":"If Propagate relation types are not selected, alarms will be propagated without filtering by relation type.","unlimited-level":"Unlimited level","latest-telemetry":"Latest telemetry","add-telemetry-key":"Add telemetry key","delete-from":"Delete from","use-regular-expression-delete-hint":"Use regular expression to delete keys by pattern.\n\nTips & tricks:\nPress 'Enter' to complete field name input.\nPress 'Backspace' to delete field name.\nMultiple field names supported.","fetch-into":"Fetch into","attr-mapping":"Attributes mapping:","source-attribute":"Source attribute key","source-attribute-required":"Source attribute key is required.","source-telemetry":"Source telemetry key","source-telemetry-required":"Source telemetry key is required.","target-key":"Target key","target-key-required":"Target key is required.","attr-mapping-required":"At least one mapping entry should be specified.","fields-mapping":"Fields mapping","relations-query-config-direction-suffix":"originator","profile-name":"Profile name","fetch-circle-parameter-info-from-metadata-hint":'Metadata field \'{{perimeterKeyName}}\' should be defined in next format: {"latitude":48.196, "longitude":24.6532, "radius":100.0, "radiusUnit":"METER"}',"fetch-poligon-parameter-info-from-metadata-hint":"Metadata field '{{perimeterKeyName}}' should be defined in next format: [[48.19736,24.65235],[48.19800,24.65060],...,[48.19849,24.65420]]","short-templatization-tooltip":"Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","fields-mapping-required":"At least one field mapping should be specified.","at-least-one-field-required":"At least one input field must have a value(s) provided.","originator-fields-sv-map-hint":"Target key fields support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","sv-map-hint":"Only target key fields support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","source-field":"Source field","source-field-required":"Source field is required.","originator-source":"Originator source","new-originator":"New originator","originator-customer":"Customer","originator-tenant":"Tenant","originator-related":"Related entity","originator-alarm-originator":"Alarm Originator","originator-entity":"Entity by name pattern","clone-message":"Clone message","no-owners-matching":"No owners matching '{{entity}}' were found.","owner-required":"Owner is required.",owner:"Owner","owner-of-entity-group":"Owner of entity group","entity-group":"Entity group",transform:"Transform","default-ttl":"Default TTL in seconds","default-ttl-required":"Default TTL is required.","default-ttl-hint":"Rule node will fetch Time-to-Live (TTL) value from the message metadata. If no value is present, it defaults to the TTL specified in the configuration. If the value is set to 0, the TTL from the tenant profile configuration will be applied.","min-default-ttl-message":"Only 0 minimum TTL is allowed.","message-count":"Message count (0 - unlimited)","message-count-required":"Message count is required.","min-message-count-message":"Only 0 minimum message count is allowed.","period-seconds":"Period in seconds","period-seconds-required":"Period is required.","use-metadata-period-in-seconds-patterns":"Use period in seconds pattern","use-metadata-period-in-seconds-patterns-hint":"If selected, rule node use period in seconds interval pattern from message metadata or data assuming that intervals are in the seconds.","period-in-seconds-pattern":"Period in seconds pattern","period-in-seconds-pattern-required":"Period in seconds pattern is required","min-period-seconds-message":"Only 60 seconds minimum period is allowed.",originator:"Originator","message-body":"Message body","message-metadata":"Message metadata",generate:"Generate","test-generator-function":"Test generator function",generator:"Generator","test-filter-function":"Test filter function","test-switch-function":"Test switch function","parent-entity":"Parent entities","include-root-entity-to-parent-entities":"Include root entity to the parent entities list","test-transformer-function":"Test transformer function",transformer:"Transformer","alarm-create-condition":"Alarm create condition","test-condition-function":"Test condition function","alarm-clear-condition":"Alarm clear condition","alarm-details-builder":"Alarm details builder","test-details-function":"Test details function","alarm-type":"Alarm type","select-entity-types":"Select entity types","alarm-type-required":"Alarm type is required.","alarm-severity":"Alarm severity","alarm-severity-required":"Alarm severity is required","alarm-severity-pattern":"Alarm severity pattern","alarm-status-filter":"Alarm status filter","alarm-status-list-empty":"Alarm status list is empty","no-alarm-status-matching":"No alarm status matching were found.","no-alarm-severity-matching":"No alarm severity matching were found.",propagate:"Propagate alarm to related entities","propagate-to-owner":"Propagate alarm to entity owner (Customer or Tenant)","propagate-to-owner-hierarchy":"Propagate alarm to entity owners hierarchy","propagate-to-tenant":"Propagate alarm to Tenant",condition:"Condition",details:"Details","to-string":"To string","test-to-string-function":"Test to string function","from-template":"From","from-template-required":"From is required","message-to-metadata":"Message to metadata","metadata-to-message":"Metadata to message","from-message":"From message","from-metadata":"From metadata","to-template":"To","to-template-required":"To Template is required","mail-address-list-template-hint":'Comma separated address list, use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body',"cc-template":"Cc","bcc-template":"Bcc","subject-template":"Subject","subject-template-required":"Subject Template is required","body-template":"Body","body-template-required":"Body Template is required","dynamic-mail-body-type":"Dynamic mail body type","mail-body-type":"Mail body type","body-type-template":"Body type template","reply-routing-configuration":"Reply Routing Configuration","reply-routing-configuration-hint":"These configuration parameters specify the metadata key names used to identify the service and request for sending a reply back.","request-id-metadata-attribute":"Request Id","service-id-metadata-attribute":"Service Id","session-id-metadata-attribute":"Session Id","timeout-sec":"Timeout in seconds","timeout-required":"Timeout is required","min-timeout-message":"Only 0 minimum timeout value is allowed.","endpoint-url-pattern":"Endpoint URL pattern","endpoint-url-pattern-required":"Endpoint URL pattern is required","request-method":"Request method","use-simple-client-http-factory":"Use simple client HTTP factory","ignore-request-body":"Without request body","parse-to-plain-text":"Parse to plain text","parse-to-plain-text-hint":'If selected, request body message payload will be transformed from JSON string to plain text, e.g. msg = "Hello,\\t\\"world\\"" will be parsed to Hello, "world"',"read-timeout":"Read timeout in millis","read-timeout-hint":"The value of 0 means an infinite timeout","max-parallel-requests-count":"Max number of parallel requests","max-parallel-requests-count-hint":"The value of 0 specifies no limit in parallel processing",headers:"Headers","headers-hint":'Use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body in header/value fields',header:"Header","header-required":"Header is required",value:"Value","value-required":"Value is required","topic-pattern":"Topic pattern","key-pattern":"Key pattern","key-pattern-hint":"Optional. If a valid partition number is specified, it will be used when sending the record. If no partition is specified, the key will be used instead. If neither is specified, a partition will be assigned in a round-robin fashion.","topic-pattern-required":"Topic pattern is required",topic:"Topic","topic-required":"Topic is required","bootstrap-servers":"Bootstrap servers","bootstrap-servers-required":"Bootstrap servers value is required","other-properties":"Other properties",key:"Key","key-required":"Key is required",retries:"Automatically retry times if fails","min-retries-message":"Only 0 minimum retries is allowed.","batch-size-bytes":"Produces batch size in bytes","min-batch-size-bytes-message":"Only 0 minimum batch size is allowed.","linger-ms":"Time to buffer locally (ms)","min-linger-ms-message":"Only 0 ms minimum value is allowed.","buffer-memory-bytes":"Client buffer max size in bytes","min-buffer-memory-message":"Only 0 minimum buffer size is allowed.",acks:"Number of acknowledgments","key-serializer":"Key serializer","key-serializer-required":"Key serializer is required","value-serializer":"Value serializer","value-serializer-required":"Value serializer is required","topic-arn-pattern":"Topic ARN pattern","topic-arn-pattern-required":"Topic ARN pattern is required","aws-access-key-id":"AWS Access Key ID","aws-access-key-id-required":"AWS Access Key ID is required","aws-secret-access-key":"AWS Secret Access Key","aws-secret-access-key-required":"AWS Secret Access Key is required","aws-region":"AWS Region","aws-region-required":"AWS Region is required","exchange-name-pattern":"Exchange name pattern","routing-key-pattern":"Routing key pattern","message-properties":"Message properties",host:"Host","host-required":"Host is required",port:"Port","port-required":"Port is required","port-range":"Port should be in a range from 1 to 65535.","virtual-host":"Virtual host",username:"Username",password:"Password","automatic-recovery":"Automatic recovery","connection-timeout-ms":"Connection timeout (ms)","min-connection-timeout-ms-message":"Only 0 ms minimum value is allowed.","handshake-timeout-ms":"Handshake timeout (ms)","min-handshake-timeout-ms-message":"Only 0 ms minimum value is allowed.","client-properties":"Client properties","queue-url-pattern":"Queue URL pattern","queue-url-pattern-required":"Queue URL pattern is required","delay-seconds":"Delay (seconds)","min-delay-seconds-message":"Only 0 seconds minimum value is allowed.","max-delay-seconds-message":"Only 900 seconds maximum value is allowed.",name:"Name","name-required":"Name is required","queue-type":"Queue type","sqs-queue-standard":"Standard","sqs-queue-fifo":"FIFO","gcp-project-id":"GCP project ID","gcp-project-id-required":"GCP project ID is required","gcp-service-account-key":"GCP service account key file","gcp-service-account-key-required":"GCP service account key file is required","pubsub-topic-name":"Topic name","pubsub-topic-name-required":"Topic name is required","message-attributes":"Message attributes","message-attributes-hint":'Use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body in name/value fields',"connect-timeout":"Connection timeout (sec)","connect-timeout-required":"Connection timeout is required.","connect-timeout-range":"Connection timeout should be in a range from 1 to 200.","client-id":"Client ID","client-id-hint":'Optional. Leave empty for auto-generated Client ID. Be careful when specifying the Client ID. Majority of the MQTT brokers will not allow multiple connections with the same Client ID. To connect to such brokers, your mqtt Client ID must be unique. When platform is running in a micro-services mode, the copy of rule node is launched in each micro-service. This will automatically lead to multiple mqtt clients with the same ID and may cause failures of the rule node. To avoid such failures enable "Add Service ID as suffix to Client ID" option below.',"append-client-id-suffix":"Add Service ID as suffix to Client ID","client-id-suffix-hint":'Optional. Applied when "Client ID" specified explicitly. If selected then Service ID will be added to Client ID as a suffix. Helps to avoid failures when platform is running in a micro-services mode.',"device-id":"Device ID","device-id-required":"Device ID is required.","clean-session":"Clean session","enable-ssl":"Enable SSL",credentials:"Credentials","credentials-type":"Credentials type","credentials-type-required":"Credentials type is required.","credentials-anonymous":"Anonymous","credentials-basic":"Basic","credentials-pem":"PEM","credentials-pem-hint":"At least Server CA certificate file or a pair of Client certificate and Client private key files are required","credentials-sas":"Shared Access Signature","sas-key":"SAS Key","sas-key-required":"SAS Key is required.",hostname:"Hostname","hostname-required":"Hostname is required.","azure-ca-cert":"CA certificate file","username-required":"Username is required.","password-required":"Password is required.","ca-cert":"Server CA certificate file","private-key":"Client private key file",cert:"Client certificate file","no-file":"No file selected.","drop-file":"Drop a file or click to select a file to upload.","private-key-password":"Private key password","use-system-smtp-settings":"Use system SMTP settings","use-metadata-dynamic-interval":"Use dynamic interval","metadata-dynamic-interval-hint":"Interval start and end input fields support templatization. Note that the substituted template value should be set in milliseconds. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","use-metadata-interval-patterns-hint":"If selected, rule node use start and end interval patterns from message metadata or data assuming that intervals are in the milliseconds.","use-message-alarm-data":"Use message alarm data","overwrite-alarm-details":"Overwrite alarm details","use-alarm-severity-pattern":"Use alarm severity pattern","check-all-keys":"Check that all specified fields are present","check-all-keys-hint":"If selected, checks that all specified keys are present in the message data and metadata.","check-relation-to-specific-entity":"Check relation to specific entity","check-relation-to-specific-entity-tooltip":"If enabled, checks the presence of relation with a specific entity otherwise, checks the presence of relation with any entity. In both cases, relation lookup is based on configured direction and type.","check-relation-hint":"Checks existence of relation to specific entity or to any entity based on direction and relation type.","delete-relation-with-specific-entity":"Delete relation with specific entity","delete-relation-with-specific-entity-hint":"If enabled, will delete the relation with just one specific entity. Otherwise, the relation will be removed with all matching entities.","delete-relation-hint":"Deletes relation from the originator of the incoming message to the specified entity or list of entities based on direction and type.","remove-current-relations":"Remove current relations","remove-current-relations-hint":"Removes current relations from the originator of the incoming message based on direction and type.","change-originator-to-related-entity":"Change originator to related entity","change-originator-to-related-entity-hint":"Used to process submitted message as a message from another entity.","start-interval":"Interval start","end-interval":"Interval end","start-interval-required":"Interval start is required.","end-interval-required":"Interval end is required.","smtp-protocol":"Protocol","smtp-host":"SMTP host","smtp-host-required":"SMTP host is required.","smtp-port":"SMTP port","smtp-port-required":"You must supply a smtp port.","smtp-port-range":"SMTP port should be in a range from 1 to 65535.","timeout-msec":"Timeout ms","min-timeout-msec-message":"Only 0 ms minimum value is allowed.","enter-username":"Enter username","enter-password":"Enter password","enable-tls":"Enable TLS","group-name-pattern":"Group name pattern","group-name-pattern-required":"Group name pattern is required","create-group-if-not-exists":"Create new group if not exists","group-cache-expiration":"Groups cache expiration time (sec)","group-cache-expiration-required":"Groups cache expiration time is required.","group-cache-expiration-range":"Groups cache expiration time should be greater than or equal to 0.","group-cache-expiration-hint":"Specifies maximum time interval allowed to store found entity group records. 0 value means that records will never expire.","remove-from-current-groups":"Remove from current groups","use-report-config-from-message":"Use report config from message","use-system-reports-server":"Use system reports server","reports-server-endpoint-url":"Reports server endpoint URL","reports-server-endpoint-url-is-required":"Reports server endpoint URL is required.","tls-version":"TLS version","enable-proxy":"Enable proxy","use-system-proxy-properties":"Use system proxy properties","proxy-host":"Proxy host","proxy-host-required":"Proxy host is required.","proxy-port":"Proxy port","proxy-port-required":"Proxy port is required.","proxy-port-range":"Proxy port should be in a range from 1 to 65535.","proxy-user":"Proxy user","proxy-password":"Proxy password","proxy-scheme":"Proxy scheme","numbers-to-template":"Phone Numbers To Template","numbers-to-template-required":"Phone Numbers To Template is required","numbers-to-template-hint":'Comma separated Phone Numbers, use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body',"sms-message-template":"SMS message Template","sms-message-template-required":"SMS message Template is required","use-system-sms-settings":"Use system SMS provider settings","min-period-0-seconds-message":"Only 0 second minimum period is allowed.","max-pending-messages":"Maximum pending messages","max-pending-messages-required":"Maximum pending messages is required.","max-pending-messages-range":"Maximum pending messages should be in a range from 1 to 100000.",aggregation:"Aggregation","math-function":"Aggregation function","func-min":"Minimum","func-max":"Maximum","func-sum":"Sum","func-avg":"Average","func-count":"Count","func-count-unique":"Count unique","agg-interval-value":"Aggregation interval value","agg-interval-value-required":"Aggregation interval value is required.","agg-interval-time-unit":"Aggregation interval time unit","auto-create-intervals":"Create intervals automatically","interval-entities":"Interval entities","interval-persistence":"Interval persistence","interval-persistence-policy":"Interval persistence policy","interval-persist-policy-on-each-check":"On each check","interval-persist-policy-on-each-check-after-interval-end":"On each check after interval end","interval-persist-policy-on-each-message":"On each message","interval-check-value":"Interval check value","interval-check-value-required":"Interval check value is required.","interval-check-time-unit":"Interval check time unit","interval-ttl-value":"Interval TTL value","interval-ttl-value-required":"Interval TTL value is required.","interval-ttl-time-unit":"Interval TTL time unit","state-persistence":"State persistence","state-persistence-policy":"State persistence policy","state-persist-policy-on-each-change":"On each change","state-persist-policy-periodically":"Periodically","state-persistence-value":"State persistence value","state-persistence-value-required":"State persistence value is required.","state-persistence-time-unit":"State persistence time unit","target-entity-group":"Target entity group","entity-group-is-message-originator":"Entity group is message originator","originator-types-filter":"Originator types filter","single-entity":"Single entity","group-of-entities":"Group of entities",entities:"Entities","root-entity":"Root entity","child-entities-query":"Child entities query","child-entities":"Child entities","execution-period-value":"Execution period value","execution-period-value-required":"Execution period value is required.","execution-period-time-unit":"Execution period time unit","agg-latest-mappings":"Aggregate latest mappings",mappings:"Mappings","edit-mapping":"Edit mapping","remove-mapping":"Remove mapping","add-mapping":"Add mapping","add-mapping-prompt":"Please add mapping","attribute-scope":"Attribute scope","default-value":"Default value","default-value-required":"Default value is required.","target-telemetry":"Target telemetry","target-telemetry-required":"Target telemetry is required.","filter-entities":"Filter entities","entity-filter":"Entity filter","fetch-entity-attributes":"Fetch entity attributes","count-alarms-for-child-entities":"Count alarms for child entities","count-alarms-for-propagation-entities":"Count alarms for propagation entities","alarms-count-mappings":"Alarms count mappings","propagation-entity-types":"Propagation entity types","propagation-entity-types-info":"If propagation entity types are selected, propagated entities will be filtered by selected types, otherwise, no filtering is applied.","count-alarms-for-propagation-entities-info":"If enabled, will count alarms not only for the originator of the alarm but also for all propagated entities.",and:"and","all-alarms":"All alarms",for:"for","status-filter":"Status filter","severity-filter":"Severity filter","type-filter":"Type filter","all-statuses":"All statuses","all-severities":"All severities","all-types":"All types","add-alarm-status":"+Alarm status","add-alarm-severity":"+Alarm severity","add-alarm-type":"+Alarm type","specify-interval":"Specify interval","interval-seconds":"Interval in seconds","interval-seconds-required":"Interval is required.","min-interval-seconds-message":"Only 1 second minimum interval is allowed.","output-timeseries-key-prefix":"Output time series key prefix","output-timeseries-key-prefix-required":"Output time series key prefix required.","separator-hint":'You should press "enter" to complete field input.',"owner-type":"Owner type","owner-name-pattern":"Owner name pattern","owner-name-pattern-required":"Owner name pattern is required","create-owner-if-not-exists":"Create new owner if not exists","owner-cache-expiration":"Owners cache expiration time (sec)","owner-cache-expiration-required":"Owners cache expiration time is required.","owner-cache-expiration-range":"Owners cache expiration time should be greater than or equal to 0.","owner-cache-expiration-hint":"Specifies maximum time interval allowed to store found owner records. 0 value means that records will never expire.","select-details":"Select details","entity-details-id":"Id","entity-details-title":"Title","entity-details-country":"Country","entity-details-state":"State","entity-details-city":"City","entity-details-zip":"Zip","entity-details-address":"Address","entity-details-address2":"Address2","entity-details-additional_info":"Additional Info","entity-details-phone":"Phone","entity-details-email":"Email","email-sender":"Email sender","fields-to-check":"Fields to check","add-detail":"Add detail","check-all-keys-tooltip":"If enabled, checks the presence of all fields listed in the message and metadata field names within the incoming message and its metadata.","fields-to-check-hint":'Press "Enter" to complete field name input. Multiple field names supported.',"entity-details-list-empty":"At least one detail should be selected.","alarm-status":"Alarm status","alarm-required":"At least one alarm status should be selected.","no-entity-details-matching":"No entity details matching were found.","custom-table-name":"Custom table name","custom-table-name-required":"Table Name is required","custom-table-hint":"Enter the table name without prefix 'cs_tb_'.","message-field":"Message field","message-field-required":"Message field is required.","table-col":"Table column","table-col-required":"Table column is required.","latitude-field-name":"Latitude field name","longitude-field-name":"Longitude field name","latitude-field-name-required":"Latitude field name is required.","longitude-field-name-required":"Longitude field name is required.","fetch-perimeter-info-from-metadata":"Fetch perimeter information from metadata","fetch-perimeter-info-from-metadata-tooltip":"If perimeter type is set to 'Polygon' the value of metadata field '{{perimeterKeyName}}' will be set as perimeter definition without additional parsing of the value. Otherwise, if perimeter type is set to 'Circle' the value of '{{perimeterKeyName}}' metadata field will be parsed to extract 'latitude', 'longitude',  'radius', 'radiusUnit' fields that uses for circle perimeter definition.","perimeter-key-name":"Perimeter key name","perimeter-key-name-hint":"Metadata field name that includes perimeter information.","perimeter-key-name-required":"Perimeter key name is required.","perimeter-circle":"Circle","perimeter-polygon":"Polygon","perimeter-type":"Perimeter type","circle-center-latitude":"Center latitude","circle-center-latitude-required":"Center latitude is required.","circle-center-longitude":"Center longitude","circle-center-longitude-required":"Center longitude is required.","range-unit-meter":"Meter","range-unit-kilometer":"Kilometer","range-unit-foot":"Foot","range-unit-mile":"Mile","range-unit-nautical-mile":"Nautical mile","range-units":"Range units","range-units-required":"Range units is required.",range:"Range","range-required":"Range is required.","polygon-definition":"Polygon definition","polygon-definition-required":"Polygon definition is required.","polygon-definition-hint":"Use the following format for manual definition of polygon: [[lat1,lon1],[lat2,lon2], ... ,[latN,lonN]].","min-inside-duration":"Minimal inside duration","min-inside-duration-value-required":"Minimal inside duration is required","min-inside-duration-time-unit":"Minimal inside duration time unit","min-outside-duration":"Minimal outside duration","min-outside-duration-value-required":"Minimal outside duration is required","min-outside-duration-time-unit":"Minimal outside duration time unit","tell-failure-if-absent":"Tell Failure","tell-failure-if-absent-hint":'If at least one selected key doesn\'t exist the outbound message will report "Failure".',"get-latest-value-with-ts":"Fetch timestamp for the latest telemetry values","get-latest-value-with-ts-hint":'If selected, the latest telemetry values will also include timestamp, e.g: "temp": "&#123;"ts":1574329385897, "value":42&#125;"',"ignore-null-strings":"Ignore null strings","ignore-null-strings-hint":"If selected rule node will ignore entity fields with empty value.","aggregate-interval-type":"Aggregate interval type","aggregate-period-hour":"Hour","aggregate-period-day":"Day","aggregate-period-week":"Week (Mon - Sun)","aggregate-period-week-sun-sat":"Week (Sun - Sat)","aggregate-period-month":"Month","aggregate-period-year":"Year","aggregate-period-custom":"Custom","add-metadata-key-values-as-kafka-headers":"Add Message metadata key-value pairs to Kafka record headers","add-metadata-key-values-as-kafka-headers-hint":"If selected, key-value pairs from message metadata will be added to the outgoing records headers as byte arrays with predefined charset encoding.","charset-encoding":"Charset encoding","charset-encoding-required":"Charset encoding is required.","charset-us-ascii":"US-ASCII","charset-iso-8859-1":"ISO-8859-1","charset-utf-8":"UTF-8","charset-utf-16be":"UTF-16BE","charset-utf-16le":"UTF-16LE","charset-utf-16":"UTF-16","select-queue-hint":"The queue name can be selected from a drop-down list or add a custom name.","device-profile-node-hint":"Useful if you have duration or repeating conditions to ensure continuity of alarm state evaluation.","persist-alarm-rules":"Persist state of alarm rules","persist-alarm-rules-hint":"If enabled, the rule node will store the state of processing to the database.","fetch-alarm-rules":"Fetch state of alarm rules","fetch-alarm-rules-hint":"If enabled, the rule node will restore the state of processing on initialization and ensure that alarms are raised even after server restarts. Otherwise, the state will be restored when the first message from the device arrives.",round:"Decimals","round-range":"Decimals should be in a range from 0 to 15.","use-cache":"Use cache for latest value","tell-failure-if-delta-is-negative":"Tell Failure if delta is negative","add-period-between-msgs":"Add period between messages","search-entity-group-for-tenant-only":"Search entity group on Tenant level only","consider-message-originator-as-a-group-owner":"Consider originator as a group owner","consider-message-originator-as-a-group-owner-hint":"By default, group search starts at the same level as the message originator's owner and goes up the hierarchy to the tenant level if the group isn't found. If enabled and the originator is a Tenant or Customer, the search starts from the originator's level.","input-value-key":"Input value key","input-value-key-required":"Input value key is required.","output-value-key":"Output value key","output-value-key-required":"Output value key is required.","number-of-digits-after-floating-point":"Number of digits after floating point","number-of-digits-after-floating-point-range":"Number of digits after floating point should be in a range from 0 to 15.","failure-if-delta-negative":"Tell Failure if delta is negative","failure-if-delta-negative-tooltip":"Rule node forces failure of message processing if delta value is negative.","use-caching":"Use caching","use-caching-tooltip":'Rule node will cache the value of "{{inputValueKey}}" that arrives from the incoming message to improve performance. Note that the cache will not be updated if you modify the "{{inputValueKey}}" value elsewhere.',"add-time-difference-between-readings":'Add the time difference between "{{inputValueKey}}" readings',"add-time-difference-between-readings-tooltip":'If enabled, the rule node will add the "{{periodValueKey}}" to the outbound message.',"period-value-key":"Period value key","period-value-key-required":"Period value key is required.","general-pattern-hint":"Use ${metadataKey} for value from metadata, $[messageKey] for value from message body.","alarm-severity-pattern-hint":'Use <code><span style="color: #000;">$&#123;</span>metadataKey<span style="color: #000;">&#125;</span></code> for value from metadata, <code><span style="color: #000;">$[</span>messageKey<span style="color: #000;">]</span></code> for value from message body. Alarm severity should be system (CRITICAL, MAJOR etc.)',"output-node-name-hint":"The <b>rule node name</b> corresponds to the <b>relation type</b> of the output message, and it is used to forward messages to other rule nodes in the caller rule chain.","skip-latest-persistence":"Skip latest persistence","skip-latest-persistence-hint":"Rule node will not update values for incoming keys for the latest time series data. Useful for highly loaded use-cases to decrease the pressure on the DB.","use-server-ts":"Use server ts","use-server-ts-hint":"Rule node will use the timestamp of message processing instead of the timestamp from the message. Useful for all sorts of sequential processing if you merge messages from multiple sources (devices, assets, etc).","kv-map-pattern-hint":"All input fields support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","kv-map-single-pattern-hint":"Input field support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","shared-scope":"Shared scope","server-scope":"Server scope","client-scope":"Client scope","attribute-type":"Attribute","constant-type":"Constant","time-series-type":"Time series","message-body-type":"Message","message-metadata-type":"Metadata","argument-tile":"Arguments","no-arguments-prompt":"No arguments configured","result-title":"Result","functions-field-input":"Functions","no-option-found":"No option found","argument-source-field-input":"Source","argument-source-field-input-required":"Argument source is required.","argument-key-field-input":"Key","argument-key-field-input-required":"Argument key is required.","constant-value-field-input":"Constant value","constant-value-field-input-required":"Constant value is required.","attribute-scope-field-input":"Attribute scope","attribute-scope-field-input-required":"Attribute scope os required.","default-value-field-input":"Default value","type-field-input":"Type","type-field-input-required":"Type is required.","key-field-input":"Key","add-entity-type":"Add entity type","add-device-profile":"Add device profile","key-field-input-required":"Key is required.","number-floating-point-field-input":"Number of digits after floating point","number-floating-point-field-input-hint":"Use <i>0</i> to convert result to integer","add-to-message-field-input":"Add to message","add-to-metadata-field-input":"Add to metadata","custom-expression-field-input":"Mathematical Expression","custom-expression-field-input-required":"Mathematical expression is required","custom-expression-field-input-hint":"Specify a mathematical expression to evaluate. Default expression demonstrates how to transform Fahrenheit to Celsius","retained-message":"Retained","attributes-mapping":"Attributes mapping","latest-telemetry-mapping":"Latest telemetry mapping","add-mapped-attribute-to":"Add mapped attributes to","add-mapped-latest-telemetry-to":"Add mapped latest telemetry to","add-mapped-fields-to":"Add mapped fields to","add-selected-details-to":"Add selected details to","clear-selected-types":"Clear selected types","clear-selected-details":"Clear selected details","clear-selected-fields":"Clear selected fields","clear-selected-keys":"Clear selected keys","geofence-configuration":"Geofence configuration","coordinate-field-names":"Coordinate field names","coordinate-field-hint":"Rule node tries to retrieve the specified fields from the message. If they are not present, it will look them up in the metadata.","presence-monitoring-strategy":"Presence monitoring strategy","presence-monitoring-strategy-on-first-message":"On first message","presence-monitoring-strategy-on-each-message":"On each message","presence-monitoring-strategy-on-first-message-hint":"Reports presence status 'Inside' or 'Outside' on the first message after the configured minimal duration has passed since previous presence status 'Entered' or 'Left' update.","presence-monitoring-strategy-on-each-message-hint":"Reports presence status 'Inside' or 'Outside' on each message after presence status 'Entered' or 'Left' update.","fetch-credentials-to":"Fetch credentials to","add-originator-attributes-to":"Add originator attributes to","originator-attributes":"Originator attributes","fetch-latest-telemetry-with-timestamp":"Fetch latest telemetry with timestamp","fetch-latest-telemetry-with-timestamp-tooltip":'If selected, latest telemetry values will be added to the outbound metadata with timestamp, e.g: "{{latestTsKeyName}}": "{"ts":1574329385897, "value":42}"',"tell-failure":"Tell failure if any of the attributes are missing","tell-failure-tooltip":'If at least one selected key doesn\'t exist the outbound message will report "Failure".',"created-time":"Created time","chip-help":"Press 'Enter' to complete {{inputName}} input. \nPress 'Backspace' to delete {{inputName}}. \nMultiple values supported.",detail:"detail","field-name":"field name","device-profile":"device profile","entity-type":"entity type","message-type":"message type","timeseries-key":"time series key",type:"Type","first-name":"First name","last-name":"Last name",label:"Label","originator-fields-mapping":"Originator fields mapping","add-mapped-originator-fields-to":"Add mapped originator fields to",fields:"Fields","skip-empty-fields":"Skip empty fields","skip-empty-fields-tooltip":"Fields with empty values will not be added to the output message/output metadata.","fetch-interval":"Fetch interval","fetch-strategy":"Fetch strategy","fetch-timeseries-from-to":"Fetch time series from {{startInterval}} {{startIntervalTimeUnit}} ago to {{endInterval}} {{endIntervalTimeUnit}} ago.","fetch-timeseries-from-to-invalid":'Fetch time series invalid ("Interval start" should be less than "Interval end").',"use-metadata-dynamic-interval-tooltip":"If selected, the rule node will use dynamic interval start and end based on the message and metadata patterns.","all-mode-hint":'If selected fetch mode "All" rule node will retrieve telemetry from the fetch interval with configurable query parameters.',"first-mode-hint":'If selected fetch mode "First" rule node will retrieve the closest telemetry to the fetch interval\'s start.',"last-mode-hint":'If selected fetch mode "Last" rule node will retrieve the closest telemetry to the fetch interval\'s end.',ascending:"Ascending",descending:"Descending",min:"Min",max:"Max",average:"Average",sum:"Sum",count:"Count",none:"None","last-level-relation-tooltip":"If selected, the rule node will search related entities only on the level set in the max relation level.","last-level-device-relation-tooltip":"If selected, the rule node will search related devices only on the level set in the max relation level.","data-to-fetch":"Data to fetch","mapping-of-customers":"Mapping of customer's","map-fields-required":"All mapping fields are required.",attributes:"Attributes","related-device-attributes":"Related device attributes","add-selected-attributes-to":"Add selected attributes to","device-profiles":"Device profiles","mapping-of-tenant":"Mapping of tenant's","add-attribute-key":"Add attribute key","message-template":"Message template","message-template-required":"Message template is required","use-system-slack-settings":"Use system slack settings","slack-api-token":"Slack API token","slack-api-token-required":"Slack API token is required","deduplication-period-sec":"Deduplication period (sec)","deduplication-period-sec-required":"Deduplication period value is required.","deduplication-period-sec-range":"Deduplication period value should be in a range from 10 to 2147483647.","keys-mapping":"keys mapping","add-key":"Add key",recipients:"Recipients","message-subject-and-content":"Message subject and content","template-rules-hint":"Both input fields support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the message metadata.","originator-customer-desc":"Use customer of incoming message originator as new originator.","originator-tenant-desc":"Use current tenant as new originator.","originator-related-entity-desc":"Use related entity as new originator. Lookup based on configured relation type and direction.","originator-alarm-originator-desc":"Use alarm originator as new originator. Only if incoming message originator is alarm entity.","originator-entity-by-name-pattern-desc":"Use entity fetched from DB as new originator. Lookup based on entity type and specified name pattern.","email-from-template-hint":"Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","recipients-block-main-hint":"Comma-separated address list. All input fields support templatization. Use $[messageKey] to extract value from the message and ${metadataKey} to extract value from the metadata.","search-entity-group-for-tenant-only-hint":"By default, group search starts on the same level as the message originator's owner and goes up the hierarchy to the tenant level if the group isn't found. If enabled, the search is restricted to the tenant level only, bypassing the default behavior.","entity-group-is-message-originator-hint":"If enabled, message originator will be considered as entity group used to fetch entities. In this case incoming message will be routed via Failure chain if message originator type is not entity group.","forward-msg-default-rule-chain":"Forward message to the originator's default rule chain","forward-msg-default-rule-chain-tooltip":"If enabled, message will be forwarded to the originator's default rule chain, or rule chain from configuration, if originator has no default rule chain defined in the entity profile.","fetch-originators-attributes-customer":"Fetch originator's attributes if originator is customer","fetch-originators-attributes-customer-hint":"If enabled and incoming message originator is customer, the rule node will retrieve the originator's {{mappingOfCustomers}}, bypassing the search for a customer.","parse-originator-if-customer":"Do not change originator if originator is customer","parse-originator-if-customer-hint":"If enabled and incoming message originator is customer, the rule node will omit the search for a new originator and retain the existing one.","exclude-zero-deltas":"Exclude zero deltas from outbound message","exclude-zero-deltas-hint":'If enabled, the "{{outputValueKey}}" output key will be added to the outbound message if its value is not zero.',"exclude-zero-deltas-time-difference-hint":'If enabled, the "{{outputValueKey}}" and "{{periodValueKey}}" output keys will be added to the outbound message only if the "{{outputValueKey}}" value is not zero.',"search-direction-from":"From originator to target entity","search-direction-to":"From target entity to originator","del-relation-direction-from":"From originator","del-relation-direction-to":"To originator","target-entity":"Target entity","function-configuration":"Function configuration","function-name":"Function name","function-name-required":"Function name is required.",qualifier:"Qualifier","qualifier-hint":'If the qualifier is not specified, the default qualifier "$LATEST" will be used.',"aws-credentials":"AWS Credentials","connection-timeout":"Connection timeout","connection-timeout-required":"Connection timeout is required.","connection-timeout-min":"Min connection timeout is 0.","connection-timeout-hint":"Rule node forces failure of message processing if AWS Lambda function execution raises exception.","request-timeout":"Request timeout","request-timeout-required":"Request timeout is required","request-timeout-min":"Min request timeout is 0","request-timeout-hint":"The amount of time to wait in seconds for the request to complete before giving up and timing out. A value of 0 means infinity, and is not recommended.","tell-failure-aws-lambda":"Tell Failure if AWS Lambda function execution raises exception","tell-failure-aws-lambda-hint":"Rule node forces failure of message processing if AWS Lambda function execution raises exception."},"key-val":{key:"Key",value:"Value","see-examples":"See examples.","remove-entry":"Remove entry","remove-mapping-entry":"Remove mapping entry","add-mapping-entry":"Add mapping","add-entry":"Add entry","copy-key-values-from":"Copy key-values from","delete-key-values":"Delete key-values","delete-key-values-from":"Delete key-values from","at-least-one-key-error":"At least one key should be selected.","unique-key-value-pair-error":"'{{keyText}}' must be different from the '{{valText}}'!"},validator:{"host-private":"Host must be in the public network","url-private":"URL must be in the public network"},"mail-body-type":{"plain-text":"Plain text",html:"HTML",dynamic:"Dynamic","use-body-type-template":"Use body type template","plain-text-description":"Simple, unformatted text with no special styling or formating.","html-text-description":"Allows you to use HTML tags for formatting, links and images in your mai body.","dynamic-text-description":"Allows to use Plain Text or HTML body type dynamically based on templatization feature.","after-template-evaluation-hint":"After template evaluation value should be true for HTML, and false for Plain text."}}},!0)}(e)}}e("RuleNodeCoreConfigModule",Qr),Qr.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qr,deps:[{token:re.TranslateService}],target:t.ɵɵFactoryTarget.NgModule}),Qr.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:Qr,declarations:[Nt],imports:[X,M],exports:[wo,cr,_o,rr,qr,Hr,jr,Nt]}),Qr.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qr,imports:[X,M,wo,cr,_o,rr,qr,Hr,jr]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:Qr,decorators:[{type:d,args:[{declarations:[Nt],imports:[X,M],exports:[wo,cr,_o,rr,qr,Hr,jr,Nt]}]}],ctorParameters:function(){return[{type:re.TranslateService}]}})}}}));//# sourceMappingURL=rulenode-core-config.js.map
",
    "dataSize" : 1202716,
    "deviceProfileId" : {
      "entityType" : "DEVICE_PROFILE",
      "id" : "fae30930-8999-11f0-8a6c-59050cd4204f"
    },
    "externalId" : null,
    "fileName" : "rulenode-core-config.js",
    "hasData" : true,
    "id" : {
      "entityType" : "OTA_PACKAGE",
      "id" : "69ee6230-ad98-11f0-80dc-a13212beee54"
    },
    "name" : "test46",
    "tag" : "test46 6",
    "title" : "test46",
    "type" : "FIRMWARE",
    "url" : null,
    "version" : "6"
  }
}